// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/galaxy-book/common/core/types"
	"github.com/galaxy-book/polaris-backend/common/model/vo"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	HasRole func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	AppInfo struct {
		CheckStatus func(childComplexity int) int
		Code        func(childComplexity int) int
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		Name        func(childComplexity int) int
		Owner       func(childComplexity int) int
		Secret1     func(childComplexity int) int
		Secret2     func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdateTime  func(childComplexity int) int
		Updator     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	AppInfoList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	AreaLinkageListResp struct {
		List func(childComplexity int) int
	}

	AreaLinkageResp struct {
		Cname     func(childComplexity int) int
		Code      func(childComplexity int) int
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Attachment struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		CreatorName    func(childComplexity int) int
		FileType       func(childComplexity int) int
		Host           func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IssueList      func(childComplexity int) int
		Md5            func(childComplexity int) int
		Name           func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Path           func(childComplexity int) int
		PathCompressed func(childComplexity int) int
		Size           func(childComplexity int) int
		Suffix         func(childComplexity int) int
		Type           func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	AttachmentList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	AuthResp struct {
		Name    func(childComplexity int) int
		OrgCode func(childComplexity int) int
		OrgID   func(childComplexity int) int
		OrgName func(childComplexity int) int
		Token   func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	BasicConfigResp struct {
		BuildInfo func(childComplexity int) int
		RunMode   func(childComplexity int) int
	}

	BuildInfoDefine struct {
		BuildGoVersion func(childComplexity int) int
		BuildTime      func(childComplexity int) int
		GitCommitLog   func(childComplexity int) int
		GitStatus      func(childComplexity int) int
	}

	ChangeList struct {
		Field     func(childComplexity int) int
		FieldName func(childComplexity int) int
		NewValue  func(childComplexity int) int
		OldValue  func(childComplexity int) int
	}

	ConvertCodeResp struct {
		Code func(childComplexity int) int
	}

	DeleteProjectAttachmentResp struct {
		ResourceIds func(childComplexity int) int
	}

	DeleteProjectFolderResp struct {
		FolderIds func(childComplexity int) int
	}

	DeleteProjectResourceResp struct {
		ResourceIds func(childComplexity int) int
	}

	Department struct {
		Code          func(childComplexity int) int
		CreateTime    func(childComplexity int) int
		Creator       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsHide        func(childComplexity int) int
		Name          func(childComplexity int) int
		OrgID         func(childComplexity int) int
		ParentID      func(childComplexity int) int
		Sort          func(childComplexity int) int
		SourceChannel func(childComplexity int) int
	}

	DepartmentList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	DepartmentMemberInfo struct {
		Avatar       func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		EmplID       func(childComplexity int) int
		Name         func(childComplexity int) int
		NamePy       func(childComplexity int) int
		UnionID      func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	ExportIssueTemplateResp struct {
		URL func(childComplexity int) int
	}

	FeiShuAuthResp struct {
		Name    func(childComplexity int) int
		OrgCode func(childComplexity int) int
		OrgID   func(childComplexity int) int
		OrgName func(childComplexity int) int
		Token   func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	Folder struct {
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		CreatorName func(childComplexity int) int
		FileType    func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		Name        func(childComplexity int) int
		OrgID       func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Path        func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		UpdateTime  func(childComplexity int) int
		Updator     func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	FolderList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetInviteCodeResp struct {
		Expire     func(childComplexity int) int
		InviteCode func(childComplexity int) int
	}

	GetInviteInfoResp struct {
		InviterID   func(childComplexity int) int
		InviterName func(childComplexity int) int
		OrgID       func(childComplexity int) int
		OrgName     func(childComplexity int) int
	}

	GetMQTTChannelKeyResp struct {
		Address func(childComplexity int) int
		Channel func(childComplexity int) int
		Host    func(childComplexity int) int
		Key     func(childComplexity int) int
		Port    func(childComplexity int) int
	}

	GetPersonalPermissionInfoResp struct {
		Data func(childComplexity int) int
	}

	HomeIssueInfo struct {
		ChildsFinishedNum func(childComplexity int) int
		ChildsNum         func(childComplexity int) int
		Issue             func(childComplexity int) int
		Owner             func(childComplexity int) int
		Priority          func(childComplexity int) int
		Project           func(childComplexity int) int
		Status            func(childComplexity int) int
		Tags              func(childComplexity int) int
	}

	HomeIssueInfoResp struct {
		ActualTotal func(childComplexity int) int
		List        func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	HomeIssueOwnerInfo struct {
		Avatar     func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		IsDisabled func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	HomeIssuePriorityInfo struct {
		BgStyle   func(childComplexity int) int
		FontStyle func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	HomeIssueProjectInfo struct {
		ID        func(childComplexity int) int
		IsFilling func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	HomeIssueStatusInfo struct {
		BgStyle     func(childComplexity int) int
		DisplayName func(childComplexity int) int
		FontStyle   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	HomeIssueTagInfo struct {
		BgStyle   func(childComplexity int) int
		FontStyle func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	IndustryListResp struct {
		List func(childComplexity int) int
	}

	IndustryResp struct {
		Cname func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	InternalAuthResp struct {
		HasPermission func(childComplexity int) int
	}

	Issue struct {
		Code                func(childComplexity int) int
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		EndTime             func(childComplexity int) int
		ID                  func(childComplexity int) int
		IssueObjectTypeID   func(childComplexity int) int
		IterationID         func(childComplexity int) int
		ModuleID            func(childComplexity int) int
		OrgID               func(childComplexity int) int
		Owner               func(childComplexity int) int
		ParentID            func(childComplexity int) int
		ParentTitle         func(childComplexity int) int
		PlanEndTime         func(childComplexity int) int
		PlanStartTime       func(childComplexity int) int
		PlanWorkHour        func(childComplexity int) int
		PriorityID          func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		SourceID            func(childComplexity int) int
		StartTime           func(childComplexity int) int
		Status              func(childComplexity int) int
		Title               func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
		VersionID           func(childComplexity int) int
	}

	IssueAndProjectCountStatResp struct {
		FilingParticipantsProjectCount func(childComplexity int) int
		IssueNotCompletedCount         func(childComplexity int) int
		ParticipantsProjectCount       func(childComplexity int) int
		ProjectNotCompletedCount       func(childComplexity int) int
	}

	IssueAssignRankInfo struct {
		Avatar               func(childComplexity int) int
		EmplID               func(childComplexity int) int
		IncompleteissueCount func(childComplexity int) int
		Name                 func(childComplexity int) int
	}

	IssueDailyPersonalWorkCompletionStatData struct {
		CompletedCount func(childComplexity int) int
		StatDate       func(childComplexity int) int
	}

	IssueDailyPersonalWorkCompletionStatResp struct {
		List func(childComplexity int) int
	}

	IssueInfo struct {
		ChildsFinishedNum     func(childComplexity int) int
		ChildsNum             func(childComplexity int) int
		CreatorInfo           func(childComplexity int) int
		FollowerInfos         func(childComplexity int) int
		Issue                 func(childComplexity int) int
		NextStatus            func(childComplexity int) int
		Owner                 func(childComplexity int) int
		ParticipantInfos      func(childComplexity int) int
		Priority              func(childComplexity int) int
		Project               func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		SourceInfo            func(childComplexity int) int
		Status                func(childComplexity int) int
		Tags                  func(childComplexity int) int
		TypeInfo              func(childComplexity int) int
	}

	IssueList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueObjectType struct {
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		ID                  func(childComplexity int) int
		LangCode            func(childComplexity int) int
		Name                func(childComplexity int) int
		OrgID               func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		Status              func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
	}

	IssueObjectTypeInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IssueObjectTypeList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueReportResp struct {
		EndTime        func(childComplexity int) int
		List           func(childComplexity int) int
		ReportUserName func(childComplexity int) int
		ShareID        func(childComplexity int) int
		StartTime      func(childComplexity int) int
		Total          func(childComplexity int) int
	}

	IssueRestInfo struct {
		EndTime         func(childComplexity int) int
		Finished        func(childComplexity int) int
		ID              func(childComplexity int) int
		OwnerAvatar     func(childComplexity int) int
		OwnerID         func(childComplexity int) int
		OwnerIsDeleted  func(childComplexity int) int
		OwnerIsDisabled func(childComplexity int) int
		OwnerName       func(childComplexity int) int
		PlanEndTime     func(childComplexity int) int
		PlanStartTime   func(childComplexity int) int
		PriorityInfo    func(childComplexity int) int
		StatusID        func(childComplexity int) int
		StatusName      func(childComplexity int) int
		Title           func(childComplexity int) int
	}

	IssueRestInfoResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueSource struct {
		CreateTime          func(childComplexity int) int
		Creator             func(childComplexity int) int
		ID                  func(childComplexity int) int
		LangCode            func(childComplexity int) int
		Name                func(childComplexity int) int
		OrgID               func(childComplexity int) int
		ProjectObjectTypeID func(childComplexity int) int
		Remark              func(childComplexity int) int
		Sort                func(childComplexity int) int
		Status              func(childComplexity int) int
		UpdateTime          func(childComplexity int) int
		Updator             func(childComplexity int) int
	}

	IssueSourceInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IssueSourceList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IssueStatByObjectType struct {
		ProjectObjectTypeID   func(childComplexity int) int
		ProjectObjectTypeName func(childComplexity int) int
		Total                 func(childComplexity int) int
	}

	IssueStatusTypeStatDetailResp struct {
		Completed  func(childComplexity int) int
		NotStart   func(childComplexity int) int
		Processing func(childComplexity int) int
	}

	IssueStatusTypeStatResp struct {
		BeAboutToOverdueSum   func(childComplexity int) int
		CompletedTodayTotal   func(childComplexity int) int
		CompletedTotal        func(childComplexity int) int
		List                  func(childComplexity int) int
		NotStartTotal         func(childComplexity int) int
		OverdueCompletedTotal func(childComplexity int) int
		OverdueTodayTotal     func(childComplexity int) int
		OverdueTomorrowTotal  func(childComplexity int) int
		OverdueTotal          func(childComplexity int) int
		ProcessingTotal       func(childComplexity int) int
		TodayCount            func(childComplexity int) int
		TodayCreateCount      func(childComplexity int) int
		Total                 func(childComplexity int) int
	}

	Iteration struct {
		CreateTime    func(childComplexity int) int
		Creator       func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		OrgID         func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerInfo     func(childComplexity int) int
		PlanEndTime   func(childComplexity int) int
		PlanStartTime func(childComplexity int) int
		PlanWorkHour  func(childComplexity int) int
		ProjectID     func(childComplexity int) int
		Remark        func(childComplexity int) int
		Status        func(childComplexity int) int
		StatusInfo    func(childComplexity int) int
		StoryPoint    func(childComplexity int) int
		UpdateTime    func(childComplexity int) int
		Updator       func(childComplexity int) int
		VersionID     func(childComplexity int) int
	}

	IterationInfoResp struct {
		Iteration  func(childComplexity int) int
		NextStatus func(childComplexity int) int
		Owner      func(childComplexity int) int
		Project    func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	IterationList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IterationStat struct {
		BugCount               func(childComplexity int) int
		BugEndCount            func(childComplexity int) int
		BugRunningCount        func(childComplexity int) int
		BugWaitCount           func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		DemandCount            func(childComplexity int) int
		DemandEndCount         func(childComplexity int) int
		DemandRunningCount     func(childComplexity int) int
		DemandWaitCount        func(childComplexity int) int
		Ext                    func(childComplexity int) int
		ID                     func(childComplexity int) int
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		IterationID            func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		ProjectID              func(childComplexity int) int
		StatDate               func(childComplexity int) int
		Status                 func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
		TaskCount              func(childComplexity int) int
		TaskEndCount           func(childComplexity int) int
		TaskRunningCount       func(childComplexity int) int
		TaskWaitCount          func(childComplexity int) int
		TesttaskCount          func(childComplexity int) int
		TesttaskEndCount       func(childComplexity int) int
		TesttaskRunningCount   func(childComplexity int) int
		TesttaskWaitCount      func(childComplexity int) int
	}

	IterationStatList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	IterationStatusTypeStatResp struct {
		CompletedTotal  func(childComplexity int) int
		NotStartTotal   func(childComplexity int) int
		ProcessingTotal func(childComplexity int) int
		Total           func(childComplexity int) int
	}

	JsAPISignResp struct {
		AgentID   func(childComplexity int) int
		NoceStr   func(childComplexity int) int
		Signature func(childComplexity int) int
		TimeStamp func(childComplexity int) int
	}

	MemberInfo struct {
		Avatar func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Mutation struct {
		AddProjectMember               func(childComplexity int, input vo.RemoveProjectMemberReq) int
		ArchiveProject                 func(childComplexity int, projectID int64) int
		BindLoginName                  func(childComplexity int, input vo.BindLoginNameReq) int
		CancelArchivedProject          func(childComplexity int, projectID int64) int
		CheckLoginName                 func(childComplexity int, input vo.CheckLoginNameReq) int
		ConvertCode                    func(childComplexity int, input vo.ConvertCodeReq) int
		CreateIssue                    func(childComplexity int, input vo.CreateIssueReq) int
		CreateIssueComment             func(childComplexity int, input vo.CreateIssueCommentReq) int
		CreateIssueObjectType          func(childComplexity int, input vo.CreateIssueObjectTypeReq) int
		CreateIssueResource            func(childComplexity int, input vo.CreateIssueResourceReq) int
		CreateIssueSource              func(childComplexity int, input vo.CreateIssueSourceReq) int
		CreateIteration                func(childComplexity int, input vo.CreateIterationReq) int
		CreateOrg                      func(childComplexity int, input vo.CreateOrgReq) int
		CreatePriority                 func(childComplexity int, input vo.CreatePriorityReq) int
		CreateProcessStatus            func(childComplexity int, input vo.CreateProcessStatusReq) int
		CreateProject                  func(childComplexity int, input vo.CreateProjectReq) int
		CreateProjectDetail            func(childComplexity int, input vo.CreateProjectDetailReq) int
		CreateProjectFolder            func(childComplexity int, input vo.CreateProjectFolderReq) int
		CreateProjectObjectType        func(childComplexity int, input vo.CreateProjectObjectTypeReq) int
		CreateProjectResource          func(childComplexity int, input vo.CreateProjectResourceReq) int
		CreateRole                     func(childComplexity int, input vo.CreateRoleReq) int
		CreateTag                      func(childComplexity int, input vo.CreateTagReq) int
		DelRole                        func(childComplexity int, input vo.DelRoleReq) int
		DeleteIssue                    func(childComplexity int, input vo.DeleteIssueReq) int
		DeleteIssueObjectType          func(childComplexity int, input vo.DeleteIssueObjectTypeReq) int
		DeleteIssueResource            func(childComplexity int, input vo.DeleteIssueResourceReq) int
		DeleteIssueSource              func(childComplexity int, input vo.DeleteIssueSourceReq) int
		DeleteIteration                func(childComplexity int, input vo.DeleteIterationReq) int
		DeletePriority                 func(childComplexity int, input vo.DeletePriorityReq) int
		DeleteProcessStatus            func(childComplexity int, input vo.DeleteProcessStatusReq) int
		DeleteProjectAttachment        func(childComplexity int, input vo.DeleteProjectAttachmentReq) int
		DeleteProjectDetail            func(childComplexity int, input vo.DeleteProjectDetailReq) int
		DeleteProjectFolder            func(childComplexity int, input vo.DeleteProjectFolderReq) int
		DeleteProjectObjectType        func(childComplexity int, input vo.DeleteProjectObjectTypeReq) int
		DeleteProjectResource          func(childComplexity int, input vo.DeleteProjectResourceReq) int
		DeleteTag                      func(childComplexity int, input vo.DeleteTagReq) int
		ImportIssues                   func(childComplexity int, input vo.ImportIssuesReq) int
		QuitProject                    func(childComplexity int, projectID int64) int
		RegisterWebSiteContact         func(childComplexity int, input vo.RegisterWebSiteContactReq) int
		RemoveOrgMember                func(childComplexity int, input vo.RemoveOrgMemberReq) int
		RemoveProjectMember            func(childComplexity int, input vo.RemoveProjectMemberReq) int
		ResetPassword                  func(childComplexity int, input vo.ResetPasswordReq) int
		RetrievePassword               func(childComplexity int, input vo.RetrievePasswordReq) int
		SendAuthCode                   func(childComplexity int, input vo.SendAuthCodeReq) int
		SendSmsLoginCode               func(childComplexity int, input vo.SendSmsLoginCodeReq) int
		SetPassword                    func(childComplexity int, input vo.SetPasswordReq) int
		StarProject                    func(childComplexity int, projectID int64) int
		SwitchUserOrganization         func(childComplexity int, input vo.SwitchUserOrganizationReq) int
		UnbindLoginName                func(childComplexity int, input vo.UnbindLoginNameReq) int
		UnstarProject                  func(childComplexity int, projectID int64) int
		UpdateIssue                    func(childComplexity int, input vo.UpdateIssueReq) int
		UpdateIssueAndIssueRelate      func(childComplexity int, input vo.UpdateIssueAndIssueRelateReq) int
		UpdateIssueObjectType          func(childComplexity int, input vo.UpdateIssueObjectTypeReq) int
		UpdateIssueProjectObjectType   func(childComplexity int, input vo.UpdateIssueProjectObjectTypeReq) int
		UpdateIssueSort                func(childComplexity int, input vo.UpdateIssueSortReq) int
		UpdateIssueSource              func(childComplexity int, input vo.UpdateIssueSourceReq) int
		UpdateIssueStatus              func(childComplexity int, input vo.UpdateIssueStatusReq) int
		UpdateIssueTags                func(childComplexity int, input vo.UpdateIssueTagsReq) int
		UpdateIteration                func(childComplexity int, input vo.UpdateIterationReq) int
		UpdateIterationIssueRelate     func(childComplexity int, input vo.IterationIssueRealtionReq) int
		UpdateIterationStatus          func(childComplexity int, input vo.UpdateIterationStatusReq) int
		UpdateOrgMemberCheckStatus     func(childComplexity int, input vo.UpdateOrgMemberCheckStatusReq) int
		UpdateOrgMemberStatus          func(childComplexity int, input vo.UpdateOrgMemberStatusReq) int
		UpdateOrganizationSetting      func(childComplexity int, input vo.UpdateOrganizationSettingsReq) int
		UpdatePriority                 func(childComplexity int, input vo.UpdatePriorityReq) int
		UpdateProcessStatus            func(childComplexity int, input vo.UpdateProcessStatusReq) int
		UpdateProject                  func(childComplexity int, input vo.UpdateProjectReq) int
		UpdateProjectDetail            func(childComplexity int, input vo.UpdateProjectDetailReq) int
		UpdateProjectFolder            func(childComplexity int, input vo.UpdateProjectFolderReq) int
		UpdateProjectObjectType        func(childComplexity int, input vo.UpdateProjectObjectTypeReq) int
		UpdateProjectResourceFolder    func(childComplexity int, input vo.UpdateProjectResourceFolderReq) int
		UpdateProjectResourceName      func(childComplexity int, input vo.UpdateProjectResourceNameReq) int
		UpdateProjectStatus            func(childComplexity int, input vo.UpdateProjectStatusReq) int
		UpdateRole                     func(childComplexity int, input vo.UpdateRoleReq) int
		UpdateRolePermissionOperation  func(childComplexity int, input vo.UpdateRolePermissionOperationReq) int
		UpdateTag                      func(childComplexity int, input vo.UpdateTagReq) int
		UpdateUserConfig               func(childComplexity int, input vo.UpdateUserConfigReq) int
		UpdateUserDefaultProjectConfig func(childComplexity int, input vo.UpdateUserDefaultProjectConfigReq) int
		UpdateUserInfo                 func(childComplexity int, input vo.UpdateUserInfoReq) int
		UpdateUserOrgRole              func(childComplexity int, input vo.UpdateUserOrgRoleReq) int
		UpdateUserPcConfig             func(childComplexity int, input vo.UpdateUserPcConfigReq) int
		UserLogin                      func(childComplexity int, input vo.UserLoginReq) int
		UserQuit                       func(childComplexity int) int
		UserRegister                   func(childComplexity int, input vo.UserRegisterReq) int
	}

	Notice struct {
		Content     func(childComplexity int) int
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		CreatorInfo func(childComplexity int) int
		Ext         func(childComplexity int) int
		ID          func(childComplexity int) int
		IssueID     func(childComplexity int) int
		IssueName   func(childComplexity int) int
		Noticer     func(childComplexity int) int
		OrgID       func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		ProjectName func(childComplexity int) int
		RelationTye func(childComplexity int) int
		Status      func(childComplexity int) int
		TrendsID    func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	NoticeCountResp struct {
		Total func(childComplexity int) int
	}

	NoticeList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	OperateProjectResp struct {
		IsSuccess func(childComplexity int) int
	}

	OrgProjectMemberInfoResp struct {
		Avatar             func(childComplexity int) int
		HasOrgOutInfo      func(childComplexity int) int
		HasOutInfo         func(childComplexity int) int
		Name               func(childComplexity int) int
		NamePy             func(childComplexity int) int
		OrgID              func(childComplexity int) int
		OrgUserCheckStatus func(childComplexity int) int
		OrgUserIsDelete    func(childComplexity int) int
		OrgUserStatus      func(childComplexity int) int
		OutOrgID           func(childComplexity int) int
		OutUserID          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	OrgProjectMemberResp struct {
		AllMembers   func(childComplexity int) int
		Follower     func(childComplexity int) int
		Owner        func(childComplexity int) int
		Participants func(childComplexity int) int
	}

	OrganizationInfoResp struct {
		Address       func(childComplexity int) int
		CityCname     func(childComplexity int) int
		CityID        func(childComplexity int) int
		Code          func(childComplexity int) int
		CountryCname  func(childComplexity int) int
		CountryID     func(childComplexity int) int
		IndustryID    func(childComplexity int) int
		IndustryName  func(childComplexity int) int
		LogoURL       func(childComplexity int) int
		OrgID         func(childComplexity int) int
		OrgName       func(childComplexity int) int
		Owner         func(childComplexity int) int
		ProvinceCname func(childComplexity int) int
		ProvinceID    func(childComplexity int) int
		Scale         func(childComplexity int) int
		WebSite       func(childComplexity int) int
	}

	OrganizationUser struct {
		AuditTime        func(childComplexity int) int
		AuditorID        func(childComplexity int) int
		AuditorInfo      func(childComplexity int) int
		CheckStatus      func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		Creator          func(childComplexity int) int
		ID               func(childComplexity int) int
		OrgID            func(childComplexity int) int
		Status           func(childComplexity int) int
		StatusChangeTime func(childComplexity int) int
		StatusChangerID  func(childComplexity int) int
		UpdateTime       func(childComplexity int) int
		Updator          func(childComplexity int) int
		UseStatus        func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserInfo         func(childComplexity int) int
		UserRole         func(childComplexity int) int
	}

	OssApplySignURLResp struct {
		SignURL func(childComplexity int) int
	}

	OssPostPolicyResp struct {
		AccessID    func(childComplexity int) int
		Bucket      func(childComplexity int) int
		Callback    func(childComplexity int) int
		Dir         func(childComplexity int) int
		Expire      func(childComplexity int) int
		FileName    func(childComplexity int) int
		Host        func(childComplexity int) int
		MaxFileSize func(childComplexity int) int
		Policy      func(childComplexity int) int
		Region      func(childComplexity int) int
		Signature   func(childComplexity int) int
	}

	Permission struct {
		Code       func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		ID         func(childComplexity int) int
		IsShow     func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		ParentID   func(childComplexity int) int
		Path       func(childComplexity int) int
		Remark     func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
	}

	PermissionList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PermissionOperation struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsShow         func(childComplexity int) int
		LangCode       func(childComplexity int) int
		Name           func(childComplexity int) int
		OperationCodes func(childComplexity int) int
		OrgID          func(childComplexity int) int
		PermissionID   func(childComplexity int) int
		Remark         func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
	}

	PermissionOperationList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	PermissionOperationListResp struct {
		OperationList  func(childComplexity int) int
		PermissionHave func(childComplexity int) int
		PermissionInfo func(childComplexity int) int
	}

	PersonalInfo struct {
		Avatar             func(childComplexity int) int
		Birthday           func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Email              func(childComplexity int) int
		EmplID             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Language           func(childComplexity int) int
		LastLoginIP        func(childComplexity int) int
		LastLoginTime      func(childComplexity int) int
		Level              func(childComplexity int) int
		LevelName          func(childComplexity int) int
		LoginFailCount     func(childComplexity int) int
		LoginName          func(childComplexity int) int
		LoginNameEditCount func(childComplexity int) int
		Mobile             func(childComplexity int) int
		Motto              func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgCode            func(childComplexity int) int
		OrgID              func(childComplexity int) int
		OrgName            func(childComplexity int) int
		PasswordSet        func(childComplexity int) int
		Rimanente          func(childComplexity int) int
		Sex                func(childComplexity int) int
		SourceChannel      func(childComplexity int) int
		UpdateTime         func(childComplexity int) int
	}

	Priority struct {
		BgStyle    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDefault  func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		Remark     func(childComplexity int) int
		Sort       func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	PriorityList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProcessStatus struct {
		BgStyle    func(childComplexity int) int
		Category   func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		Remark     func(childComplexity int) int
		Sort       func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	ProcessStatusList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Project struct {
		AllIssues              func(childComplexity int) int
		AllStatus              func(childComplexity int) int
		Code                   func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		CreatorInfo            func(childComplexity int) int
		FinishIssues           func(childComplexity int) int
		FollowerInfo           func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		IsFiling               func(childComplexity int) int
		IsSyncOutCalendar      func(childComplexity int) int
		MemberInfo             func(childComplexity int) int
		Name                   func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		OverdueIssues          func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerInfo              func(childComplexity int) int
		PlanEndTime            func(childComplexity int) int
		PlanStartTime          func(childComplexity int) int
		PreCode                func(childComplexity int) int
		PriorityID             func(childComplexity int) int
		ProjectTypeID          func(childComplexity int) int
		ProjectTypeLangCode    func(childComplexity int) int
		ProjectTypeName        func(childComplexity int) int
		PublicStatus           func(childComplexity int) int
		Remark                 func(childComplexity int) int
		ResourceCompressedPath func(childComplexity int) int
		ResourceID             func(childComplexity int) int
		ResourcePath           func(childComplexity int) int
		Status                 func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
		Updator                func(childComplexity int) int
		Version                func(childComplexity int) int
	}

	ProjectDayStat struct {
		BugCount               func(childComplexity int) int
		BugEndCount            func(childComplexity int) int
		BugOverdueCount        func(childComplexity int) int
		BugRunningCount        func(childComplexity int) int
		BugWaitCount           func(childComplexity int) int
		CreateTime             func(childComplexity int) int
		Creator                func(childComplexity int) int
		DemandCount            func(childComplexity int) int
		DemandEndCount         func(childComplexity int) int
		DemandOverdueCount     func(childComplexity int) int
		DemandRunningCount     func(childComplexity int) int
		DemandWaitCount        func(childComplexity int) int
		Ext                    func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueOverdueCount      func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		OrgID                  func(childComplexity int) int
		ProjectID              func(childComplexity int) int
		StatDate               func(childComplexity int) int
		Status                 func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointOverdueCount func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
		TaskCount              func(childComplexity int) int
		TaskEndCount           func(childComplexity int) int
		TaskOverdueCount       func(childComplexity int) int
		TaskRunningCount       func(childComplexity int) int
		TaskWaitCount          func(childComplexity int) int
		TesttaskCount          func(childComplexity int) int
		TesttaskEndCount       func(childComplexity int) int
		TesttaskOverdueCount   func(childComplexity int) int
		TesttaskRunningCount   func(childComplexity int) int
		TesttaskWaitCount      func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
		Updator                func(childComplexity int) int
		Version                func(childComplexity int) int
	}

	ProjectDayStatList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectDetail struct {
		CreateTime        func(childComplexity int) int
		Creator           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsEnableWorkHours func(childComplexity int) int
		IsSyncOutCalendar func(childComplexity int) int
		Notice            func(childComplexity int) int
		OrgID             func(childComplexity int) int
		ProjectID         func(childComplexity int) int
		UpdateTime        func(childComplexity int) int
		Updator           func(childComplexity int) int
	}

	ProjectDetailList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectInfo struct {
		AllStatus     func(childComplexity int) int
		Code          func(childComplexity int) int
		CreateTime    func(childComplexity int) int
		Creator       func(childComplexity int) int
		CreatorInfo   func(childComplexity int) int
		FollowerInfo  func(childComplexity int) int
		ID            func(childComplexity int) int
		IsFiling      func(childComplexity int) int
		MemberInfo    func(childComplexity int) int
		Name          func(childComplexity int) int
		OrgID         func(childComplexity int) int
		Owner         func(childComplexity int) int
		OwnerInfo     func(childComplexity int) int
		PlanEndTime   func(childComplexity int) int
		PlanStartTime func(childComplexity int) int
		PreCode       func(childComplexity int) int
		PriorityID    func(childComplexity int) int
		ProjectTypeID func(childComplexity int) int
		PublicStatus  func(childComplexity int) int
		Remark        func(childComplexity int) int
		ResourceID    func(childComplexity int) int
		ResourcePath  func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdateTime    func(childComplexity int) int
		Updator       func(childComplexity int) int
	}

	ProjectList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectObjectType struct {
		BgStyle    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		Icon       func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		IsReadonly func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		ObjectType func(childComplexity int) int
		OrgID      func(childComplexity int) int
		PreCode    func(childComplexity int) int
		Remark     func(childComplexity int) int
		Sort       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		Updator    func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	ProjectObjectTypeList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectObjectTypeRestInfo struct {
		ID         func(childComplexity int) int
		LangCode   func(childComplexity int) int
		Name       func(childComplexity int) int
		ObjectType func(childComplexity int) int
	}

	ProjectObjectTypeWithProjectList struct {
		List func(childComplexity int) int
	}

	ProjectStatisticsResp struct {
		IterationTotal func(childComplexity int) int
		MemberTotal    func(childComplexity int) int
		TaskTotal      func(childComplexity int) int
	}

	ProjectSupportObjectTypeListResp struct {
		IterationSupportList func(childComplexity int) int
		ProjectSupportList   func(childComplexity int) int
	}

	ProjectType struct {
		CreateTime       func(childComplexity int) int
		Creator          func(childComplexity int) int
		DefaultProcessID func(childComplexity int) int
		ID               func(childComplexity int) int
		IsReadonly       func(childComplexity int) int
		LangCode         func(childComplexity int) int
		Name             func(childComplexity int) int
		OrgID            func(childComplexity int) int
		Remark           func(childComplexity int) int
		Sort             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdateTime       func(childComplexity int) int
		Updator          func(childComplexity int) int
	}

	ProjectTypeList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ProjectUserListResp struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Query struct {
		AreaLinkageList                      func(childComplexity int, input vo.AreaLinkageListReq) int
		DepartmentMembers                    func(childComplexity int, params vo.DepartmentMemberListReq) int
		Departments                          func(childComplexity int, page *int, size *int, params *vo.DepartmentListReq) int
		ExportData                           func(childComplexity int, projectID int64) int
		ExportIssueTemplate                  func(childComplexity int, projectID int64) int
		GetBaseConfig                        func(childComplexity int) int
		GetInviteCode                        func(childComplexity int, input *vo.GetInviteCodeReq) int
		GetInviteInfo                        func(childComplexity int, input vo.GetInviteInfoReq) int
		GetMQTTChannelKey                    func(childComplexity int, input vo.GetMQTTChannelKeyReq) int
		GetOssPostPolicy                     func(childComplexity int, input vo.OssPostPolicyReq) int
		GetOssSignURL                        func(childComplexity int, input vo.OssApplySignURLReq) int
		GetPersonalPermissionInfo            func(childComplexity int, projectID *int64, issueID *int64) int
		HomeIssues                           func(childComplexity int, page int, size int, input *vo.HomeIssueInfoReq) int
		HotTagList                           func(childComplexity int, projectID int64) int
		IndustryList                         func(childComplexity int) int
		IssueAndProjectCountStat             func(childComplexity int) int
		IssueAssignRank                      func(childComplexity int, input vo.IssueAssignRankReq) int
		IssueDailyPersonalWorkCompletionStat func(childComplexity int, input *vo.IssueDailyPersonalWorkCompletionStatReq) int
		IssueInfo                            func(childComplexity int, issueID int64) int
		IssueObjectTypes                     func(childComplexity int, page *int, size *int, params *vo.IssueObjectTypesReq) int
		IssueReport                          func(childComplexity int, reportType int64) int
		IssueReportDetail                    func(childComplexity int, shareID string) int
		IssueResources                       func(childComplexity int, page *int, size *int, input *vo.GetIssueResourcesReq) int
		IssueRestInfos                       func(childComplexity int, page int, size int, input *vo.IssueRestInfoReq) int
		IssueSources                         func(childComplexity int, page *int, size *int, params *vo.IssueSourcesReq) int
		IssueStatusTypeStat                  func(childComplexity int, input *vo.IssueStatusTypeStatReq) int
		IssueStatusTypeStatDetail            func(childComplexity int, input *vo.IssueStatusTypeStatReq) int
		IterationInfo                        func(childComplexity int, input vo.IterationInfoReq) int
		IterationStats                       func(childComplexity int, page *int, size *int, params vo.IterationStatReq) int
		IterationStatusTypeStat              func(childComplexity int, input *vo.IterationStatusTypeStatReq) int
		Iterations                           func(childComplexity int, page *int, size *int, params *vo.IterationListReq) int
		NoticeList                           func(childComplexity int, page *int, size *int, params *vo.NoticeListReq) int
		OrgProjectMember                     func(childComplexity int, input vo.OrgProjectMemberReq) int
		OrgRoleList                          func(childComplexity int) int
		OrgUserList                          func(childComplexity int, page *int, size *int, input vo.OrgUserListReq) int
		OrganizationInfo                     func(childComplexity int, input vo.OrganizationInfoReq) int
		PermissionOperationList              func(childComplexity int, roleID int64, projectID *int64) int
		PersonalInfo                         func(childComplexity int) int
		Prioritys                            func(childComplexity int, page *int, size *int, params *vo.PriorityListReq) int
		ProcessStatuss                       func(childComplexity int, page *int, size *int) int
		ProjectAttachment                    func(childComplexity int, page *int, size *int, params vo.ProjectAttachmentReq) int
		ProjectDayStats                      func(childComplexity int, page *int, size *int, params *vo.ProjectDayStatReq) int
		ProjectDetail                        func(childComplexity int, projectID int64) int
		ProjectFolder                        func(childComplexity int, page *int, size *int, params vo.ProjectFolderReq) int
		ProjectInfo                          func(childComplexity int, input vo.ProjectInfoReq) int
		ProjectIssueRelatedStatus            func(childComplexity int, input vo.ProjectIssueRelatedStatusReq) int
		ProjectObjectTypes                   func(childComplexity int, page *int, size *int, params *vo.ProjectObjectTypesReq) int
		ProjectObjectTypesWithProject        func(childComplexity int, projectID int64) int
		ProjectResource                      func(childComplexity int, page *int, size *int, params vo.ProjectResourceReq) int
		ProjectRoleList                      func(childComplexity int, projectID int64) int
		ProjectStatistics                    func(childComplexity int, id int64) int
		ProjectSupportObjectTypes            func(childComplexity int, input vo.ProjectSupportObjectTypeListReq) int
		ProjectTypes                         func(childComplexity int) int
		ProjectUserList                      func(childComplexity int, page *int, size *int, input vo.ProjectUserListReq) int
		Projects                             func(childComplexity int, page int, size int, params map[string]interface{}, order []*string, input *vo.ProjectsReq) int
		RelatedIssueList                     func(childComplexity int, input vo.RelatedIssueListReq) int
		TagDefaultStyle                      func(childComplexity int) int
		TagList                              func(childComplexity int, page *int, size *int, params vo.TagListReq) int
		TrendList                            func(childComplexity int, input *vo.TrendReq) int
		UnreadNoticeCount                    func(childComplexity int) int
		UserConfigInfo                       func(childComplexity int) int
		UserID                               func(childComplexity int, input string) int
		UserIds                              func(childComplexity int, input []string) int
		UserOrganizationList                 func(childComplexity int) int
	}

	QuitResult struct {
		IsQuitted func(childComplexity int) int
	}

	RelationIssue struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	RelationType struct {
		Avatar       func(childComplexity int) int
		Name         func(childComplexity int) int
		OutOrgUserID func(childComplexity int) int
		OutUserID    func(childComplexity int) int
		ProjectID    func(childComplexity int) int
		RelationType func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Resource struct {
		CreateTime     func(childComplexity int) int
		Creator        func(childComplexity int) int
		CreatorName    func(childComplexity int) int
		FileType       func(childComplexity int) int
		Host           func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		Md5            func(childComplexity int) int
		Name           func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Path           func(childComplexity int) int
		PathCompressed func(childComplexity int) int
		Size           func(childComplexity int) int
		Suffix         func(childComplexity int) int
		Type           func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		Updator        func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	ResourceInfo struct {
		Name       func(childComplexity int) int
		Size       func(childComplexity int) int
		Suffix     func(childComplexity int) int
		URL        func(childComplexity int) int
		UploadTime func(childComplexity int) int
	}

	ResourceList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Role struct {
		CreateTime         func(childComplexity int) int
		Creator            func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDefault          func(childComplexity int) int
		IsModifyPermission func(childComplexity int) int
		IsReadonly         func(childComplexity int) int
		LangCode           func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgID              func(childComplexity int) int
		Remark             func(childComplexity int) int
		RoleGroupID        func(childComplexity int) int
		Status             func(childComplexity int) int
		UpdateTime         func(childComplexity int) int
		Updator            func(childComplexity int) int
	}

	StatCommon struct {
		Count func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	StatData struct {
		IssueCount             func(childComplexity int) int
		IssueEndCount          func(childComplexity int) int
		IssueRunningCount      func(childComplexity int) int
		IssueWaitCount         func(childComplexity int) int
		StoryPointCount        func(childComplexity int) int
		StoryPointEndCount     func(childComplexity int) int
		StoryPointRunningCount func(childComplexity int) int
		StoryPointWaitCount    func(childComplexity int) int
	}

	StatExtResp struct {
		Issue func(childComplexity int) int
	}

	StatIssueExt struct {
		Data func(childComplexity int) int
	}

	StypeList struct {
		List func(childComplexity int) int
	}

	Tag struct {
		BgStyle    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Creator    func(childComplexity int) int
		FontStyle  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		NamePinyin func(childComplexity int) int
		OrgID      func(childComplexity int) int
		ProjectID  func(childComplexity int) int
		UsedNum    func(childComplexity int) int
	}

	TagList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Trend struct {
		Comment         func(childComplexity int) int
		CreateTime      func(childComplexity int) int
		Creator         func(childComplexity int) int
		CreatorInfo     func(childComplexity int) int
		Ext             func(childComplexity int) int
		Extension       func(childComplexity int) int
		ID              func(childComplexity int) int
		Module1         func(childComplexity int) int
		Module2         func(childComplexity int) int
		Module2Id       func(childComplexity int) int
		Module3         func(childComplexity int) int
		Module3Id       func(childComplexity int) int
		NewValue        func(childComplexity int) int
		OldValue        func(childComplexity int) int
		OperCode        func(childComplexity int) int
		OperObjID       func(childComplexity int) int
		OperObjName     func(childComplexity int) int
		OperObjProperty func(childComplexity int) int
		OperObjType     func(childComplexity int) int
		OrgID           func(childComplexity int) int
		RelationObjID   func(childComplexity int) int
		RelationObjType func(childComplexity int) int
		RelationType    func(childComplexity int) int
	}

	TrendExtension struct {
		ChangeList    func(childComplexity int) int
		IssueType     func(childComplexity int) int
		MemberInfo    func(childComplexity int) int
		ObjName       func(childComplexity int) int
		RelationIssue func(childComplexity int) int
		ResourceInfo  func(childComplexity int) int
	}

	TrendsList struct {
		LastTrendID func(childComplexity int) int
		List        func(childComplexity int) int
		Page        func(childComplexity int) int
		Size        func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	UpdateIssueResp struct {
		ID func(childComplexity int) int
	}

	UpdateProjectFolderResp struct {
		FolderID func(childComplexity int) int
	}

	UpdateProjectResourceFolderResp struct {
		ResourceIds func(childComplexity int) int
	}

	UpdateUserConfigResp struct {
		ID func(childComplexity int) int
	}

	UserConfig struct {
		AttentionRangeStatus            func(childComplexity int) int
		CommentAtMessageStatus          func(childComplexity int) int
		CreateRangeStatus               func(childComplexity int) int
		DailyProjectReportMessageStatus func(childComplexity int) int
		DailyReportMessageStatus        func(childComplexity int) int
		DefaultProjectID                func(childComplexity int) int
		DefaultProjectObjectTypeID      func(childComplexity int) int
		ID                              func(childComplexity int) int
		ModifyMessageStatus             func(childComplexity int) int
		OwnerRangeStatus                func(childComplexity int) int
		ParticipantRangeStatus          func(childComplexity int) int
		PcCommentAtMessageStatus        func(childComplexity int) int
		PcIssueRemindMessageStatus      func(childComplexity int) int
		PcNoticeOpenStatus              func(childComplexity int) int
		PcOrgMessageStatus              func(childComplexity int) int
		PcProjectMessageStatus          func(childComplexity int) int
		RelationMessageStatus           func(childComplexity int) int
		RemindMessageStatus             func(childComplexity int) int
	}

	UserIDInfo struct {
		Avatar     func(childComplexity int) int
		EmplID     func(childComplexity int) int
		IsDeleted  func(childComplexity int) int
		IsDisabled func(childComplexity int) int
		Name       func(childComplexity int) int
		UnionID    func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UserLoginResp struct {
		Avatar      func(childComplexity int) int
		Name        func(childComplexity int) int
		NeedInitOrg func(childComplexity int) int
		OrgCode     func(childComplexity int) int
		OrgID       func(childComplexity int) int
		OrgName     func(childComplexity int) int
		Token       func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	UserOrganization struct {
		Address         func(childComplexity int) int
		CityID          func(childComplexity int) int
		Code            func(childComplexity int) int
		CountryID       func(childComplexity int) int
		ID              func(childComplexity int) int
		IndustryID      func(childComplexity int) int
		IsAuthenticated func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsShow          func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Name            func(childComplexity int) int
		OrgIsEnabled    func(childComplexity int) int
		Owner           func(childComplexity int) int
		ProvinceID      func(childComplexity int) int
		Remark          func(childComplexity int) int
		ResorceID       func(childComplexity int) int
		Scale           func(childComplexity int) int
		SourceChannel   func(childComplexity int) int
		SourcePlatform  func(childComplexity int) int
		WebSite         func(childComplexity int) int
	}

	UserOrganizationList struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	UserOrganizationListResp struct {
		List func(childComplexity int) int
	}

	UserRegisterResp struct {
		Token func(childComplexity int) int
	}

	UserRoleInfo struct {
		ID       func(childComplexity int) int
		LangCode func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	Void struct {
		ID func(childComplexity int) int
	}

	ProjectUser struct {
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		CreatorInfo func(childComplexity int) int
		UserInfo    func(childComplexity int) int
		UserRole    func(childComplexity int) int
	}
}

type MutationResolver interface {
	SendSmsLoginCode(ctx context.Context, input vo.SendSmsLoginCodeReq) (*vo.Void, error)
	SendAuthCode(ctx context.Context, input vo.SendAuthCodeReq) (*vo.Void, error)
	RetrievePassword(ctx context.Context, input vo.RetrievePasswordReq) (*vo.Void, error)
	ResetPassword(ctx context.Context, input vo.ResetPasswordReq) (*vo.Void, error)
	SetPassword(ctx context.Context, input vo.SetPasswordReq) (*vo.Void, error)
	UnbindLoginName(ctx context.Context, input vo.UnbindLoginNameReq) (*vo.Void, error)
	BindLoginName(ctx context.Context, input vo.BindLoginNameReq) (*vo.Void, error)
	CheckLoginName(ctx context.Context, input vo.CheckLoginNameReq) (*vo.Void, error)
	UserLogin(ctx context.Context, input vo.UserLoginReq) (*vo.UserLoginResp, error)
	UserRegister(ctx context.Context, input vo.UserRegisterReq) (*vo.UserRegisterResp, error)
	UserQuit(ctx context.Context) (*vo.Void, error)
	RegisterWebSiteContact(ctx context.Context, input vo.RegisterWebSiteContactReq) (*vo.Void, error)
	QuitProject(ctx context.Context, projectID int64) (*vo.QuitResult, error)
	StarProject(ctx context.Context, projectID int64) (*vo.OperateProjectResp, error)
	UnstarProject(ctx context.Context, projectID int64) (*vo.OperateProjectResp, error)
	UpdateProjectStatus(ctx context.Context, input vo.UpdateProjectStatusReq) (*vo.Void, error)
	ArchiveProject(ctx context.Context, projectID int64) (*vo.Void, error)
	CancelArchivedProject(ctx context.Context, projectID int64) (*vo.Void, error)
	UpdateUserConfig(ctx context.Context, input vo.UpdateUserConfigReq) (*vo.UpdateUserConfigResp, error)
	UpdateUserDefaultProjectConfig(ctx context.Context, input vo.UpdateUserDefaultProjectConfigReq) (*vo.UpdateUserConfigResp, error)
	UpdateUserPcConfig(ctx context.Context, input vo.UpdateUserPcConfigReq) (*vo.UpdateUserConfigResp, error)
	ConvertCode(ctx context.Context, input vo.ConvertCodeReq) (*vo.ConvertCodeResp, error)
	UpdateIterationIssueRelate(ctx context.Context, input vo.IterationIssueRealtionReq) (*vo.Void, error)
	UpdateIterationStatus(ctx context.Context, input vo.UpdateIterationStatusReq) (*vo.Void, error)
	CreateOrg(ctx context.Context, input vo.CreateOrgReq) (*vo.Void, error)
	CreateIssue(ctx context.Context, input vo.CreateIssueReq) (*vo.Issue, error)
	CreateIssueComment(ctx context.Context, input vo.CreateIssueCommentReq) (*vo.Void, error)
	CreateIssueResource(ctx context.Context, input vo.CreateIssueResourceReq) (*vo.Void, error)
	DeleteIssueResource(ctx context.Context, input vo.DeleteIssueResourceReq) (*vo.Void, error)
	UpdateIssueAndIssueRelate(ctx context.Context, input vo.UpdateIssueAndIssueRelateReq) (*vo.Void, error)
	UpdateIssue(ctx context.Context, input vo.UpdateIssueReq) (*vo.UpdateIssueResp, error)
	UpdateIssueStatus(ctx context.Context, input vo.UpdateIssueStatusReq) (*vo.Issue, error)
	UpdateIssueSort(ctx context.Context, input vo.UpdateIssueSortReq) (*vo.Void, error)
	UpdateIssueProjectObjectType(ctx context.Context, input vo.UpdateIssueProjectObjectTypeReq) (*vo.Void, error)
	UpdateIssueTags(ctx context.Context, input vo.UpdateIssueTagsReq) (*vo.Void, error)
	DeleteIssue(ctx context.Context, input vo.DeleteIssueReq) (*vo.Issue, error)
	CreateProject(ctx context.Context, input vo.CreateProjectReq) (*vo.Project, error)
	UpdateProject(ctx context.Context, input vo.UpdateProjectReq) (*vo.Project, error)
	CreateProcessStatus(ctx context.Context, input vo.CreateProcessStatusReq) (*vo.Void, error)
	UpdateProcessStatus(ctx context.Context, input vo.UpdateProcessStatusReq) (*vo.Void, error)
	DeleteProcessStatus(ctx context.Context, input vo.DeleteProcessStatusReq) (*vo.Void, error)
	CreatePriority(ctx context.Context, input vo.CreatePriorityReq) (*vo.Void, error)
	UpdatePriority(ctx context.Context, input vo.UpdatePriorityReq) (*vo.Void, error)
	DeletePriority(ctx context.Context, input vo.DeletePriorityReq) (*vo.Void, error)
	CreateIteration(ctx context.Context, input vo.CreateIterationReq) (*vo.Void, error)
	UpdateIteration(ctx context.Context, input vo.UpdateIterationReq) (*vo.Void, error)
	DeleteIteration(ctx context.Context, input vo.DeleteIterationReq) (*vo.Void, error)
	CreateProjectDetail(ctx context.Context, input vo.CreateProjectDetailReq) (*vo.Void, error)
	UpdateProjectDetail(ctx context.Context, input vo.UpdateProjectDetailReq) (*vo.Void, error)
	DeleteProjectDetail(ctx context.Context, input vo.DeleteProjectDetailReq) (*vo.Void, error)
	ImportIssues(ctx context.Context, input vo.ImportIssuesReq) (*vo.Void, error)
	CreateTag(ctx context.Context, input vo.CreateTagReq) (*vo.Void, error)
	DeleteTag(ctx context.Context, input vo.DeleteTagReq) (*vo.Void, error)
	UpdateTag(ctx context.Context, input vo.UpdateTagReq) (*vo.Void, error)
	CreateProjectObjectType(ctx context.Context, input vo.CreateProjectObjectTypeReq) (*vo.Void, error)
	UpdateProjectObjectType(ctx context.Context, input vo.UpdateProjectObjectTypeReq) (*vo.Void, error)
	DeleteProjectObjectType(ctx context.Context, input vo.DeleteProjectObjectTypeReq) (*vo.Void, error)
	CreateIssueObjectType(ctx context.Context, input vo.CreateIssueObjectTypeReq) (*vo.Void, error)
	UpdateIssueObjectType(ctx context.Context, input vo.UpdateIssueObjectTypeReq) (*vo.Void, error)
	DeleteIssueObjectType(ctx context.Context, input vo.DeleteIssueObjectTypeReq) (*vo.Void, error)
	CreateIssueSource(ctx context.Context, input vo.CreateIssueSourceReq) (*vo.Void, error)
	UpdateIssueSource(ctx context.Context, input vo.UpdateIssueSourceReq) (*vo.Void, error)
	DeleteIssueSource(ctx context.Context, input vo.DeleteIssueSourceReq) (*vo.Void, error)
	SwitchUserOrganization(ctx context.Context, input vo.SwitchUserOrganizationReq) (*vo.Void, error)
	UpdateOrganizationSetting(ctx context.Context, input vo.UpdateOrganizationSettingsReq) (*vo.Void, error)
	UpdateUserOrgRole(ctx context.Context, input vo.UpdateUserOrgRoleReq) (*vo.Void, error)
	UpdateOrgMemberStatus(ctx context.Context, input vo.UpdateOrgMemberStatusReq) (*vo.Void, error)
	UpdateOrgMemberCheckStatus(ctx context.Context, input vo.UpdateOrgMemberCheckStatusReq) (*vo.Void, error)
	CreateRole(ctx context.Context, input vo.CreateRoleReq) (*vo.Void, error)
	UpdateRolePermissionOperation(ctx context.Context, input vo.UpdateRolePermissionOperationReq) (*vo.Void, error)
	DelRole(ctx context.Context, input vo.DelRoleReq) (*vo.Void, error)
	UpdateRole(ctx context.Context, input vo.UpdateRoleReq) (*vo.Void, error)
	RemoveOrgMember(ctx context.Context, input vo.RemoveOrgMemberReq) (*vo.Void, error)
	UpdateUserInfo(ctx context.Context, input vo.UpdateUserInfoReq) (*vo.Void, error)
	RemoveProjectMember(ctx context.Context, input vo.RemoveProjectMemberReq) (*vo.Void, error)
	AddProjectMember(ctx context.Context, input vo.RemoveProjectMemberReq) (*vo.Void, error)
	CreateProjectResource(ctx context.Context, input vo.CreateProjectResourceReq) (*vo.Void, error)
	UpdateProjectResourceFolder(ctx context.Context, input vo.UpdateProjectResourceFolderReq) (*vo.UpdateProjectResourceFolderResp, error)
	UpdateProjectResourceName(ctx context.Context, input vo.UpdateProjectResourceNameReq) (*vo.Void, error)
	DeleteProjectResource(ctx context.Context, input vo.DeleteProjectResourceReq) (*vo.DeleteProjectResourceResp, error)
	CreateProjectFolder(ctx context.Context, input vo.CreateProjectFolderReq) (*vo.Void, error)
	DeleteProjectFolder(ctx context.Context, input vo.DeleteProjectFolderReq) (*vo.DeleteProjectFolderResp, error)
	UpdateProjectFolder(ctx context.Context, input vo.UpdateProjectFolderReq) (*vo.UpdateProjectFolderResp, error)
	DeleteProjectAttachment(ctx context.Context, input vo.DeleteProjectAttachmentReq) (*vo.DeleteProjectAttachmentResp, error)
}
type QueryResolver interface {
	GetBaseConfig(ctx context.Context) (*vo.BasicConfigResp, error)
	PersonalInfo(ctx context.Context) (*vo.PersonalInfo, error)
	UserConfigInfo(ctx context.Context) (*vo.UserConfig, error)
	HomeIssues(ctx context.Context, page int, size int, input *vo.HomeIssueInfoReq) (*vo.HomeIssueInfoResp, error)
	IssueInfo(ctx context.Context, issueID int64) (*vo.IssueInfo, error)
	IssueRestInfos(ctx context.Context, page int, size int, input *vo.IssueRestInfoReq) (*vo.IssueRestInfoResp, error)
	RelatedIssueList(ctx context.Context, input vo.RelatedIssueListReq) (*vo.IssueRestInfoResp, error)
	IssueReport(ctx context.Context, reportType int64) (*vo.IssueReportResp, error)
	IssueReportDetail(ctx context.Context, shareID string) (*vo.IssueReportResp, error)
	IssueAndProjectCountStat(ctx context.Context) (*vo.IssueAndProjectCountStatResp, error)
	IssueStatusTypeStat(ctx context.Context, input *vo.IssueStatusTypeStatReq) (*vo.IssueStatusTypeStatResp, error)
	IssueStatusTypeStatDetail(ctx context.Context, input *vo.IssueStatusTypeStatReq) (*vo.IssueStatusTypeStatDetailResp, error)
	IssueDailyPersonalWorkCompletionStat(ctx context.Context, input *vo.IssueDailyPersonalWorkCompletionStatReq) (*vo.IssueDailyPersonalWorkCompletionStatResp, error)
	IssueAssignRank(ctx context.Context, input vo.IssueAssignRankReq) ([]*vo.IssueAssignRankInfo, error)
	IssueResources(ctx context.Context, page *int, size *int, input *vo.GetIssueResourcesReq) (*vo.ResourceList, error)
	TrendList(ctx context.Context, input *vo.TrendReq) (*vo.TrendsList, error)
	ProjectStatistics(ctx context.Context, id int64) (*vo.ProjectStatisticsResp, error)
	ProjectIssueRelatedStatus(ctx context.Context, input vo.ProjectIssueRelatedStatusReq) ([]*vo.HomeIssueStatusInfo, error)
	IterationStatusTypeStat(ctx context.Context, input *vo.IterationStatusTypeStatReq) (*vo.IterationStatusTypeStatResp, error)
	IterationInfo(ctx context.Context, input vo.IterationInfoReq) (*vo.IterationInfoResp, error)
	UserIds(ctx context.Context, input []string) ([]*vo.UserIDInfo, error)
	UserID(ctx context.Context, input string) (*vo.UserIDInfo, error)
	GetOssSignURL(ctx context.Context, input vo.OssApplySignURLReq) (*vo.OssApplySignURLResp, error)
	GetOssPostPolicy(ctx context.Context, input vo.OssPostPolicyReq) (*vo.OssPostPolicyResp, error)
	GetInviteCode(ctx context.Context, input *vo.GetInviteCodeReq) (*vo.GetInviteCodeResp, error)
	GetInviteInfo(ctx context.Context, input vo.GetInviteInfoReq) (*vo.GetInviteInfoResp, error)
	GetMQTTChannelKey(ctx context.Context, input vo.GetMQTTChannelKeyReq) (*vo.GetMQTTChannelKeyResp, error)
	ProjectSupportObjectTypes(ctx context.Context, input vo.ProjectSupportObjectTypeListReq) (*vo.ProjectSupportObjectTypeListResp, error)
	Prioritys(ctx context.Context, page *int, size *int, params *vo.PriorityListReq) (*vo.PriorityList, error)
	ProcessStatuss(ctx context.Context, page *int, size *int) (*vo.ProcessStatusList, error)
	Projects(ctx context.Context, page int, size int, params map[string]interface{}, order []*string, input *vo.ProjectsReq) (*vo.ProjectList, error)
	ProjectInfo(ctx context.Context, input vo.ProjectInfoReq) (*vo.ProjectInfo, error)
	Iterations(ctx context.Context, page *int, size *int, params *vo.IterationListReq) (*vo.IterationList, error)
	IterationStats(ctx context.Context, page *int, size *int, params vo.IterationStatReq) (*vo.IterationStatList, error)
	ProjectDetail(ctx context.Context, projectID int64) (*vo.ProjectDetail, error)
	ProjectObjectTypes(ctx context.Context, page *int, size *int, params *vo.ProjectObjectTypesReq) (*vo.ProjectObjectTypeList, error)
	ProjectDayStats(ctx context.Context, page *int, size *int, params *vo.ProjectDayStatReq) (*vo.ProjectDayStatList, error)
	IssueObjectTypes(ctx context.Context, page *int, size *int, params *vo.IssueObjectTypesReq) (*vo.IssueObjectTypeList, error)
	IssueSources(ctx context.Context, page *int, size *int, params *vo.IssueSourcesReq) (*vo.IssueSourceList, error)
	ProjectObjectTypesWithProject(ctx context.Context, projectID int64) (*vo.ProjectObjectTypeWithProjectList, error)
	Departments(ctx context.Context, page *int, size *int, params *vo.DepartmentListReq) (*vo.DepartmentList, error)
	DepartmentMembers(ctx context.Context, params vo.DepartmentMemberListReq) ([]*vo.DepartmentMemberInfo, error)
	ProjectTypes(ctx context.Context) ([]*vo.ProjectType, error)
	UserOrganizationList(ctx context.Context) (*vo.UserOrganizationListResp, error)
	TagList(ctx context.Context, page *int, size *int, params vo.TagListReq) (*vo.TagList, error)
	HotTagList(ctx context.Context, projectID int64) (*vo.TagList, error)
	TagDefaultStyle(ctx context.Context) (*vo.StypeList, error)
	NoticeList(ctx context.Context, page *int, size *int, params *vo.NoticeListReq) (*vo.NoticeList, error)
	UnreadNoticeCount(ctx context.Context) (*vo.NoticeCountResp, error)
	AreaLinkageList(ctx context.Context, input vo.AreaLinkageListReq) (*vo.AreaLinkageListResp, error)
	IndustryList(ctx context.Context) (*vo.IndustryListResp, error)
	OrganizationInfo(ctx context.Context, input vo.OrganizationInfoReq) (*vo.OrganizationInfoResp, error)
	ExportIssueTemplate(ctx context.Context, projectID int64) (*vo.ExportIssueTemplateResp, error)
	OrgUserList(ctx context.Context, page *int, size *int, input vo.OrgUserListReq) (*vo.UserOrganizationList, error)
	PermissionOperationList(ctx context.Context, roleID int64, projectID *int64) ([]*vo.PermissionOperationListResp, error)
	OrgRoleList(ctx context.Context) ([]*vo.Role, error)
	ExportData(ctx context.Context, projectID int64) (*vo.ExportIssueTemplateResp, error)
	ProjectUserList(ctx context.Context, page *int, size *int, input vo.ProjectUserListReq) (*vo.ProjectUserListResp, error)
	ProjectRoleList(ctx context.Context, projectID int64) ([]*vo.Role, error)
	OrgProjectMember(ctx context.Context, input vo.OrgProjectMemberReq) (*vo.OrgProjectMemberResp, error)
	ProjectResource(ctx context.Context, page *int, size *int, params vo.ProjectResourceReq) (*vo.ResourceList, error)
	ProjectFolder(ctx context.Context, page *int, size *int, params vo.ProjectFolderReq) (*vo.FolderList, error)
	ProjectAttachment(ctx context.Context, page *int, size *int, params vo.ProjectAttachmentReq) (*vo.AttachmentList, error)
	GetPersonalPermissionInfo(ctx context.Context, projectID *int64, issueID *int64) (*vo.GetPersonalPermissionInfoResp, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AppInfo.checkStatus":
		if e.complexity.AppInfo.CheckStatus == nil {
			break
		}

		return e.complexity.AppInfo.CheckStatus(childComplexity), true

	case "AppInfo.code":
		if e.complexity.AppInfo.Code == nil {
			break
		}

		return e.complexity.AppInfo.Code(childComplexity), true

	case "AppInfo.createTime":
		if e.complexity.AppInfo.CreateTime == nil {
			break
		}

		return e.complexity.AppInfo.CreateTime(childComplexity), true

	case "AppInfo.creator":
		if e.complexity.AppInfo.Creator == nil {
			break
		}

		return e.complexity.AppInfo.Creator(childComplexity), true

	case "AppInfo.id":
		if e.complexity.AppInfo.ID == nil {
			break
		}

		return e.complexity.AppInfo.ID(childComplexity), true

	case "AppInfo.isDelete":
		if e.complexity.AppInfo.IsDelete == nil {
			break
		}

		return e.complexity.AppInfo.IsDelete(childComplexity), true

	case "AppInfo.name":
		if e.complexity.AppInfo.Name == nil {
			break
		}

		return e.complexity.AppInfo.Name(childComplexity), true

	case "AppInfo.owner":
		if e.complexity.AppInfo.Owner == nil {
			break
		}

		return e.complexity.AppInfo.Owner(childComplexity), true

	case "AppInfo.secret1":
		if e.complexity.AppInfo.Secret1 == nil {
			break
		}

		return e.complexity.AppInfo.Secret1(childComplexity), true

	case "AppInfo.secret2":
		if e.complexity.AppInfo.Secret2 == nil {
			break
		}

		return e.complexity.AppInfo.Secret2(childComplexity), true

	case "AppInfo.status":
		if e.complexity.AppInfo.Status == nil {
			break
		}

		return e.complexity.AppInfo.Status(childComplexity), true

	case "AppInfo.updateTime":
		if e.complexity.AppInfo.UpdateTime == nil {
			break
		}

		return e.complexity.AppInfo.UpdateTime(childComplexity), true

	case "AppInfo.updator":
		if e.complexity.AppInfo.Updator == nil {
			break
		}

		return e.complexity.AppInfo.Updator(childComplexity), true

	case "AppInfo.version":
		if e.complexity.AppInfo.Version == nil {
			break
		}

		return e.complexity.AppInfo.Version(childComplexity), true

	case "AppInfoList.list":
		if e.complexity.AppInfoList.List == nil {
			break
		}

		return e.complexity.AppInfoList.List(childComplexity), true

	case "AppInfoList.total":
		if e.complexity.AppInfoList.Total == nil {
			break
		}

		return e.complexity.AppInfoList.Total(childComplexity), true

	case "AreaLinkageListResp.list":
		if e.complexity.AreaLinkageListResp.List == nil {
			break
		}

		return e.complexity.AreaLinkageListResp.List(childComplexity), true

	case "AreaLinkageResp.cname":
		if e.complexity.AreaLinkageResp.Cname == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Cname(childComplexity), true

	case "AreaLinkageResp.code":
		if e.complexity.AreaLinkageResp.Code == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Code(childComplexity), true

	case "AreaLinkageResp.id":
		if e.complexity.AreaLinkageResp.ID == nil {
			break
		}

		return e.complexity.AreaLinkageResp.ID(childComplexity), true

	case "AreaLinkageResp.isDefault":
		if e.complexity.AreaLinkageResp.IsDefault == nil {
			break
		}

		return e.complexity.AreaLinkageResp.IsDefault(childComplexity), true

	case "AreaLinkageResp.name":
		if e.complexity.AreaLinkageResp.Name == nil {
			break
		}

		return e.complexity.AreaLinkageResp.Name(childComplexity), true

	case "Attachment.createTime":
		if e.complexity.Attachment.CreateTime == nil {
			break
		}

		return e.complexity.Attachment.CreateTime(childComplexity), true

	case "Attachment.creator":
		if e.complexity.Attachment.Creator == nil {
			break
		}

		return e.complexity.Attachment.Creator(childComplexity), true

	case "Attachment.creatorName":
		if e.complexity.Attachment.CreatorName == nil {
			break
		}

		return e.complexity.Attachment.CreatorName(childComplexity), true

	case "Attachment.fileType":
		if e.complexity.Attachment.FileType == nil {
			break
		}

		return e.complexity.Attachment.FileType(childComplexity), true

	case "Attachment.host":
		if e.complexity.Attachment.Host == nil {
			break
		}

		return e.complexity.Attachment.Host(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "Attachment.isDelete":
		if e.complexity.Attachment.IsDelete == nil {
			break
		}

		return e.complexity.Attachment.IsDelete(childComplexity), true

	case "Attachment.issueList":
		if e.complexity.Attachment.IssueList == nil {
			break
		}

		return e.complexity.Attachment.IssueList(childComplexity), true

	case "Attachment.md5":
		if e.complexity.Attachment.Md5 == nil {
			break
		}

		return e.complexity.Attachment.Md5(childComplexity), true

	case "Attachment.name":
		if e.complexity.Attachment.Name == nil {
			break
		}

		return e.complexity.Attachment.Name(childComplexity), true

	case "Attachment.orgId":
		if e.complexity.Attachment.OrgID == nil {
			break
		}

		return e.complexity.Attachment.OrgID(childComplexity), true

	case "Attachment.path":
		if e.complexity.Attachment.Path == nil {
			break
		}

		return e.complexity.Attachment.Path(childComplexity), true

	case "Attachment.pathCompressed":
		if e.complexity.Attachment.PathCompressed == nil {
			break
		}

		return e.complexity.Attachment.PathCompressed(childComplexity), true

	case "Attachment.size":
		if e.complexity.Attachment.Size == nil {
			break
		}

		return e.complexity.Attachment.Size(childComplexity), true

	case "Attachment.suffix":
		if e.complexity.Attachment.Suffix == nil {
			break
		}

		return e.complexity.Attachment.Suffix(childComplexity), true

	case "Attachment.type":
		if e.complexity.Attachment.Type == nil {
			break
		}

		return e.complexity.Attachment.Type(childComplexity), true

	case "Attachment.updateTime":
		if e.complexity.Attachment.UpdateTime == nil {
			break
		}

		return e.complexity.Attachment.UpdateTime(childComplexity), true

	case "Attachment.updator":
		if e.complexity.Attachment.Updator == nil {
			break
		}

		return e.complexity.Attachment.Updator(childComplexity), true

	case "Attachment.version":
		if e.complexity.Attachment.Version == nil {
			break
		}

		return e.complexity.Attachment.Version(childComplexity), true

	case "AttachmentList.list":
		if e.complexity.AttachmentList.List == nil {
			break
		}

		return e.complexity.AttachmentList.List(childComplexity), true

	case "AttachmentList.total":
		if e.complexity.AttachmentList.Total == nil {
			break
		}

		return e.complexity.AttachmentList.Total(childComplexity), true

	case "AuthResp.name":
		if e.complexity.AuthResp.Name == nil {
			break
		}

		return e.complexity.AuthResp.Name(childComplexity), true

	case "AuthResp.orgCode":
		if e.complexity.AuthResp.OrgCode == nil {
			break
		}

		return e.complexity.AuthResp.OrgCode(childComplexity), true

	case "AuthResp.orgId":
		if e.complexity.AuthResp.OrgID == nil {
			break
		}

		return e.complexity.AuthResp.OrgID(childComplexity), true

	case "AuthResp.orgName":
		if e.complexity.AuthResp.OrgName == nil {
			break
		}

		return e.complexity.AuthResp.OrgName(childComplexity), true

	case "AuthResp.token":
		if e.complexity.AuthResp.Token == nil {
			break
		}

		return e.complexity.AuthResp.Token(childComplexity), true

	case "AuthResp.userId":
		if e.complexity.AuthResp.UserID == nil {
			break
		}

		return e.complexity.AuthResp.UserID(childComplexity), true

	case "BasicConfigResp.buildInfo":
		if e.complexity.BasicConfigResp.BuildInfo == nil {
			break
		}

		return e.complexity.BasicConfigResp.BuildInfo(childComplexity), true

	case "BasicConfigResp.runMode":
		if e.complexity.BasicConfigResp.RunMode == nil {
			break
		}

		return e.complexity.BasicConfigResp.RunMode(childComplexity), true

	case "BuildInfoDefine.buildGoVersion":
		if e.complexity.BuildInfoDefine.BuildGoVersion == nil {
			break
		}

		return e.complexity.BuildInfoDefine.BuildGoVersion(childComplexity), true

	case "BuildInfoDefine.buildTime":
		if e.complexity.BuildInfoDefine.BuildTime == nil {
			break
		}

		return e.complexity.BuildInfoDefine.BuildTime(childComplexity), true

	case "BuildInfoDefine.gitCommitLog":
		if e.complexity.BuildInfoDefine.GitCommitLog == nil {
			break
		}

		return e.complexity.BuildInfoDefine.GitCommitLog(childComplexity), true

	case "BuildInfoDefine.gitStatus":
		if e.complexity.BuildInfoDefine.GitStatus == nil {
			break
		}

		return e.complexity.BuildInfoDefine.GitStatus(childComplexity), true

	case "ChangeList.field":
		if e.complexity.ChangeList.Field == nil {
			break
		}

		return e.complexity.ChangeList.Field(childComplexity), true

	case "ChangeList.fieldName":
		if e.complexity.ChangeList.FieldName == nil {
			break
		}

		return e.complexity.ChangeList.FieldName(childComplexity), true

	case "ChangeList.newValue":
		if e.complexity.ChangeList.NewValue == nil {
			break
		}

		return e.complexity.ChangeList.NewValue(childComplexity), true

	case "ChangeList.oldValue":
		if e.complexity.ChangeList.OldValue == nil {
			break
		}

		return e.complexity.ChangeList.OldValue(childComplexity), true

	case "ConvertCodeResp.code":
		if e.complexity.ConvertCodeResp.Code == nil {
			break
		}

		return e.complexity.ConvertCodeResp.Code(childComplexity), true

	case "DeleteProjectAttachmentResp.resourceIds":
		if e.complexity.DeleteProjectAttachmentResp.ResourceIds == nil {
			break
		}

		return e.complexity.DeleteProjectAttachmentResp.ResourceIds(childComplexity), true

	case "DeleteProjectFolderResp.folderIds":
		if e.complexity.DeleteProjectFolderResp.FolderIds == nil {
			break
		}

		return e.complexity.DeleteProjectFolderResp.FolderIds(childComplexity), true

	case "DeleteProjectResourceResp.resourceIds":
		if e.complexity.DeleteProjectResourceResp.ResourceIds == nil {
			break
		}

		return e.complexity.DeleteProjectResourceResp.ResourceIds(childComplexity), true

	case "Department.code":
		if e.complexity.Department.Code == nil {
			break
		}

		return e.complexity.Department.Code(childComplexity), true

	case "Department.createTime":
		if e.complexity.Department.CreateTime == nil {
			break
		}

		return e.complexity.Department.CreateTime(childComplexity), true

	case "Department.creator":
		if e.complexity.Department.Creator == nil {
			break
		}

		return e.complexity.Department.Creator(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.isHide":
		if e.complexity.Department.IsHide == nil {
			break
		}

		return e.complexity.Department.IsHide(childComplexity), true

	case "Department.name":
		if e.complexity.Department.Name == nil {
			break
		}

		return e.complexity.Department.Name(childComplexity), true

	case "Department.orgId":
		if e.complexity.Department.OrgID == nil {
			break
		}

		return e.complexity.Department.OrgID(childComplexity), true

	case "Department.parentId":
		if e.complexity.Department.ParentID == nil {
			break
		}

		return e.complexity.Department.ParentID(childComplexity), true

	case "Department.sort":
		if e.complexity.Department.Sort == nil {
			break
		}

		return e.complexity.Department.Sort(childComplexity), true

	case "Department.sourceChannel":
		if e.complexity.Department.SourceChannel == nil {
			break
		}

		return e.complexity.Department.SourceChannel(childComplexity), true

	case "DepartmentList.list":
		if e.complexity.DepartmentList.List == nil {
			break
		}

		return e.complexity.DepartmentList.List(childComplexity), true

	case "DepartmentList.total":
		if e.complexity.DepartmentList.Total == nil {
			break
		}

		return e.complexity.DepartmentList.Total(childComplexity), true

	case "DepartmentMemberInfo.avatar":
		if e.complexity.DepartmentMemberInfo.Avatar == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.Avatar(childComplexity), true

	case "DepartmentMemberInfo.departmentId":
		if e.complexity.DepartmentMemberInfo.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.DepartmentID(childComplexity), true

	case "DepartmentMemberInfo.emplId":
		if e.complexity.DepartmentMemberInfo.EmplID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.EmplID(childComplexity), true

	case "DepartmentMemberInfo.name":
		if e.complexity.DepartmentMemberInfo.Name == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.Name(childComplexity), true

	case "DepartmentMemberInfo.namePy":
		if e.complexity.DepartmentMemberInfo.NamePy == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.NamePy(childComplexity), true

	case "DepartmentMemberInfo.unionId":
		if e.complexity.DepartmentMemberInfo.UnionID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.UnionID(childComplexity), true

	case "DepartmentMemberInfo.userId":
		if e.complexity.DepartmentMemberInfo.UserID == nil {
			break
		}

		return e.complexity.DepartmentMemberInfo.UserID(childComplexity), true

	case "ExportIssueTemplateResp.url":
		if e.complexity.ExportIssueTemplateResp.URL == nil {
			break
		}

		return e.complexity.ExportIssueTemplateResp.URL(childComplexity), true

	case "FeiShuAuthResp.name":
		if e.complexity.FeiShuAuthResp.Name == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.Name(childComplexity), true

	case "FeiShuAuthResp.orgCode":
		if e.complexity.FeiShuAuthResp.OrgCode == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgCode(childComplexity), true

	case "FeiShuAuthResp.orgId":
		if e.complexity.FeiShuAuthResp.OrgID == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgID(childComplexity), true

	case "FeiShuAuthResp.orgName":
		if e.complexity.FeiShuAuthResp.OrgName == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.OrgName(childComplexity), true

	case "FeiShuAuthResp.token":
		if e.complexity.FeiShuAuthResp.Token == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.Token(childComplexity), true

	case "FeiShuAuthResp.userId":
		if e.complexity.FeiShuAuthResp.UserID == nil {
			break
		}

		return e.complexity.FeiShuAuthResp.UserID(childComplexity), true

	case "Folder.createTime":
		if e.complexity.Folder.CreateTime == nil {
			break
		}

		return e.complexity.Folder.CreateTime(childComplexity), true

	case "Folder.creator":
		if e.complexity.Folder.Creator == nil {
			break
		}

		return e.complexity.Folder.Creator(childComplexity), true

	case "Folder.creatorName":
		if e.complexity.Folder.CreatorName == nil {
			break
		}

		return e.complexity.Folder.CreatorName(childComplexity), true

	case "Folder.fileType":
		if e.complexity.Folder.FileType == nil {
			break
		}

		return e.complexity.Folder.FileType(childComplexity), true

	case "Folder.id":
		if e.complexity.Folder.ID == nil {
			break
		}

		return e.complexity.Folder.ID(childComplexity), true

	case "Folder.isDelete":
		if e.complexity.Folder.IsDelete == nil {
			break
		}

		return e.complexity.Folder.IsDelete(childComplexity), true

	case "Folder.name":
		if e.complexity.Folder.Name == nil {
			break
		}

		return e.complexity.Folder.Name(childComplexity), true

	case "Folder.orgId":
		if e.complexity.Folder.OrgID == nil {
			break
		}

		return e.complexity.Folder.OrgID(childComplexity), true

	case "Folder.parentId":
		if e.complexity.Folder.ParentID == nil {
			break
		}

		return e.complexity.Folder.ParentID(childComplexity), true

	case "Folder.path":
		if e.complexity.Folder.Path == nil {
			break
		}

		return e.complexity.Folder.Path(childComplexity), true

	case "Folder.projectId":
		if e.complexity.Folder.ProjectID == nil {
			break
		}

		return e.complexity.Folder.ProjectID(childComplexity), true

	case "Folder.updateTime":
		if e.complexity.Folder.UpdateTime == nil {
			break
		}

		return e.complexity.Folder.UpdateTime(childComplexity), true

	case "Folder.updator":
		if e.complexity.Folder.Updator == nil {
			break
		}

		return e.complexity.Folder.Updator(childComplexity), true

	case "Folder.version":
		if e.complexity.Folder.Version == nil {
			break
		}

		return e.complexity.Folder.Version(childComplexity), true

	case "FolderList.list":
		if e.complexity.FolderList.List == nil {
			break
		}

		return e.complexity.FolderList.List(childComplexity), true

	case "FolderList.total":
		if e.complexity.FolderList.Total == nil {
			break
		}

		return e.complexity.FolderList.Total(childComplexity), true

	case "GetInviteCodeResp.expire":
		if e.complexity.GetInviteCodeResp.Expire == nil {
			break
		}

		return e.complexity.GetInviteCodeResp.Expire(childComplexity), true

	case "GetInviteCodeResp.inviteCode":
		if e.complexity.GetInviteCodeResp.InviteCode == nil {
			break
		}

		return e.complexity.GetInviteCodeResp.InviteCode(childComplexity), true

	case "GetInviteInfoResp.inviterId":
		if e.complexity.GetInviteInfoResp.InviterID == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.InviterID(childComplexity), true

	case "GetInviteInfoResp.inviterName":
		if e.complexity.GetInviteInfoResp.InviterName == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.InviterName(childComplexity), true

	case "GetInviteInfoResp.orgId":
		if e.complexity.GetInviteInfoResp.OrgID == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.OrgID(childComplexity), true

	case "GetInviteInfoResp.orgName":
		if e.complexity.GetInviteInfoResp.OrgName == nil {
			break
		}

		return e.complexity.GetInviteInfoResp.OrgName(childComplexity), true

	case "GetMQTTChannelKeyResp.address":
		if e.complexity.GetMQTTChannelKeyResp.Address == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Address(childComplexity), true

	case "GetMQTTChannelKeyResp.channel":
		if e.complexity.GetMQTTChannelKeyResp.Channel == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Channel(childComplexity), true

	case "GetMQTTChannelKeyResp.host":
		if e.complexity.GetMQTTChannelKeyResp.Host == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Host(childComplexity), true

	case "GetMQTTChannelKeyResp.key":
		if e.complexity.GetMQTTChannelKeyResp.Key == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Key(childComplexity), true

	case "GetMQTTChannelKeyResp.port":
		if e.complexity.GetMQTTChannelKeyResp.Port == nil {
			break
		}

		return e.complexity.GetMQTTChannelKeyResp.Port(childComplexity), true

	case "GetPersonalPermissionInfoResp.Data":
		if e.complexity.GetPersonalPermissionInfoResp.Data == nil {
			break
		}

		return e.complexity.GetPersonalPermissionInfoResp.Data(childComplexity), true

	case "HomeIssueInfo.childsFinishedNum":
		if e.complexity.HomeIssueInfo.ChildsFinishedNum == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ChildsFinishedNum(childComplexity), true

	case "HomeIssueInfo.childsNum":
		if e.complexity.HomeIssueInfo.ChildsNum == nil {
			break
		}

		return e.complexity.HomeIssueInfo.ChildsNum(childComplexity), true

	case "HomeIssueInfo.issue":
		if e.complexity.HomeIssueInfo.Issue == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Issue(childComplexity), true

	case "HomeIssueInfo.owner":
		if e.complexity.HomeIssueInfo.Owner == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Owner(childComplexity), true

	case "HomeIssueInfo.priority":
		if e.complexity.HomeIssueInfo.Priority == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Priority(childComplexity), true

	case "HomeIssueInfo.project":
		if e.complexity.HomeIssueInfo.Project == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Project(childComplexity), true

	case "HomeIssueInfo.status":
		if e.complexity.HomeIssueInfo.Status == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Status(childComplexity), true

	case "HomeIssueInfo.tags":
		if e.complexity.HomeIssueInfo.Tags == nil {
			break
		}

		return e.complexity.HomeIssueInfo.Tags(childComplexity), true

	case "HomeIssueInfoResp.actualTotal":
		if e.complexity.HomeIssueInfoResp.ActualTotal == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.ActualTotal(childComplexity), true

	case "HomeIssueInfoResp.list":
		if e.complexity.HomeIssueInfoResp.List == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.List(childComplexity), true

	case "HomeIssueInfoResp.total":
		if e.complexity.HomeIssueInfoResp.Total == nil {
			break
		}

		return e.complexity.HomeIssueInfoResp.Total(childComplexity), true

	case "HomeIssueOwnerInfo.avatar":
		if e.complexity.HomeIssueOwnerInfo.Avatar == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.Avatar(childComplexity), true

	case "HomeIssueOwnerInfo.id":
		if e.complexity.HomeIssueOwnerInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.ID(childComplexity), true

	case "HomeIssueOwnerInfo.isDeleted":
		if e.complexity.HomeIssueOwnerInfo.IsDeleted == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.IsDeleted(childComplexity), true

	case "HomeIssueOwnerInfo.isDisabled":
		if e.complexity.HomeIssueOwnerInfo.IsDisabled == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.IsDisabled(childComplexity), true

	case "HomeIssueOwnerInfo.name":
		if e.complexity.HomeIssueOwnerInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueOwnerInfo.Name(childComplexity), true

	case "HomeIssuePriorityInfo.bgStyle":
		if e.complexity.HomeIssuePriorityInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.BgStyle(childComplexity), true

	case "HomeIssuePriorityInfo.fontStyle":
		if e.complexity.HomeIssuePriorityInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.FontStyle(childComplexity), true

	case "HomeIssuePriorityInfo.id":
		if e.complexity.HomeIssuePriorityInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.ID(childComplexity), true

	case "HomeIssuePriorityInfo.name":
		if e.complexity.HomeIssuePriorityInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssuePriorityInfo.Name(childComplexity), true

	case "HomeIssueProjectInfo.id":
		if e.complexity.HomeIssueProjectInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.ID(childComplexity), true

	case "HomeIssueProjectInfo.isFilling":
		if e.complexity.HomeIssueProjectInfo.IsFilling == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.IsFilling(childComplexity), true

	case "HomeIssueProjectInfo.name":
		if e.complexity.HomeIssueProjectInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueProjectInfo.Name(childComplexity), true

	case "HomeIssueStatusInfo.bgStyle":
		if e.complexity.HomeIssueStatusInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.BgStyle(childComplexity), true

	case "HomeIssueStatusInfo.displayName":
		if e.complexity.HomeIssueStatusInfo.DisplayName == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.DisplayName(childComplexity), true

	case "HomeIssueStatusInfo.fontStyle":
		if e.complexity.HomeIssueStatusInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.FontStyle(childComplexity), true

	case "HomeIssueStatusInfo.id":
		if e.complexity.HomeIssueStatusInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.ID(childComplexity), true

	case "HomeIssueStatusInfo.name":
		if e.complexity.HomeIssueStatusInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.Name(childComplexity), true

	case "HomeIssueStatusInfo.type":
		if e.complexity.HomeIssueStatusInfo.Type == nil {
			break
		}

		return e.complexity.HomeIssueStatusInfo.Type(childComplexity), true

	case "HomeIssueTagInfo.bgStyle":
		if e.complexity.HomeIssueTagInfo.BgStyle == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.BgStyle(childComplexity), true

	case "HomeIssueTagInfo.fontStyle":
		if e.complexity.HomeIssueTagInfo.FontStyle == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.FontStyle(childComplexity), true

	case "HomeIssueTagInfo.id":
		if e.complexity.HomeIssueTagInfo.ID == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.ID(childComplexity), true

	case "HomeIssueTagInfo.name":
		if e.complexity.HomeIssueTagInfo.Name == nil {
			break
		}

		return e.complexity.HomeIssueTagInfo.Name(childComplexity), true

	case "IndustryListResp.list":
		if e.complexity.IndustryListResp.List == nil {
			break
		}

		return e.complexity.IndustryListResp.List(childComplexity), true

	case "IndustryResp.cname":
		if e.complexity.IndustryResp.Cname == nil {
			break
		}

		return e.complexity.IndustryResp.Cname(childComplexity), true

	case "IndustryResp.id":
		if e.complexity.IndustryResp.ID == nil {
			break
		}

		return e.complexity.IndustryResp.ID(childComplexity), true

	case "IndustryResp.name":
		if e.complexity.IndustryResp.Name == nil {
			break
		}

		return e.complexity.IndustryResp.Name(childComplexity), true

	case "InternalAuthResp.hasPermission":
		if e.complexity.InternalAuthResp.HasPermission == nil {
			break
		}

		return e.complexity.InternalAuthResp.HasPermission(childComplexity), true

	case "Issue.code":
		if e.complexity.Issue.Code == nil {
			break
		}

		return e.complexity.Issue.Code(childComplexity), true

	case "Issue.createTime":
		if e.complexity.Issue.CreateTime == nil {
			break
		}

		return e.complexity.Issue.CreateTime(childComplexity), true

	case "Issue.creator":
		if e.complexity.Issue.Creator == nil {
			break
		}

		return e.complexity.Issue.Creator(childComplexity), true

	case "Issue.endTime":
		if e.complexity.Issue.EndTime == nil {
			break
		}

		return e.complexity.Issue.EndTime(childComplexity), true

	case "Issue.id":
		if e.complexity.Issue.ID == nil {
			break
		}

		return e.complexity.Issue.ID(childComplexity), true

	case "Issue.issueObjectTypeId":
		if e.complexity.Issue.IssueObjectTypeID == nil {
			break
		}

		return e.complexity.Issue.IssueObjectTypeID(childComplexity), true

	case "Issue.iterationId":
		if e.complexity.Issue.IterationID == nil {
			break
		}

		return e.complexity.Issue.IterationID(childComplexity), true

	case "Issue.moduleId":
		if e.complexity.Issue.ModuleID == nil {
			break
		}

		return e.complexity.Issue.ModuleID(childComplexity), true

	case "Issue.orgId":
		if e.complexity.Issue.OrgID == nil {
			break
		}

		return e.complexity.Issue.OrgID(childComplexity), true

	case "Issue.owner":
		if e.complexity.Issue.Owner == nil {
			break
		}

		return e.complexity.Issue.Owner(childComplexity), true

	case "Issue.parentId":
		if e.complexity.Issue.ParentID == nil {
			break
		}

		return e.complexity.Issue.ParentID(childComplexity), true

	case "Issue.parentTitle":
		if e.complexity.Issue.ParentTitle == nil {
			break
		}

		return e.complexity.Issue.ParentTitle(childComplexity), true

	case "Issue.planEndTime":
		if e.complexity.Issue.PlanEndTime == nil {
			break
		}

		return e.complexity.Issue.PlanEndTime(childComplexity), true

	case "Issue.planStartTime":
		if e.complexity.Issue.PlanStartTime == nil {
			break
		}

		return e.complexity.Issue.PlanStartTime(childComplexity), true

	case "Issue.planWorkHour":
		if e.complexity.Issue.PlanWorkHour == nil {
			break
		}

		return e.complexity.Issue.PlanWorkHour(childComplexity), true

	case "Issue.priorityId":
		if e.complexity.Issue.PriorityID == nil {
			break
		}

		return e.complexity.Issue.PriorityID(childComplexity), true

	case "Issue.projectId":
		if e.complexity.Issue.ProjectID == nil {
			break
		}

		return e.complexity.Issue.ProjectID(childComplexity), true

	case "Issue.projectObjectTypeId":
		if e.complexity.Issue.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.Issue.ProjectObjectTypeID(childComplexity), true

	case "Issue.remark":
		if e.complexity.Issue.Remark == nil {
			break
		}

		return e.complexity.Issue.Remark(childComplexity), true

	case "Issue.sort":
		if e.complexity.Issue.Sort == nil {
			break
		}

		return e.complexity.Issue.Sort(childComplexity), true

	case "Issue.sourceId":
		if e.complexity.Issue.SourceID == nil {
			break
		}

		return e.complexity.Issue.SourceID(childComplexity), true

	case "Issue.startTime":
		if e.complexity.Issue.StartTime == nil {
			break
		}

		return e.complexity.Issue.StartTime(childComplexity), true

	case "Issue.status":
		if e.complexity.Issue.Status == nil {
			break
		}

		return e.complexity.Issue.Status(childComplexity), true

	case "Issue.title":
		if e.complexity.Issue.Title == nil {
			break
		}

		return e.complexity.Issue.Title(childComplexity), true

	case "Issue.updateTime":
		if e.complexity.Issue.UpdateTime == nil {
			break
		}

		return e.complexity.Issue.UpdateTime(childComplexity), true

	case "Issue.updator":
		if e.complexity.Issue.Updator == nil {
			break
		}

		return e.complexity.Issue.Updator(childComplexity), true

	case "Issue.versionId":
		if e.complexity.Issue.VersionID == nil {
			break
		}

		return e.complexity.Issue.VersionID(childComplexity), true

	case "IssueAndProjectCountStatResp.filingParticipantsProjectCount":
		if e.complexity.IssueAndProjectCountStatResp.FilingParticipantsProjectCount == nil {
			break
		}

		return e.complexity.IssueAndProjectCountStatResp.FilingParticipantsProjectCount(childComplexity), true

	case "IssueAndProjectCountStatResp.issueNotCompletedCount":
		if e.complexity.IssueAndProjectCountStatResp.IssueNotCompletedCount == nil {
			break
		}

		return e.complexity.IssueAndProjectCountStatResp.IssueNotCompletedCount(childComplexity), true

	case "IssueAndProjectCountStatResp.participantsProjectCount":
		if e.complexity.IssueAndProjectCountStatResp.ParticipantsProjectCount == nil {
			break
		}

		return e.complexity.IssueAndProjectCountStatResp.ParticipantsProjectCount(childComplexity), true

	case "IssueAndProjectCountStatResp.projectNotCompletedCount":
		if e.complexity.IssueAndProjectCountStatResp.ProjectNotCompletedCount == nil {
			break
		}

		return e.complexity.IssueAndProjectCountStatResp.ProjectNotCompletedCount(childComplexity), true

	case "IssueAssignRankInfo.avatar":
		if e.complexity.IssueAssignRankInfo.Avatar == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.Avatar(childComplexity), true

	case "IssueAssignRankInfo.emplId":
		if e.complexity.IssueAssignRankInfo.EmplID == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.EmplID(childComplexity), true

	case "IssueAssignRankInfo.incompleteissueCount":
		if e.complexity.IssueAssignRankInfo.IncompleteissueCount == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.IncompleteissueCount(childComplexity), true

	case "IssueAssignRankInfo.name":
		if e.complexity.IssueAssignRankInfo.Name == nil {
			break
		}

		return e.complexity.IssueAssignRankInfo.Name(childComplexity), true

	case "IssueDailyPersonalWorkCompletionStatData.completedCount":
		if e.complexity.IssueDailyPersonalWorkCompletionStatData.CompletedCount == nil {
			break
		}

		return e.complexity.IssueDailyPersonalWorkCompletionStatData.CompletedCount(childComplexity), true

	case "IssueDailyPersonalWorkCompletionStatData.statDate":
		if e.complexity.IssueDailyPersonalWorkCompletionStatData.StatDate == nil {
			break
		}

		return e.complexity.IssueDailyPersonalWorkCompletionStatData.StatDate(childComplexity), true

	case "IssueDailyPersonalWorkCompletionStatResp.list":
		if e.complexity.IssueDailyPersonalWorkCompletionStatResp.List == nil {
			break
		}

		return e.complexity.IssueDailyPersonalWorkCompletionStatResp.List(childComplexity), true

	case "IssueInfo.childsFinishedNum":
		if e.complexity.IssueInfo.ChildsFinishedNum == nil {
			break
		}

		return e.complexity.IssueInfo.ChildsFinishedNum(childComplexity), true

	case "IssueInfo.childsNum":
		if e.complexity.IssueInfo.ChildsNum == nil {
			break
		}

		return e.complexity.IssueInfo.ChildsNum(childComplexity), true

	case "IssueInfo.creatorInfo":
		if e.complexity.IssueInfo.CreatorInfo == nil {
			break
		}

		return e.complexity.IssueInfo.CreatorInfo(childComplexity), true

	case "IssueInfo.followerInfos":
		if e.complexity.IssueInfo.FollowerInfos == nil {
			break
		}

		return e.complexity.IssueInfo.FollowerInfos(childComplexity), true

	case "IssueInfo.issue":
		if e.complexity.IssueInfo.Issue == nil {
			break
		}

		return e.complexity.IssueInfo.Issue(childComplexity), true

	case "IssueInfo.nextStatus":
		if e.complexity.IssueInfo.NextStatus == nil {
			break
		}

		return e.complexity.IssueInfo.NextStatus(childComplexity), true

	case "IssueInfo.owner":
		if e.complexity.IssueInfo.Owner == nil {
			break
		}

		return e.complexity.IssueInfo.Owner(childComplexity), true

	case "IssueInfo.participantInfos":
		if e.complexity.IssueInfo.ParticipantInfos == nil {
			break
		}

		return e.complexity.IssueInfo.ParticipantInfos(childComplexity), true

	case "IssueInfo.priority":
		if e.complexity.IssueInfo.Priority == nil {
			break
		}

		return e.complexity.IssueInfo.Priority(childComplexity), true

	case "IssueInfo.project":
		if e.complexity.IssueInfo.Project == nil {
			break
		}

		return e.complexity.IssueInfo.Project(childComplexity), true

	case "IssueInfo.projectObjectTypeName":
		if e.complexity.IssueInfo.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueInfo.ProjectObjectTypeName(childComplexity), true

	case "IssueInfo.sourceInfo":
		if e.complexity.IssueInfo.SourceInfo == nil {
			break
		}

		return e.complexity.IssueInfo.SourceInfo(childComplexity), true

	case "IssueInfo.status":
		if e.complexity.IssueInfo.Status == nil {
			break
		}

		return e.complexity.IssueInfo.Status(childComplexity), true

	case "IssueInfo.tags":
		if e.complexity.IssueInfo.Tags == nil {
			break
		}

		return e.complexity.IssueInfo.Tags(childComplexity), true

	case "IssueInfo.typeInfo":
		if e.complexity.IssueInfo.TypeInfo == nil {
			break
		}

		return e.complexity.IssueInfo.TypeInfo(childComplexity), true

	case "IssueList.list":
		if e.complexity.IssueList.List == nil {
			break
		}

		return e.complexity.IssueList.List(childComplexity), true

	case "IssueList.total":
		if e.complexity.IssueList.Total == nil {
			break
		}

		return e.complexity.IssueList.Total(childComplexity), true

	case "IssueObjectType.createTime":
		if e.complexity.IssueObjectType.CreateTime == nil {
			break
		}

		return e.complexity.IssueObjectType.CreateTime(childComplexity), true

	case "IssueObjectType.creator":
		if e.complexity.IssueObjectType.Creator == nil {
			break
		}

		return e.complexity.IssueObjectType.Creator(childComplexity), true

	case "IssueObjectType.id":
		if e.complexity.IssueObjectType.ID == nil {
			break
		}

		return e.complexity.IssueObjectType.ID(childComplexity), true

	case "IssueObjectType.langCode":
		if e.complexity.IssueObjectType.LangCode == nil {
			break
		}

		return e.complexity.IssueObjectType.LangCode(childComplexity), true

	case "IssueObjectType.name":
		if e.complexity.IssueObjectType.Name == nil {
			break
		}

		return e.complexity.IssueObjectType.Name(childComplexity), true

	case "IssueObjectType.orgId":
		if e.complexity.IssueObjectType.OrgID == nil {
			break
		}

		return e.complexity.IssueObjectType.OrgID(childComplexity), true

	case "IssueObjectType.projectObjectTypeId":
		if e.complexity.IssueObjectType.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueObjectType.ProjectObjectTypeID(childComplexity), true

	case "IssueObjectType.remark":
		if e.complexity.IssueObjectType.Remark == nil {
			break
		}

		return e.complexity.IssueObjectType.Remark(childComplexity), true

	case "IssueObjectType.sort":
		if e.complexity.IssueObjectType.Sort == nil {
			break
		}

		return e.complexity.IssueObjectType.Sort(childComplexity), true

	case "IssueObjectType.status":
		if e.complexity.IssueObjectType.Status == nil {
			break
		}

		return e.complexity.IssueObjectType.Status(childComplexity), true

	case "IssueObjectType.updateTime":
		if e.complexity.IssueObjectType.UpdateTime == nil {
			break
		}

		return e.complexity.IssueObjectType.UpdateTime(childComplexity), true

	case "IssueObjectType.updator":
		if e.complexity.IssueObjectType.Updator == nil {
			break
		}

		return e.complexity.IssueObjectType.Updator(childComplexity), true

	case "IssueObjectTypeInfo.id":
		if e.complexity.IssueObjectTypeInfo.ID == nil {
			break
		}

		return e.complexity.IssueObjectTypeInfo.ID(childComplexity), true

	case "IssueObjectTypeInfo.name":
		if e.complexity.IssueObjectTypeInfo.Name == nil {
			break
		}

		return e.complexity.IssueObjectTypeInfo.Name(childComplexity), true

	case "IssueObjectTypeList.list":
		if e.complexity.IssueObjectTypeList.List == nil {
			break
		}

		return e.complexity.IssueObjectTypeList.List(childComplexity), true

	case "IssueObjectTypeList.total":
		if e.complexity.IssueObjectTypeList.Total == nil {
			break
		}

		return e.complexity.IssueObjectTypeList.Total(childComplexity), true

	case "IssueReportResp.endTime":
		if e.complexity.IssueReportResp.EndTime == nil {
			break
		}

		return e.complexity.IssueReportResp.EndTime(childComplexity), true

	case "IssueReportResp.list":
		if e.complexity.IssueReportResp.List == nil {
			break
		}

		return e.complexity.IssueReportResp.List(childComplexity), true

	case "IssueReportResp.reportUserName":
		if e.complexity.IssueReportResp.ReportUserName == nil {
			break
		}

		return e.complexity.IssueReportResp.ReportUserName(childComplexity), true

	case "IssueReportResp.shareId":
		if e.complexity.IssueReportResp.ShareID == nil {
			break
		}

		return e.complexity.IssueReportResp.ShareID(childComplexity), true

	case "IssueReportResp.startTime":
		if e.complexity.IssueReportResp.StartTime == nil {
			break
		}

		return e.complexity.IssueReportResp.StartTime(childComplexity), true

	case "IssueReportResp.total":
		if e.complexity.IssueReportResp.Total == nil {
			break
		}

		return e.complexity.IssueReportResp.Total(childComplexity), true

	case "IssueRestInfo.endTime":
		if e.complexity.IssueRestInfo.EndTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.EndTime(childComplexity), true

	case "IssueRestInfo.finished":
		if e.complexity.IssueRestInfo.Finished == nil {
			break
		}

		return e.complexity.IssueRestInfo.Finished(childComplexity), true

	case "IssueRestInfo.id":
		if e.complexity.IssueRestInfo.ID == nil {
			break
		}

		return e.complexity.IssueRestInfo.ID(childComplexity), true

	case "IssueRestInfo.ownerAvatar":
		if e.complexity.IssueRestInfo.OwnerAvatar == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerAvatar(childComplexity), true

	case "IssueRestInfo.ownerId":
		if e.complexity.IssueRestInfo.OwnerID == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerID(childComplexity), true

	case "IssueRestInfo.ownerIsDeleted":
		if e.complexity.IssueRestInfo.OwnerIsDeleted == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerIsDeleted(childComplexity), true

	case "IssueRestInfo.ownerIsDisabled":
		if e.complexity.IssueRestInfo.OwnerIsDisabled == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerIsDisabled(childComplexity), true

	case "IssueRestInfo.ownerName":
		if e.complexity.IssueRestInfo.OwnerName == nil {
			break
		}

		return e.complexity.IssueRestInfo.OwnerName(childComplexity), true

	case "IssueRestInfo.planEndTime":
		if e.complexity.IssueRestInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.PlanEndTime(childComplexity), true

	case "IssueRestInfo.planStartTime":
		if e.complexity.IssueRestInfo.PlanStartTime == nil {
			break
		}

		return e.complexity.IssueRestInfo.PlanStartTime(childComplexity), true

	case "IssueRestInfo.priorityInfo":
		if e.complexity.IssueRestInfo.PriorityInfo == nil {
			break
		}

		return e.complexity.IssueRestInfo.PriorityInfo(childComplexity), true

	case "IssueRestInfo.statusId":
		if e.complexity.IssueRestInfo.StatusID == nil {
			break
		}

		return e.complexity.IssueRestInfo.StatusID(childComplexity), true

	case "IssueRestInfo.statusName":
		if e.complexity.IssueRestInfo.StatusName == nil {
			break
		}

		return e.complexity.IssueRestInfo.StatusName(childComplexity), true

	case "IssueRestInfo.title":
		if e.complexity.IssueRestInfo.Title == nil {
			break
		}

		return e.complexity.IssueRestInfo.Title(childComplexity), true

	case "IssueRestInfoResp.list":
		if e.complexity.IssueRestInfoResp.List == nil {
			break
		}

		return e.complexity.IssueRestInfoResp.List(childComplexity), true

	case "IssueRestInfoResp.total":
		if e.complexity.IssueRestInfoResp.Total == nil {
			break
		}

		return e.complexity.IssueRestInfoResp.Total(childComplexity), true

	case "IssueSource.createTime":
		if e.complexity.IssueSource.CreateTime == nil {
			break
		}

		return e.complexity.IssueSource.CreateTime(childComplexity), true

	case "IssueSource.creator":
		if e.complexity.IssueSource.Creator == nil {
			break
		}

		return e.complexity.IssueSource.Creator(childComplexity), true

	case "IssueSource.id":
		if e.complexity.IssueSource.ID == nil {
			break
		}

		return e.complexity.IssueSource.ID(childComplexity), true

	case "IssueSource.langCode":
		if e.complexity.IssueSource.LangCode == nil {
			break
		}

		return e.complexity.IssueSource.LangCode(childComplexity), true

	case "IssueSource.name":
		if e.complexity.IssueSource.Name == nil {
			break
		}

		return e.complexity.IssueSource.Name(childComplexity), true

	case "IssueSource.orgId":
		if e.complexity.IssueSource.OrgID == nil {
			break
		}

		return e.complexity.IssueSource.OrgID(childComplexity), true

	case "IssueSource.projectObjectTypeId":
		if e.complexity.IssueSource.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueSource.ProjectObjectTypeID(childComplexity), true

	case "IssueSource.remark":
		if e.complexity.IssueSource.Remark == nil {
			break
		}

		return e.complexity.IssueSource.Remark(childComplexity), true

	case "IssueSource.sort":
		if e.complexity.IssueSource.Sort == nil {
			break
		}

		return e.complexity.IssueSource.Sort(childComplexity), true

	case "IssueSource.status":
		if e.complexity.IssueSource.Status == nil {
			break
		}

		return e.complexity.IssueSource.Status(childComplexity), true

	case "IssueSource.updateTime":
		if e.complexity.IssueSource.UpdateTime == nil {
			break
		}

		return e.complexity.IssueSource.UpdateTime(childComplexity), true

	case "IssueSource.updator":
		if e.complexity.IssueSource.Updator == nil {
			break
		}

		return e.complexity.IssueSource.Updator(childComplexity), true

	case "IssueSourceInfo.id":
		if e.complexity.IssueSourceInfo.ID == nil {
			break
		}

		return e.complexity.IssueSourceInfo.ID(childComplexity), true

	case "IssueSourceInfo.name":
		if e.complexity.IssueSourceInfo.Name == nil {
			break
		}

		return e.complexity.IssueSourceInfo.Name(childComplexity), true

	case "IssueSourceList.list":
		if e.complexity.IssueSourceList.List == nil {
			break
		}

		return e.complexity.IssueSourceList.List(childComplexity), true

	case "IssueSourceList.total":
		if e.complexity.IssueSourceList.Total == nil {
			break
		}

		return e.complexity.IssueSourceList.Total(childComplexity), true

	case "IssueStatByObjectType.projectObjectTypeId":
		if e.complexity.IssueStatByObjectType.ProjectObjectTypeID == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.ProjectObjectTypeID(childComplexity), true

	case "IssueStatByObjectType.projectObjectTypeName":
		if e.complexity.IssueStatByObjectType.ProjectObjectTypeName == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.ProjectObjectTypeName(childComplexity), true

	case "IssueStatByObjectType.total":
		if e.complexity.IssueStatByObjectType.Total == nil {
			break
		}

		return e.complexity.IssueStatByObjectType.Total(childComplexity), true

	case "IssueStatusTypeStatDetailResp.completed":
		if e.complexity.IssueStatusTypeStatDetailResp.Completed == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.Completed(childComplexity), true

	case "IssueStatusTypeStatDetailResp.notStart":
		if e.complexity.IssueStatusTypeStatDetailResp.NotStart == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.NotStart(childComplexity), true

	case "IssueStatusTypeStatDetailResp.processing":
		if e.complexity.IssueStatusTypeStatDetailResp.Processing == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatDetailResp.Processing(childComplexity), true

	case "IssueStatusTypeStatResp.beAboutToOverdueSum":
		if e.complexity.IssueStatusTypeStatResp.BeAboutToOverdueSum == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.BeAboutToOverdueSum(childComplexity), true

	case "IssueStatusTypeStatResp.completedTodayTotal":
		if e.complexity.IssueStatusTypeStatResp.CompletedTodayTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.CompletedTodayTotal(childComplexity), true

	case "IssueStatusTypeStatResp.completedTotal":
		if e.complexity.IssueStatusTypeStatResp.CompletedTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.CompletedTotal(childComplexity), true

	case "IssueStatusTypeStatResp.list":
		if e.complexity.IssueStatusTypeStatResp.List == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.List(childComplexity), true

	case "IssueStatusTypeStatResp.notStartTotal":
		if e.complexity.IssueStatusTypeStatResp.NotStartTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.NotStartTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueCompletedTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueCompletedTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueCompletedTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTodayTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTodayTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTodayTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTomorrowTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTomorrowTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTomorrowTotal(childComplexity), true

	case "IssueStatusTypeStatResp.overdueTotal":
		if e.complexity.IssueStatusTypeStatResp.OverdueTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.OverdueTotal(childComplexity), true

	case "IssueStatusTypeStatResp.processingTotal":
		if e.complexity.IssueStatusTypeStatResp.ProcessingTotal == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.ProcessingTotal(childComplexity), true

	case "IssueStatusTypeStatResp.todayCount":
		if e.complexity.IssueStatusTypeStatResp.TodayCount == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.TodayCount(childComplexity), true

	case "IssueStatusTypeStatResp.todayCreateCount":
		if e.complexity.IssueStatusTypeStatResp.TodayCreateCount == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.TodayCreateCount(childComplexity), true

	case "IssueStatusTypeStatResp.total":
		if e.complexity.IssueStatusTypeStatResp.Total == nil {
			break
		}

		return e.complexity.IssueStatusTypeStatResp.Total(childComplexity), true

	case "Iteration.createTime":
		if e.complexity.Iteration.CreateTime == nil {
			break
		}

		return e.complexity.Iteration.CreateTime(childComplexity), true

	case "Iteration.creator":
		if e.complexity.Iteration.Creator == nil {
			break
		}

		return e.complexity.Iteration.Creator(childComplexity), true

	case "Iteration.id":
		if e.complexity.Iteration.ID == nil {
			break
		}

		return e.complexity.Iteration.ID(childComplexity), true

	case "Iteration.name":
		if e.complexity.Iteration.Name == nil {
			break
		}

		return e.complexity.Iteration.Name(childComplexity), true

	case "Iteration.orgId":
		if e.complexity.Iteration.OrgID == nil {
			break
		}

		return e.complexity.Iteration.OrgID(childComplexity), true

	case "Iteration.owner":
		if e.complexity.Iteration.Owner == nil {
			break
		}

		return e.complexity.Iteration.Owner(childComplexity), true

	case "Iteration.ownerInfo":
		if e.complexity.Iteration.OwnerInfo == nil {
			break
		}

		return e.complexity.Iteration.OwnerInfo(childComplexity), true

	case "Iteration.planEndTime":
		if e.complexity.Iteration.PlanEndTime == nil {
			break
		}

		return e.complexity.Iteration.PlanEndTime(childComplexity), true

	case "Iteration.planStartTime":
		if e.complexity.Iteration.PlanStartTime == nil {
			break
		}

		return e.complexity.Iteration.PlanStartTime(childComplexity), true

	case "Iteration.planWorkHour":
		if e.complexity.Iteration.PlanWorkHour == nil {
			break
		}

		return e.complexity.Iteration.PlanWorkHour(childComplexity), true

	case "Iteration.projectId":
		if e.complexity.Iteration.ProjectID == nil {
			break
		}

		return e.complexity.Iteration.ProjectID(childComplexity), true

	case "Iteration.remark":
		if e.complexity.Iteration.Remark == nil {
			break
		}

		return e.complexity.Iteration.Remark(childComplexity), true

	case "Iteration.status":
		if e.complexity.Iteration.Status == nil {
			break
		}

		return e.complexity.Iteration.Status(childComplexity), true

	case "Iteration.statusInfo":
		if e.complexity.Iteration.StatusInfo == nil {
			break
		}

		return e.complexity.Iteration.StatusInfo(childComplexity), true

	case "Iteration.storyPoint":
		if e.complexity.Iteration.StoryPoint == nil {
			break
		}

		return e.complexity.Iteration.StoryPoint(childComplexity), true

	case "Iteration.updateTime":
		if e.complexity.Iteration.UpdateTime == nil {
			break
		}

		return e.complexity.Iteration.UpdateTime(childComplexity), true

	case "Iteration.updator":
		if e.complexity.Iteration.Updator == nil {
			break
		}

		return e.complexity.Iteration.Updator(childComplexity), true

	case "Iteration.versionId":
		if e.complexity.Iteration.VersionID == nil {
			break
		}

		return e.complexity.Iteration.VersionID(childComplexity), true

	case "IterationInfoResp.iteration":
		if e.complexity.IterationInfoResp.Iteration == nil {
			break
		}

		return e.complexity.IterationInfoResp.Iteration(childComplexity), true

	case "IterationInfoResp.nextStatus":
		if e.complexity.IterationInfoResp.NextStatus == nil {
			break
		}

		return e.complexity.IterationInfoResp.NextStatus(childComplexity), true

	case "IterationInfoResp.owner":
		if e.complexity.IterationInfoResp.Owner == nil {
			break
		}

		return e.complexity.IterationInfoResp.Owner(childComplexity), true

	case "IterationInfoResp.project":
		if e.complexity.IterationInfoResp.Project == nil {
			break
		}

		return e.complexity.IterationInfoResp.Project(childComplexity), true

	case "IterationInfoResp.status":
		if e.complexity.IterationInfoResp.Status == nil {
			break
		}

		return e.complexity.IterationInfoResp.Status(childComplexity), true

	case "IterationList.list":
		if e.complexity.IterationList.List == nil {
			break
		}

		return e.complexity.IterationList.List(childComplexity), true

	case "IterationList.total":
		if e.complexity.IterationList.Total == nil {
			break
		}

		return e.complexity.IterationList.Total(childComplexity), true

	case "IterationStat.bugCount":
		if e.complexity.IterationStat.BugCount == nil {
			break
		}

		return e.complexity.IterationStat.BugCount(childComplexity), true

	case "IterationStat.bugEndCount":
		if e.complexity.IterationStat.BugEndCount == nil {
			break
		}

		return e.complexity.IterationStat.BugEndCount(childComplexity), true

	case "IterationStat.bugRunningCount":
		if e.complexity.IterationStat.BugRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.BugRunningCount(childComplexity), true

	case "IterationStat.bugWaitCount":
		if e.complexity.IterationStat.BugWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.BugWaitCount(childComplexity), true

	case "IterationStat.createTime":
		if e.complexity.IterationStat.CreateTime == nil {
			break
		}

		return e.complexity.IterationStat.CreateTime(childComplexity), true

	case "IterationStat.creator":
		if e.complexity.IterationStat.Creator == nil {
			break
		}

		return e.complexity.IterationStat.Creator(childComplexity), true

	case "IterationStat.demandCount":
		if e.complexity.IterationStat.DemandCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandCount(childComplexity), true

	case "IterationStat.demandEndCount":
		if e.complexity.IterationStat.DemandEndCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandEndCount(childComplexity), true

	case "IterationStat.demandRunningCount":
		if e.complexity.IterationStat.DemandRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandRunningCount(childComplexity), true

	case "IterationStat.demandWaitCount":
		if e.complexity.IterationStat.DemandWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.DemandWaitCount(childComplexity), true

	case "IterationStat.ext":
		if e.complexity.IterationStat.Ext == nil {
			break
		}

		return e.complexity.IterationStat.Ext(childComplexity), true

	case "IterationStat.id":
		if e.complexity.IterationStat.ID == nil {
			break
		}

		return e.complexity.IterationStat.ID(childComplexity), true

	case "IterationStat.issueCount":
		if e.complexity.IterationStat.IssueCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueCount(childComplexity), true

	case "IterationStat.issueEndCount":
		if e.complexity.IterationStat.IssueEndCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueEndCount(childComplexity), true

	case "IterationStat.issueRunningCount":
		if e.complexity.IterationStat.IssueRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueRunningCount(childComplexity), true

	case "IterationStat.issueWaitCount":
		if e.complexity.IterationStat.IssueWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.IssueWaitCount(childComplexity), true

	case "IterationStat.iterationId":
		if e.complexity.IterationStat.IterationID == nil {
			break
		}

		return e.complexity.IterationStat.IterationID(childComplexity), true

	case "IterationStat.orgId":
		if e.complexity.IterationStat.OrgID == nil {
			break
		}

		return e.complexity.IterationStat.OrgID(childComplexity), true

	case "IterationStat.projectId":
		if e.complexity.IterationStat.ProjectID == nil {
			break
		}

		return e.complexity.IterationStat.ProjectID(childComplexity), true

	case "IterationStat.statDate":
		if e.complexity.IterationStat.StatDate == nil {
			break
		}

		return e.complexity.IterationStat.StatDate(childComplexity), true

	case "IterationStat.status":
		if e.complexity.IterationStat.Status == nil {
			break
		}

		return e.complexity.IterationStat.Status(childComplexity), true

	case "IterationStat.storyPointCount":
		if e.complexity.IterationStat.StoryPointCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointCount(childComplexity), true

	case "IterationStat.storyPointEndCount":
		if e.complexity.IterationStat.StoryPointEndCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointEndCount(childComplexity), true

	case "IterationStat.storyPointRunningCount":
		if e.complexity.IterationStat.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointRunningCount(childComplexity), true

	case "IterationStat.storyPointWaitCount":
		if e.complexity.IterationStat.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.StoryPointWaitCount(childComplexity), true

	case "IterationStat.taskCount":
		if e.complexity.IterationStat.TaskCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskCount(childComplexity), true

	case "IterationStat.taskEndCount":
		if e.complexity.IterationStat.TaskEndCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskEndCount(childComplexity), true

	case "IterationStat.taskRunningCount":
		if e.complexity.IterationStat.TaskRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskRunningCount(childComplexity), true

	case "IterationStat.taskWaitCount":
		if e.complexity.IterationStat.TaskWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.TaskWaitCount(childComplexity), true

	case "IterationStat.testtaskCount":
		if e.complexity.IterationStat.TesttaskCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskCount(childComplexity), true

	case "IterationStat.testtaskEndCount":
		if e.complexity.IterationStat.TesttaskEndCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskEndCount(childComplexity), true

	case "IterationStat.testtaskRunningCount":
		if e.complexity.IterationStat.TesttaskRunningCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskRunningCount(childComplexity), true

	case "IterationStat.testtaskWaitCount":
		if e.complexity.IterationStat.TesttaskWaitCount == nil {
			break
		}

		return e.complexity.IterationStat.TesttaskWaitCount(childComplexity), true

	case "IterationStatList.list":
		if e.complexity.IterationStatList.List == nil {
			break
		}

		return e.complexity.IterationStatList.List(childComplexity), true

	case "IterationStatList.total":
		if e.complexity.IterationStatList.Total == nil {
			break
		}

		return e.complexity.IterationStatList.Total(childComplexity), true

	case "IterationStatusTypeStatResp.completedTotal":
		if e.complexity.IterationStatusTypeStatResp.CompletedTotal == nil {
			break
		}

		return e.complexity.IterationStatusTypeStatResp.CompletedTotal(childComplexity), true

	case "IterationStatusTypeStatResp.notStartTotal":
		if e.complexity.IterationStatusTypeStatResp.NotStartTotal == nil {
			break
		}

		return e.complexity.IterationStatusTypeStatResp.NotStartTotal(childComplexity), true

	case "IterationStatusTypeStatResp.processingTotal":
		if e.complexity.IterationStatusTypeStatResp.ProcessingTotal == nil {
			break
		}

		return e.complexity.IterationStatusTypeStatResp.ProcessingTotal(childComplexity), true

	case "IterationStatusTypeStatResp.total":
		if e.complexity.IterationStatusTypeStatResp.Total == nil {
			break
		}

		return e.complexity.IterationStatusTypeStatResp.Total(childComplexity), true

	case "JsApiSignResp.agentId":
		if e.complexity.JsAPISignResp.AgentID == nil {
			break
		}

		return e.complexity.JsAPISignResp.AgentID(childComplexity), true

	case "JsApiSignResp.noceStr":
		if e.complexity.JsAPISignResp.NoceStr == nil {
			break
		}

		return e.complexity.JsAPISignResp.NoceStr(childComplexity), true

	case "JsApiSignResp.signature":
		if e.complexity.JsAPISignResp.Signature == nil {
			break
		}

		return e.complexity.JsAPISignResp.Signature(childComplexity), true

	case "JsApiSignResp.timeStamp":
		if e.complexity.JsAPISignResp.TimeStamp == nil {
			break
		}

		return e.complexity.JsAPISignResp.TimeStamp(childComplexity), true

	case "MemberInfo.avatar":
		if e.complexity.MemberInfo.Avatar == nil {
			break
		}

		return e.complexity.MemberInfo.Avatar(childComplexity), true

	case "MemberInfo.id":
		if e.complexity.MemberInfo.ID == nil {
			break
		}

		return e.complexity.MemberInfo.ID(childComplexity), true

	case "MemberInfo.name":
		if e.complexity.MemberInfo.Name == nil {
			break
		}

		return e.complexity.MemberInfo.Name(childComplexity), true

	case "Mutation.addProjectMember":
		if e.complexity.Mutation.AddProjectMember == nil {
			break
		}

		args, err := ec.field_Mutation_addProjectMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProjectMember(childComplexity, args["input"].(vo.RemoveProjectMemberReq)), true

	case "Mutation.archiveProject":
		if e.complexity.Mutation.ArchiveProject == nil {
			break
		}

		args, err := ec.field_Mutation_archiveProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.bindLoginName":
		if e.complexity.Mutation.BindLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_bindLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BindLoginName(childComplexity, args["input"].(vo.BindLoginNameReq)), true

	case "Mutation.cancelArchivedProject":
		if e.complexity.Mutation.CancelArchivedProject == nil {
			break
		}

		args, err := ec.field_Mutation_cancelArchivedProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelArchivedProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.checkLoginName":
		if e.complexity.Mutation.CheckLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_checkLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckLoginName(childComplexity, args["input"].(vo.CheckLoginNameReq)), true

	case "Mutation.convertCode":
		if e.complexity.Mutation.ConvertCode == nil {
			break
		}

		args, err := ec.field_Mutation_convertCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConvertCode(childComplexity, args["input"].(vo.ConvertCodeReq)), true

	case "Mutation.createIssue":
		if e.complexity.Mutation.CreateIssue == nil {
			break
		}

		args, err := ec.field_Mutation_createIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssue(childComplexity, args["input"].(vo.CreateIssueReq)), true

	case "Mutation.createIssueComment":
		if e.complexity.Mutation.CreateIssueComment == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueComment(childComplexity, args["input"].(vo.CreateIssueCommentReq)), true

	case "Mutation.createIssueObjectType":
		if e.complexity.Mutation.CreateIssueObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueObjectType(childComplexity, args["input"].(vo.CreateIssueObjectTypeReq)), true

	case "Mutation.createIssueResource":
		if e.complexity.Mutation.CreateIssueResource == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueResource(childComplexity, args["input"].(vo.CreateIssueResourceReq)), true

	case "Mutation.createIssueSource":
		if e.complexity.Mutation.CreateIssueSource == nil {
			break
		}

		args, err := ec.field_Mutation_createIssueSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIssueSource(childComplexity, args["input"].(vo.CreateIssueSourceReq)), true

	case "Mutation.createIteration":
		if e.complexity.Mutation.CreateIteration == nil {
			break
		}

		args, err := ec.field_Mutation_createIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIteration(childComplexity, args["input"].(vo.CreateIterationReq)), true

	case "Mutation.createOrg":
		if e.complexity.Mutation.CreateOrg == nil {
			break
		}

		args, err := ec.field_Mutation_createOrg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrg(childComplexity, args["input"].(vo.CreateOrgReq)), true

	case "Mutation.createPriority":
		if e.complexity.Mutation.CreatePriority == nil {
			break
		}

		args, err := ec.field_Mutation_createPriority_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePriority(childComplexity, args["input"].(vo.CreatePriorityReq)), true

	case "Mutation.createProcessStatus":
		if e.complexity.Mutation.CreateProcessStatus == nil {
			break
		}

		args, err := ec.field_Mutation_createProcessStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProcessStatus(childComplexity, args["input"].(vo.CreateProcessStatusReq)), true

	case "Mutation.createProject":
		if e.complexity.Mutation.CreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_createProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProject(childComplexity, args["input"].(vo.CreateProjectReq)), true

	case "Mutation.createProjectDetail":
		if e.complexity.Mutation.CreateProjectDetail == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectDetail(childComplexity, args["input"].(vo.CreateProjectDetailReq)), true

	case "Mutation.createProjectFolder":
		if e.complexity.Mutation.CreateProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectFolder(childComplexity, args["input"].(vo.CreateProjectFolderReq)), true

	case "Mutation.createProjectObjectType":
		if e.complexity.Mutation.CreateProjectObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectObjectType(childComplexity, args["input"].(vo.CreateProjectObjectTypeReq)), true

	case "Mutation.createProjectResource":
		if e.complexity.Mutation.CreateProjectResource == nil {
			break
		}

		args, err := ec.field_Mutation_createProjectResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProjectResource(childComplexity, args["input"].(vo.CreateProjectResourceReq)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(vo.CreateRoleReq)), true

	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["input"].(vo.CreateTagReq)), true

	case "Mutation.delRole":
		if e.complexity.Mutation.DelRole == nil {
			break
		}

		args, err := ec.field_Mutation_delRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelRole(childComplexity, args["input"].(vo.DelRoleReq)), true

	case "Mutation.deleteIssue":
		if e.complexity.Mutation.DeleteIssue == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssue(childComplexity, args["input"].(vo.DeleteIssueReq)), true

	case "Mutation.deleteIssueObjectType":
		if e.complexity.Mutation.DeleteIssueObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssueObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssueObjectType(childComplexity, args["input"].(vo.DeleteIssueObjectTypeReq)), true

	case "Mutation.deleteIssueResource":
		if e.complexity.Mutation.DeleteIssueResource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssueResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssueResource(childComplexity, args["input"].(vo.DeleteIssueResourceReq)), true

	case "Mutation.deleteIssueSource":
		if e.complexity.Mutation.DeleteIssueSource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIssueSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIssueSource(childComplexity, args["input"].(vo.DeleteIssueSourceReq)), true

	case "Mutation.deleteIteration":
		if e.complexity.Mutation.DeleteIteration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIteration(childComplexity, args["input"].(vo.DeleteIterationReq)), true

	case "Mutation.deletePriority":
		if e.complexity.Mutation.DeletePriority == nil {
			break
		}

		args, err := ec.field_Mutation_deletePriority_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePriority(childComplexity, args["input"].(vo.DeletePriorityReq)), true

	case "Mutation.deleteProcessStatus":
		if e.complexity.Mutation.DeleteProcessStatus == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProcessStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProcessStatus(childComplexity, args["input"].(vo.DeleteProcessStatusReq)), true

	case "Mutation.deleteProjectAttachment":
		if e.complexity.Mutation.DeleteProjectAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectAttachment(childComplexity, args["input"].(vo.DeleteProjectAttachmentReq)), true

	case "Mutation.deleteProjectDetail":
		if e.complexity.Mutation.DeleteProjectDetail == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectDetail(childComplexity, args["input"].(vo.DeleteProjectDetailReq)), true

	case "Mutation.deleteProjectFolder":
		if e.complexity.Mutation.DeleteProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectFolder(childComplexity, args["input"].(vo.DeleteProjectFolderReq)), true

	case "Mutation.deleteProjectObjectType":
		if e.complexity.Mutation.DeleteProjectObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectObjectType(childComplexity, args["input"].(vo.DeleteProjectObjectTypeReq)), true

	case "Mutation.deleteProjectResource":
		if e.complexity.Mutation.DeleteProjectResource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProjectResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProjectResource(childComplexity, args["input"].(vo.DeleteProjectResourceReq)), true

	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["input"].(vo.DeleteTagReq)), true

	case "Mutation.importIssues":
		if e.complexity.Mutation.ImportIssues == nil {
			break
		}

		args, err := ec.field_Mutation_importIssues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImportIssues(childComplexity, args["input"].(vo.ImportIssuesReq)), true

	case "Mutation.quitProject":
		if e.complexity.Mutation.QuitProject == nil {
			break
		}

		args, err := ec.field_Mutation_quitProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.QuitProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.registerWebSiteContact":
		if e.complexity.Mutation.RegisterWebSiteContact == nil {
			break
		}

		args, err := ec.field_Mutation_registerWebSiteContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterWebSiteContact(childComplexity, args["input"].(vo.RegisterWebSiteContactReq)), true

	case "Mutation.removeOrgMember":
		if e.complexity.Mutation.RemoveOrgMember == nil {
			break
		}

		args, err := ec.field_Mutation_removeOrgMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveOrgMember(childComplexity, args["input"].(vo.RemoveOrgMemberReq)), true

	case "Mutation.removeProjectMember":
		if e.complexity.Mutation.RemoveProjectMember == nil {
			break
		}

		args, err := ec.field_Mutation_removeProjectMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveProjectMember(childComplexity, args["input"].(vo.RemoveProjectMemberReq)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["input"].(vo.ResetPasswordReq)), true

	case "Mutation.retrievePassword":
		if e.complexity.Mutation.RetrievePassword == nil {
			break
		}

		args, err := ec.field_Mutation_retrievePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RetrievePassword(childComplexity, args["input"].(vo.RetrievePasswordReq)), true

	case "Mutation.sendAuthCode":
		if e.complexity.Mutation.SendAuthCode == nil {
			break
		}

		args, err := ec.field_Mutation_sendAuthCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendAuthCode(childComplexity, args["input"].(vo.SendAuthCodeReq)), true

	case "Mutation.sendSmsLoginCode":
		if e.complexity.Mutation.SendSmsLoginCode == nil {
			break
		}

		args, err := ec.field_Mutation_sendSmsLoginCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendSmsLoginCode(childComplexity, args["input"].(vo.SendSmsLoginCodeReq)), true

	case "Mutation.setPassword":
		if e.complexity.Mutation.SetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_setPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPassword(childComplexity, args["input"].(vo.SetPasswordReq)), true

	case "Mutation.starProject":
		if e.complexity.Mutation.StarProject == nil {
			break
		}

		args, err := ec.field_Mutation_starProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StarProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.switchUserOrganization":
		if e.complexity.Mutation.SwitchUserOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_switchUserOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwitchUserOrganization(childComplexity, args["input"].(vo.SwitchUserOrganizationReq)), true

	case "Mutation.unbindLoginName":
		if e.complexity.Mutation.UnbindLoginName == nil {
			break
		}

		args, err := ec.field_Mutation_unbindLoginName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnbindLoginName(childComplexity, args["input"].(vo.UnbindLoginNameReq)), true

	case "Mutation.unstarProject":
		if e.complexity.Mutation.UnstarProject == nil {
			break
		}

		args, err := ec.field_Mutation_unstarProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnstarProject(childComplexity, args["projectId"].(int64)), true

	case "Mutation.updateIssue":
		if e.complexity.Mutation.UpdateIssue == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssue(childComplexity, args["input"].(vo.UpdateIssueReq)), true

	case "Mutation.updateIssueAndIssueRelate":
		if e.complexity.Mutation.UpdateIssueAndIssueRelate == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueAndIssueRelate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueAndIssueRelate(childComplexity, args["input"].(vo.UpdateIssueAndIssueRelateReq)), true

	case "Mutation.updateIssueObjectType":
		if e.complexity.Mutation.UpdateIssueObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueObjectType(childComplexity, args["input"].(vo.UpdateIssueObjectTypeReq)), true

	case "Mutation.updateIssueProjectObjectType":
		if e.complexity.Mutation.UpdateIssueProjectObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueProjectObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueProjectObjectType(childComplexity, args["input"].(vo.UpdateIssueProjectObjectTypeReq)), true

	case "Mutation.updateIssueSort":
		if e.complexity.Mutation.UpdateIssueSort == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueSort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueSort(childComplexity, args["input"].(vo.UpdateIssueSortReq)), true

	case "Mutation.updateIssueSource":
		if e.complexity.Mutation.UpdateIssueSource == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueSource(childComplexity, args["input"].(vo.UpdateIssueSourceReq)), true

	case "Mutation.updateIssueStatus":
		if e.complexity.Mutation.UpdateIssueStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueStatus(childComplexity, args["input"].(vo.UpdateIssueStatusReq)), true

	case "Mutation.updateIssueTags":
		if e.complexity.Mutation.UpdateIssueTags == nil {
			break
		}

		args, err := ec.field_Mutation_updateIssueTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIssueTags(childComplexity, args["input"].(vo.UpdateIssueTagsReq)), true

	case "Mutation.updateIteration":
		if e.complexity.Mutation.UpdateIteration == nil {
			break
		}

		args, err := ec.field_Mutation_updateIteration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIteration(childComplexity, args["input"].(vo.UpdateIterationReq)), true

	case "Mutation.updateIterationIssueRelate":
		if e.complexity.Mutation.UpdateIterationIssueRelate == nil {
			break
		}

		args, err := ec.field_Mutation_updateIterationIssueRelate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIterationIssueRelate(childComplexity, args["input"].(vo.IterationIssueRealtionReq)), true

	case "Mutation.updateIterationStatus":
		if e.complexity.Mutation.UpdateIterationStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateIterationStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIterationStatus(childComplexity, args["input"].(vo.UpdateIterationStatusReq)), true

	case "Mutation.updateOrgMemberCheckStatus":
		if e.complexity.Mutation.UpdateOrgMemberCheckStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMemberCheckStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMemberCheckStatus(childComplexity, args["input"].(vo.UpdateOrgMemberCheckStatusReq)), true

	case "Mutation.updateOrgMemberStatus":
		if e.complexity.Mutation.UpdateOrgMemberStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgMemberStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgMemberStatus(childComplexity, args["input"].(vo.UpdateOrgMemberStatusReq)), true

	case "Mutation.updateOrganizationSetting":
		if e.complexity.Mutation.UpdateOrganizationSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationSetting(childComplexity, args["input"].(vo.UpdateOrganizationSettingsReq)), true

	case "Mutation.updatePriority":
		if e.complexity.Mutation.UpdatePriority == nil {
			break
		}

		args, err := ec.field_Mutation_updatePriority_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePriority(childComplexity, args["input"].(vo.UpdatePriorityReq)), true

	case "Mutation.updateProcessStatus":
		if e.complexity.Mutation.UpdateProcessStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateProcessStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProcessStatus(childComplexity, args["input"].(vo.UpdateProcessStatusReq)), true

	case "Mutation.updateProject":
		if e.complexity.Mutation.UpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_updateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProject(childComplexity, args["input"].(vo.UpdateProjectReq)), true

	case "Mutation.updateProjectDetail":
		if e.complexity.Mutation.UpdateProjectDetail == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectDetail(childComplexity, args["input"].(vo.UpdateProjectDetailReq)), true

	case "Mutation.updateProjectFolder":
		if e.complexity.Mutation.UpdateProjectFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectFolder(childComplexity, args["input"].(vo.UpdateProjectFolderReq)), true

	case "Mutation.updateProjectObjectType":
		if e.complexity.Mutation.UpdateProjectObjectType == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectObjectType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectObjectType(childComplexity, args["input"].(vo.UpdateProjectObjectTypeReq)), true

	case "Mutation.updateProjectResourceFolder":
		if e.complexity.Mutation.UpdateProjectResourceFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectResourceFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectResourceFolder(childComplexity, args["input"].(vo.UpdateProjectResourceFolderReq)), true

	case "Mutation.updateProjectResourceName":
		if e.complexity.Mutation.UpdateProjectResourceName == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectResourceName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectResourceName(childComplexity, args["input"].(vo.UpdateProjectResourceNameReq)), true

	case "Mutation.updateProjectStatus":
		if e.complexity.Mutation.UpdateProjectStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateProjectStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProjectStatus(childComplexity, args["input"].(vo.UpdateProjectStatusReq)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["input"].(vo.UpdateRoleReq)), true

	case "Mutation.updateRolePermissionOperation":
		if e.complexity.Mutation.UpdateRolePermissionOperation == nil {
			break
		}

		args, err := ec.field_Mutation_updateRolePermissionOperation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRolePermissionOperation(childComplexity, args["input"].(vo.UpdateRolePermissionOperationReq)), true

	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["input"].(vo.UpdateTagReq)), true

	case "Mutation.updateUserConfig":
		if e.complexity.Mutation.UpdateUserConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserConfig(childComplexity, args["input"].(vo.UpdateUserConfigReq)), true

	case "Mutation.updateUserDefaultProjectConfig":
		if e.complexity.Mutation.UpdateUserDefaultProjectConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserDefaultProjectConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserDefaultProjectConfig(childComplexity, args["input"].(vo.UpdateUserDefaultProjectConfigReq)), true

	case "Mutation.updateUserInfo":
		if e.complexity.Mutation.UpdateUserInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserInfo(childComplexity, args["input"].(vo.UpdateUserInfoReq)), true

	case "Mutation.updateUserOrgRole":
		if e.complexity.Mutation.UpdateUserOrgRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserOrgRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserOrgRole(childComplexity, args["input"].(vo.UpdateUserOrgRoleReq)), true

	case "Mutation.updateUserPcConfig":
		if e.complexity.Mutation.UpdateUserPcConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPcConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPcConfig(childComplexity, args["input"].(vo.UpdateUserPcConfigReq)), true

	case "Mutation.userLogin":
		if e.complexity.Mutation.UserLogin == nil {
			break
		}

		args, err := ec.field_Mutation_userLogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserLogin(childComplexity, args["input"].(vo.UserLoginReq)), true

	case "Mutation.userQuit":
		if e.complexity.Mutation.UserQuit == nil {
			break
		}

		return e.complexity.Mutation.UserQuit(childComplexity), true

	case "Mutation.userRegister":
		if e.complexity.Mutation.UserRegister == nil {
			break
		}

		args, err := ec.field_Mutation_userRegister_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserRegister(childComplexity, args["input"].(vo.UserRegisterReq)), true

	case "Notice.content":
		if e.complexity.Notice.Content == nil {
			break
		}

		return e.complexity.Notice.Content(childComplexity), true

	case "Notice.createTime":
		if e.complexity.Notice.CreateTime == nil {
			break
		}

		return e.complexity.Notice.CreateTime(childComplexity), true

	case "Notice.creator":
		if e.complexity.Notice.Creator == nil {
			break
		}

		return e.complexity.Notice.Creator(childComplexity), true

	case "Notice.creatorInfo":
		if e.complexity.Notice.CreatorInfo == nil {
			break
		}

		return e.complexity.Notice.CreatorInfo(childComplexity), true

	case "Notice.ext":
		if e.complexity.Notice.Ext == nil {
			break
		}

		return e.complexity.Notice.Ext(childComplexity), true

	case "Notice.id":
		if e.complexity.Notice.ID == nil {
			break
		}

		return e.complexity.Notice.ID(childComplexity), true

	case "Notice.issueId":
		if e.complexity.Notice.IssueID == nil {
			break
		}

		return e.complexity.Notice.IssueID(childComplexity), true

	case "Notice.issueName":
		if e.complexity.Notice.IssueName == nil {
			break
		}

		return e.complexity.Notice.IssueName(childComplexity), true

	case "Notice.noticer":
		if e.complexity.Notice.Noticer == nil {
			break
		}

		return e.complexity.Notice.Noticer(childComplexity), true

	case "Notice.orgId":
		if e.complexity.Notice.OrgID == nil {
			break
		}

		return e.complexity.Notice.OrgID(childComplexity), true

	case "Notice.projectId":
		if e.complexity.Notice.ProjectID == nil {
			break
		}

		return e.complexity.Notice.ProjectID(childComplexity), true

	case "Notice.projectName":
		if e.complexity.Notice.ProjectName == nil {
			break
		}

		return e.complexity.Notice.ProjectName(childComplexity), true

	case "Notice.relationTye":
		if e.complexity.Notice.RelationTye == nil {
			break
		}

		return e.complexity.Notice.RelationTye(childComplexity), true

	case "Notice.status":
		if e.complexity.Notice.Status == nil {
			break
		}

		return e.complexity.Notice.Status(childComplexity), true

	case "Notice.trendsId":
		if e.complexity.Notice.TrendsID == nil {
			break
		}

		return e.complexity.Notice.TrendsID(childComplexity), true

	case "Notice.type":
		if e.complexity.Notice.Type == nil {
			break
		}

		return e.complexity.Notice.Type(childComplexity), true

	case "NoticeCountResp.total":
		if e.complexity.NoticeCountResp.Total == nil {
			break
		}

		return e.complexity.NoticeCountResp.Total(childComplexity), true

	case "NoticeList.list":
		if e.complexity.NoticeList.List == nil {
			break
		}

		return e.complexity.NoticeList.List(childComplexity), true

	case "NoticeList.total":
		if e.complexity.NoticeList.Total == nil {
			break
		}

		return e.complexity.NoticeList.Total(childComplexity), true

	case "OperateProjectResp.isSuccess":
		if e.complexity.OperateProjectResp.IsSuccess == nil {
			break
		}

		return e.complexity.OperateProjectResp.IsSuccess(childComplexity), true

	case "OrgProjectMemberInfoResp.avatar":
		if e.complexity.OrgProjectMemberInfoResp.Avatar == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.Avatar(childComplexity), true

	case "OrgProjectMemberInfoResp.hasOrgOutInfo":
		if e.complexity.OrgProjectMemberInfoResp.HasOrgOutInfo == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.HasOrgOutInfo(childComplexity), true

	case "OrgProjectMemberInfoResp.hasOutInfo":
		if e.complexity.OrgProjectMemberInfoResp.HasOutInfo == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.HasOutInfo(childComplexity), true

	case "OrgProjectMemberInfoResp.name":
		if e.complexity.OrgProjectMemberInfoResp.Name == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.Name(childComplexity), true

	case "OrgProjectMemberInfoResp.namePy":
		if e.complexity.OrgProjectMemberInfoResp.NamePy == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.NamePy(childComplexity), true

	case "OrgProjectMemberInfoResp.orgId":
		if e.complexity.OrgProjectMemberInfoResp.OrgID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgID(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserCheckStatus":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserCheckStatus == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserCheckStatus(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserIsDelete":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserIsDelete == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserIsDelete(childComplexity), true

	case "OrgProjectMemberInfoResp.orgUserStatus":
		if e.complexity.OrgProjectMemberInfoResp.OrgUserStatus == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OrgUserStatus(childComplexity), true

	case "OrgProjectMemberInfoResp.outOrgId":
		if e.complexity.OrgProjectMemberInfoResp.OutOrgID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OutOrgID(childComplexity), true

	case "OrgProjectMemberInfoResp.outUserId":
		if e.complexity.OrgProjectMemberInfoResp.OutUserID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.OutUserID(childComplexity), true

	case "OrgProjectMemberInfoResp.userId":
		if e.complexity.OrgProjectMemberInfoResp.UserID == nil {
			break
		}

		return e.complexity.OrgProjectMemberInfoResp.UserID(childComplexity), true

	case "OrgProjectMemberResp.allMembers":
		if e.complexity.OrgProjectMemberResp.AllMembers == nil {
			break
		}

		return e.complexity.OrgProjectMemberResp.AllMembers(childComplexity), true

	case "OrgProjectMemberResp.follower":
		if e.complexity.OrgProjectMemberResp.Follower == nil {
			break
		}

		return e.complexity.OrgProjectMemberResp.Follower(childComplexity), true

	case "OrgProjectMemberResp.owner":
		if e.complexity.OrgProjectMemberResp.Owner == nil {
			break
		}

		return e.complexity.OrgProjectMemberResp.Owner(childComplexity), true

	case "OrgProjectMemberResp.participants":
		if e.complexity.OrgProjectMemberResp.Participants == nil {
			break
		}

		return e.complexity.OrgProjectMemberResp.Participants(childComplexity), true

	case "OrganizationInfoResp.address":
		if e.complexity.OrganizationInfoResp.Address == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Address(childComplexity), true

	case "OrganizationInfoResp.cityCname":
		if e.complexity.OrganizationInfoResp.CityCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CityCname(childComplexity), true

	case "OrganizationInfoResp.cityId":
		if e.complexity.OrganizationInfoResp.CityID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CityID(childComplexity), true

	case "OrganizationInfoResp.code":
		if e.complexity.OrganizationInfoResp.Code == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Code(childComplexity), true

	case "OrganizationInfoResp.countryCname":
		if e.complexity.OrganizationInfoResp.CountryCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CountryCname(childComplexity), true

	case "OrganizationInfoResp.countryId":
		if e.complexity.OrganizationInfoResp.CountryID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.CountryID(childComplexity), true

	case "OrganizationInfoResp.industryId":
		if e.complexity.OrganizationInfoResp.IndustryID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.IndustryID(childComplexity), true

	case "OrganizationInfoResp.industryName":
		if e.complexity.OrganizationInfoResp.IndustryName == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.IndustryName(childComplexity), true

	case "OrganizationInfoResp.logoUrl":
		if e.complexity.OrganizationInfoResp.LogoURL == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.LogoURL(childComplexity), true

	case "OrganizationInfoResp.orgId":
		if e.complexity.OrganizationInfoResp.OrgID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.OrgID(childComplexity), true

	case "OrganizationInfoResp.orgName":
		if e.complexity.OrganizationInfoResp.OrgName == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.OrgName(childComplexity), true

	case "OrganizationInfoResp.owner":
		if e.complexity.OrganizationInfoResp.Owner == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Owner(childComplexity), true

	case "OrganizationInfoResp.provinceCname":
		if e.complexity.OrganizationInfoResp.ProvinceCname == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.ProvinceCname(childComplexity), true

	case "OrganizationInfoResp.provinceId":
		if e.complexity.OrganizationInfoResp.ProvinceID == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.ProvinceID(childComplexity), true

	case "OrganizationInfoResp.scale":
		if e.complexity.OrganizationInfoResp.Scale == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.Scale(childComplexity), true

	case "OrganizationInfoResp.webSite":
		if e.complexity.OrganizationInfoResp.WebSite == nil {
			break
		}

		return e.complexity.OrganizationInfoResp.WebSite(childComplexity), true

	case "OrganizationUser.auditTime":
		if e.complexity.OrganizationUser.AuditTime == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditTime(childComplexity), true

	case "OrganizationUser.auditorId":
		if e.complexity.OrganizationUser.AuditorID == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditorID(childComplexity), true

	case "OrganizationUser.auditorInfo":
		if e.complexity.OrganizationUser.AuditorInfo == nil {
			break
		}

		return e.complexity.OrganizationUser.AuditorInfo(childComplexity), true

	case "OrganizationUser.checkStatus":
		if e.complexity.OrganizationUser.CheckStatus == nil {
			break
		}

		return e.complexity.OrganizationUser.CheckStatus(childComplexity), true

	case "OrganizationUser.createTime":
		if e.complexity.OrganizationUser.CreateTime == nil {
			break
		}

		return e.complexity.OrganizationUser.CreateTime(childComplexity), true

	case "OrganizationUser.creator":
		if e.complexity.OrganizationUser.Creator == nil {
			break
		}

		return e.complexity.OrganizationUser.Creator(childComplexity), true

	case "OrganizationUser.id":
		if e.complexity.OrganizationUser.ID == nil {
			break
		}

		return e.complexity.OrganizationUser.ID(childComplexity), true

	case "OrganizationUser.orgId":
		if e.complexity.OrganizationUser.OrgID == nil {
			break
		}

		return e.complexity.OrganizationUser.OrgID(childComplexity), true

	case "OrganizationUser.status":
		if e.complexity.OrganizationUser.Status == nil {
			break
		}

		return e.complexity.OrganizationUser.Status(childComplexity), true

	case "OrganizationUser.statusChangeTime":
		if e.complexity.OrganizationUser.StatusChangeTime == nil {
			break
		}

		return e.complexity.OrganizationUser.StatusChangeTime(childComplexity), true

	case "OrganizationUser.statusChangerId":
		if e.complexity.OrganizationUser.StatusChangerID == nil {
			break
		}

		return e.complexity.OrganizationUser.StatusChangerID(childComplexity), true

	case "OrganizationUser.updateTime":
		if e.complexity.OrganizationUser.UpdateTime == nil {
			break
		}

		return e.complexity.OrganizationUser.UpdateTime(childComplexity), true

	case "OrganizationUser.updator":
		if e.complexity.OrganizationUser.Updator == nil {
			break
		}

		return e.complexity.OrganizationUser.Updator(childComplexity), true

	case "OrganizationUser.useStatus":
		if e.complexity.OrganizationUser.UseStatus == nil {
			break
		}

		return e.complexity.OrganizationUser.UseStatus(childComplexity), true

	case "OrganizationUser.userId":
		if e.complexity.OrganizationUser.UserID == nil {
			break
		}

		return e.complexity.OrganizationUser.UserID(childComplexity), true

	case "OrganizationUser.userInfo":
		if e.complexity.OrganizationUser.UserInfo == nil {
			break
		}

		return e.complexity.OrganizationUser.UserInfo(childComplexity), true

	case "OrganizationUser.userRole":
		if e.complexity.OrganizationUser.UserRole == nil {
			break
		}

		return e.complexity.OrganizationUser.UserRole(childComplexity), true

	case "OssApplySignUrlResp.signUrl":
		if e.complexity.OssApplySignURLResp.SignURL == nil {
			break
		}

		return e.complexity.OssApplySignURLResp.SignURL(childComplexity), true

	case "OssPostPolicyResp.accessId":
		if e.complexity.OssPostPolicyResp.AccessID == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.AccessID(childComplexity), true

	case "OssPostPolicyResp.bucket":
		if e.complexity.OssPostPolicyResp.Bucket == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Bucket(childComplexity), true

	case "OssPostPolicyResp.callback":
		if e.complexity.OssPostPolicyResp.Callback == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Callback(childComplexity), true

	case "OssPostPolicyResp.dir":
		if e.complexity.OssPostPolicyResp.Dir == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Dir(childComplexity), true

	case "OssPostPolicyResp.expire":
		if e.complexity.OssPostPolicyResp.Expire == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Expire(childComplexity), true

	case "OssPostPolicyResp.fileName":
		if e.complexity.OssPostPolicyResp.FileName == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.FileName(childComplexity), true

	case "OssPostPolicyResp.host":
		if e.complexity.OssPostPolicyResp.Host == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Host(childComplexity), true

	case "OssPostPolicyResp.maxFileSize":
		if e.complexity.OssPostPolicyResp.MaxFileSize == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.MaxFileSize(childComplexity), true

	case "OssPostPolicyResp.policy":
		if e.complexity.OssPostPolicyResp.Policy == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Policy(childComplexity), true

	case "OssPostPolicyResp.region":
		if e.complexity.OssPostPolicyResp.Region == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Region(childComplexity), true

	case "OssPostPolicyResp.signature":
		if e.complexity.OssPostPolicyResp.Signature == nil {
			break
		}

		return e.complexity.OssPostPolicyResp.Signature(childComplexity), true

	case "Permission.code":
		if e.complexity.Permission.Code == nil {
			break
		}

		return e.complexity.Permission.Code(childComplexity), true

	case "Permission.createTime":
		if e.complexity.Permission.CreateTime == nil {
			break
		}

		return e.complexity.Permission.CreateTime(childComplexity), true

	case "Permission.creator":
		if e.complexity.Permission.Creator == nil {
			break
		}

		return e.complexity.Permission.Creator(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.isShow":
		if e.complexity.Permission.IsShow == nil {
			break
		}

		return e.complexity.Permission.IsShow(childComplexity), true

	case "Permission.langCode":
		if e.complexity.Permission.LangCode == nil {
			break
		}

		return e.complexity.Permission.LangCode(childComplexity), true

	case "Permission.name":
		if e.complexity.Permission.Name == nil {
			break
		}

		return e.complexity.Permission.Name(childComplexity), true

	case "Permission.orgId":
		if e.complexity.Permission.OrgID == nil {
			break
		}

		return e.complexity.Permission.OrgID(childComplexity), true

	case "Permission.parentId":
		if e.complexity.Permission.ParentID == nil {
			break
		}

		return e.complexity.Permission.ParentID(childComplexity), true

	case "Permission.path":
		if e.complexity.Permission.Path == nil {
			break
		}

		return e.complexity.Permission.Path(childComplexity), true

	case "Permission.remark":
		if e.complexity.Permission.Remark == nil {
			break
		}

		return e.complexity.Permission.Remark(childComplexity), true

	case "Permission.status":
		if e.complexity.Permission.Status == nil {
			break
		}

		return e.complexity.Permission.Status(childComplexity), true

	case "Permission.type":
		if e.complexity.Permission.Type == nil {
			break
		}

		return e.complexity.Permission.Type(childComplexity), true

	case "Permission.updateTime":
		if e.complexity.Permission.UpdateTime == nil {
			break
		}

		return e.complexity.Permission.UpdateTime(childComplexity), true

	case "Permission.updator":
		if e.complexity.Permission.Updator == nil {
			break
		}

		return e.complexity.Permission.Updator(childComplexity), true

	case "PermissionList.list":
		if e.complexity.PermissionList.List == nil {
			break
		}

		return e.complexity.PermissionList.List(childComplexity), true

	case "PermissionList.total":
		if e.complexity.PermissionList.Total == nil {
			break
		}

		return e.complexity.PermissionList.Total(childComplexity), true

	case "PermissionOperation.createTime":
		if e.complexity.PermissionOperation.CreateTime == nil {
			break
		}

		return e.complexity.PermissionOperation.CreateTime(childComplexity), true

	case "PermissionOperation.creator":
		if e.complexity.PermissionOperation.Creator == nil {
			break
		}

		return e.complexity.PermissionOperation.Creator(childComplexity), true

	case "PermissionOperation.id":
		if e.complexity.PermissionOperation.ID == nil {
			break
		}

		return e.complexity.PermissionOperation.ID(childComplexity), true

	case "PermissionOperation.isShow":
		if e.complexity.PermissionOperation.IsShow == nil {
			break
		}

		return e.complexity.PermissionOperation.IsShow(childComplexity), true

	case "PermissionOperation.langCode":
		if e.complexity.PermissionOperation.LangCode == nil {
			break
		}

		return e.complexity.PermissionOperation.LangCode(childComplexity), true

	case "PermissionOperation.name":
		if e.complexity.PermissionOperation.Name == nil {
			break
		}

		return e.complexity.PermissionOperation.Name(childComplexity), true

	case "PermissionOperation.operationCodes":
		if e.complexity.PermissionOperation.OperationCodes == nil {
			break
		}

		return e.complexity.PermissionOperation.OperationCodes(childComplexity), true

	case "PermissionOperation.orgId":
		if e.complexity.PermissionOperation.OrgID == nil {
			break
		}

		return e.complexity.PermissionOperation.OrgID(childComplexity), true

	case "PermissionOperation.permissionId":
		if e.complexity.PermissionOperation.PermissionID == nil {
			break
		}

		return e.complexity.PermissionOperation.PermissionID(childComplexity), true

	case "PermissionOperation.remark":
		if e.complexity.PermissionOperation.Remark == nil {
			break
		}

		return e.complexity.PermissionOperation.Remark(childComplexity), true

	case "PermissionOperation.status":
		if e.complexity.PermissionOperation.Status == nil {
			break
		}

		return e.complexity.PermissionOperation.Status(childComplexity), true

	case "PermissionOperation.updateTime":
		if e.complexity.PermissionOperation.UpdateTime == nil {
			break
		}

		return e.complexity.PermissionOperation.UpdateTime(childComplexity), true

	case "PermissionOperation.updator":
		if e.complexity.PermissionOperation.Updator == nil {
			break
		}

		return e.complexity.PermissionOperation.Updator(childComplexity), true

	case "PermissionOperationList.list":
		if e.complexity.PermissionOperationList.List == nil {
			break
		}

		return e.complexity.PermissionOperationList.List(childComplexity), true

	case "PermissionOperationList.total":
		if e.complexity.PermissionOperationList.Total == nil {
			break
		}

		return e.complexity.PermissionOperationList.Total(childComplexity), true

	case "PermissionOperationListResp.operationList":
		if e.complexity.PermissionOperationListResp.OperationList == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.OperationList(childComplexity), true

	case "PermissionOperationListResp.permissionHave":
		if e.complexity.PermissionOperationListResp.PermissionHave == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.PermissionHave(childComplexity), true

	case "PermissionOperationListResp.permissionInfo":
		if e.complexity.PermissionOperationListResp.PermissionInfo == nil {
			break
		}

		return e.complexity.PermissionOperationListResp.PermissionInfo(childComplexity), true

	case "PersonalInfo.avatar":
		if e.complexity.PersonalInfo.Avatar == nil {
			break
		}

		return e.complexity.PersonalInfo.Avatar(childComplexity), true

	case "PersonalInfo.birthday":
		if e.complexity.PersonalInfo.Birthday == nil {
			break
		}

		return e.complexity.PersonalInfo.Birthday(childComplexity), true

	case "PersonalInfo.createTime":
		if e.complexity.PersonalInfo.CreateTime == nil {
			break
		}

		return e.complexity.PersonalInfo.CreateTime(childComplexity), true

	case "PersonalInfo.email":
		if e.complexity.PersonalInfo.Email == nil {
			break
		}

		return e.complexity.PersonalInfo.Email(childComplexity), true

	case "PersonalInfo.emplId":
		if e.complexity.PersonalInfo.EmplID == nil {
			break
		}

		return e.complexity.PersonalInfo.EmplID(childComplexity), true

	case "PersonalInfo.id":
		if e.complexity.PersonalInfo.ID == nil {
			break
		}

		return e.complexity.PersonalInfo.ID(childComplexity), true

	case "PersonalInfo.language":
		if e.complexity.PersonalInfo.Language == nil {
			break
		}

		return e.complexity.PersonalInfo.Language(childComplexity), true

	case "PersonalInfo.lastLoginIp":
		if e.complexity.PersonalInfo.LastLoginIP == nil {
			break
		}

		return e.complexity.PersonalInfo.LastLoginIP(childComplexity), true

	case "PersonalInfo.lastLoginTime":
		if e.complexity.PersonalInfo.LastLoginTime == nil {
			break
		}

		return e.complexity.PersonalInfo.LastLoginTime(childComplexity), true

	case "PersonalInfo.level":
		if e.complexity.PersonalInfo.Level == nil {
			break
		}

		return e.complexity.PersonalInfo.Level(childComplexity), true

	case "PersonalInfo.levelName":
		if e.complexity.PersonalInfo.LevelName == nil {
			break
		}

		return e.complexity.PersonalInfo.LevelName(childComplexity), true

	case "PersonalInfo.loginFailCount":
		if e.complexity.PersonalInfo.LoginFailCount == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginFailCount(childComplexity), true

	case "PersonalInfo.loginName":
		if e.complexity.PersonalInfo.LoginName == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginName(childComplexity), true

	case "PersonalInfo.loginNameEditCount":
		if e.complexity.PersonalInfo.LoginNameEditCount == nil {
			break
		}

		return e.complexity.PersonalInfo.LoginNameEditCount(childComplexity), true

	case "PersonalInfo.mobile":
		if e.complexity.PersonalInfo.Mobile == nil {
			break
		}

		return e.complexity.PersonalInfo.Mobile(childComplexity), true

	case "PersonalInfo.motto":
		if e.complexity.PersonalInfo.Motto == nil {
			break
		}

		return e.complexity.PersonalInfo.Motto(childComplexity), true

	case "PersonalInfo.name":
		if e.complexity.PersonalInfo.Name == nil {
			break
		}

		return e.complexity.PersonalInfo.Name(childComplexity), true

	case "PersonalInfo.orgCode":
		if e.complexity.PersonalInfo.OrgCode == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgCode(childComplexity), true

	case "PersonalInfo.orgId":
		if e.complexity.PersonalInfo.OrgID == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgID(childComplexity), true

	case "PersonalInfo.orgName":
		if e.complexity.PersonalInfo.OrgName == nil {
			break
		}

		return e.complexity.PersonalInfo.OrgName(childComplexity), true

	case "PersonalInfo.passwordSet":
		if e.complexity.PersonalInfo.PasswordSet == nil {
			break
		}

		return e.complexity.PersonalInfo.PasswordSet(childComplexity), true

	case "PersonalInfo.rimanente":
		if e.complexity.PersonalInfo.Rimanente == nil {
			break
		}

		return e.complexity.PersonalInfo.Rimanente(childComplexity), true

	case "PersonalInfo.sex":
		if e.complexity.PersonalInfo.Sex == nil {
			break
		}

		return e.complexity.PersonalInfo.Sex(childComplexity), true

	case "PersonalInfo.sourceChannel":
		if e.complexity.PersonalInfo.SourceChannel == nil {
			break
		}

		return e.complexity.PersonalInfo.SourceChannel(childComplexity), true

	case "PersonalInfo.updateTime":
		if e.complexity.PersonalInfo.UpdateTime == nil {
			break
		}

		return e.complexity.PersonalInfo.UpdateTime(childComplexity), true

	case "Priority.bgStyle":
		if e.complexity.Priority.BgStyle == nil {
			break
		}

		return e.complexity.Priority.BgStyle(childComplexity), true

	case "Priority.createTime":
		if e.complexity.Priority.CreateTime == nil {
			break
		}

		return e.complexity.Priority.CreateTime(childComplexity), true

	case "Priority.creator":
		if e.complexity.Priority.Creator == nil {
			break
		}

		return e.complexity.Priority.Creator(childComplexity), true

	case "Priority.fontStyle":
		if e.complexity.Priority.FontStyle == nil {
			break
		}

		return e.complexity.Priority.FontStyle(childComplexity), true

	case "Priority.id":
		if e.complexity.Priority.ID == nil {
			break
		}

		return e.complexity.Priority.ID(childComplexity), true

	case "Priority.isDefault":
		if e.complexity.Priority.IsDefault == nil {
			break
		}

		return e.complexity.Priority.IsDefault(childComplexity), true

	case "Priority.isDelete":
		if e.complexity.Priority.IsDelete == nil {
			break
		}

		return e.complexity.Priority.IsDelete(childComplexity), true

	case "Priority.langCode":
		if e.complexity.Priority.LangCode == nil {
			break
		}

		return e.complexity.Priority.LangCode(childComplexity), true

	case "Priority.name":
		if e.complexity.Priority.Name == nil {
			break
		}

		return e.complexity.Priority.Name(childComplexity), true

	case "Priority.orgId":
		if e.complexity.Priority.OrgID == nil {
			break
		}

		return e.complexity.Priority.OrgID(childComplexity), true

	case "Priority.remark":
		if e.complexity.Priority.Remark == nil {
			break
		}

		return e.complexity.Priority.Remark(childComplexity), true

	case "Priority.sort":
		if e.complexity.Priority.Sort == nil {
			break
		}

		return e.complexity.Priority.Sort(childComplexity), true

	case "Priority.status":
		if e.complexity.Priority.Status == nil {
			break
		}

		return e.complexity.Priority.Status(childComplexity), true

	case "Priority.type":
		if e.complexity.Priority.Type == nil {
			break
		}

		return e.complexity.Priority.Type(childComplexity), true

	case "Priority.updateTime":
		if e.complexity.Priority.UpdateTime == nil {
			break
		}

		return e.complexity.Priority.UpdateTime(childComplexity), true

	case "Priority.updator":
		if e.complexity.Priority.Updator == nil {
			break
		}

		return e.complexity.Priority.Updator(childComplexity), true

	case "Priority.version":
		if e.complexity.Priority.Version == nil {
			break
		}

		return e.complexity.Priority.Version(childComplexity), true

	case "PriorityList.list":
		if e.complexity.PriorityList.List == nil {
			break
		}

		return e.complexity.PriorityList.List(childComplexity), true

	case "PriorityList.total":
		if e.complexity.PriorityList.Total == nil {
			break
		}

		return e.complexity.PriorityList.Total(childComplexity), true

	case "ProcessStatus.bgStyle":
		if e.complexity.ProcessStatus.BgStyle == nil {
			break
		}

		return e.complexity.ProcessStatus.BgStyle(childComplexity), true

	case "ProcessStatus.category":
		if e.complexity.ProcessStatus.Category == nil {
			break
		}

		return e.complexity.ProcessStatus.Category(childComplexity), true

	case "ProcessStatus.createTime":
		if e.complexity.ProcessStatus.CreateTime == nil {
			break
		}

		return e.complexity.ProcessStatus.CreateTime(childComplexity), true

	case "ProcessStatus.creator":
		if e.complexity.ProcessStatus.Creator == nil {
			break
		}

		return e.complexity.ProcessStatus.Creator(childComplexity), true

	case "ProcessStatus.fontStyle":
		if e.complexity.ProcessStatus.FontStyle == nil {
			break
		}

		return e.complexity.ProcessStatus.FontStyle(childComplexity), true

	case "ProcessStatus.id":
		if e.complexity.ProcessStatus.ID == nil {
			break
		}

		return e.complexity.ProcessStatus.ID(childComplexity), true

	case "ProcessStatus.isDelete":
		if e.complexity.ProcessStatus.IsDelete == nil {
			break
		}

		return e.complexity.ProcessStatus.IsDelete(childComplexity), true

	case "ProcessStatus.langCode":
		if e.complexity.ProcessStatus.LangCode == nil {
			break
		}

		return e.complexity.ProcessStatus.LangCode(childComplexity), true

	case "ProcessStatus.name":
		if e.complexity.ProcessStatus.Name == nil {
			break
		}

		return e.complexity.ProcessStatus.Name(childComplexity), true

	case "ProcessStatus.orgId":
		if e.complexity.ProcessStatus.OrgID == nil {
			break
		}

		return e.complexity.ProcessStatus.OrgID(childComplexity), true

	case "ProcessStatus.remark":
		if e.complexity.ProcessStatus.Remark == nil {
			break
		}

		return e.complexity.ProcessStatus.Remark(childComplexity), true

	case "ProcessStatus.sort":
		if e.complexity.ProcessStatus.Sort == nil {
			break
		}

		return e.complexity.ProcessStatus.Sort(childComplexity), true

	case "ProcessStatus.status":
		if e.complexity.ProcessStatus.Status == nil {
			break
		}

		return e.complexity.ProcessStatus.Status(childComplexity), true

	case "ProcessStatus.type":
		if e.complexity.ProcessStatus.Type == nil {
			break
		}

		return e.complexity.ProcessStatus.Type(childComplexity), true

	case "ProcessStatus.updateTime":
		if e.complexity.ProcessStatus.UpdateTime == nil {
			break
		}

		return e.complexity.ProcessStatus.UpdateTime(childComplexity), true

	case "ProcessStatus.updator":
		if e.complexity.ProcessStatus.Updator == nil {
			break
		}

		return e.complexity.ProcessStatus.Updator(childComplexity), true

	case "ProcessStatus.version":
		if e.complexity.ProcessStatus.Version == nil {
			break
		}

		return e.complexity.ProcessStatus.Version(childComplexity), true

	case "ProcessStatusList.list":
		if e.complexity.ProcessStatusList.List == nil {
			break
		}

		return e.complexity.ProcessStatusList.List(childComplexity), true

	case "ProcessStatusList.total":
		if e.complexity.ProcessStatusList.Total == nil {
			break
		}

		return e.complexity.ProcessStatusList.Total(childComplexity), true

	case "Project.allIssues":
		if e.complexity.Project.AllIssues == nil {
			break
		}

		return e.complexity.Project.AllIssues(childComplexity), true

	case "Project.allStatus":
		if e.complexity.Project.AllStatus == nil {
			break
		}

		return e.complexity.Project.AllStatus(childComplexity), true

	case "Project.code":
		if e.complexity.Project.Code == nil {
			break
		}

		return e.complexity.Project.Code(childComplexity), true

	case "Project.createTime":
		if e.complexity.Project.CreateTime == nil {
			break
		}

		return e.complexity.Project.CreateTime(childComplexity), true

	case "Project.creator":
		if e.complexity.Project.Creator == nil {
			break
		}

		return e.complexity.Project.Creator(childComplexity), true

	case "Project.creatorInfo":
		if e.complexity.Project.CreatorInfo == nil {
			break
		}

		return e.complexity.Project.CreatorInfo(childComplexity), true

	case "Project.finishIssues":
		if e.complexity.Project.FinishIssues == nil {
			break
		}

		return e.complexity.Project.FinishIssues(childComplexity), true

	case "Project.followerInfo":
		if e.complexity.Project.FollowerInfo == nil {
			break
		}

		return e.complexity.Project.FollowerInfo(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.isDelete":
		if e.complexity.Project.IsDelete == nil {
			break
		}

		return e.complexity.Project.IsDelete(childComplexity), true

	case "Project.isFiling":
		if e.complexity.Project.IsFiling == nil {
			break
		}

		return e.complexity.Project.IsFiling(childComplexity), true

	case "Project.isSyncOutCalendar":
		if e.complexity.Project.IsSyncOutCalendar == nil {
			break
		}

		return e.complexity.Project.IsSyncOutCalendar(childComplexity), true

	case "Project.memberInfo":
		if e.complexity.Project.MemberInfo == nil {
			break
		}

		return e.complexity.Project.MemberInfo(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.orgId":
		if e.complexity.Project.OrgID == nil {
			break
		}

		return e.complexity.Project.OrgID(childComplexity), true

	case "Project.overdueIssues":
		if e.complexity.Project.OverdueIssues == nil {
			break
		}

		return e.complexity.Project.OverdueIssues(childComplexity), true

	case "Project.owner":
		if e.complexity.Project.Owner == nil {
			break
		}

		return e.complexity.Project.Owner(childComplexity), true

	case "Project.ownerInfo":
		if e.complexity.Project.OwnerInfo == nil {
			break
		}

		return e.complexity.Project.OwnerInfo(childComplexity), true

	case "Project.planEndTime":
		if e.complexity.Project.PlanEndTime == nil {
			break
		}

		return e.complexity.Project.PlanEndTime(childComplexity), true

	case "Project.planStartTime":
		if e.complexity.Project.PlanStartTime == nil {
			break
		}

		return e.complexity.Project.PlanStartTime(childComplexity), true

	case "Project.preCode":
		if e.complexity.Project.PreCode == nil {
			break
		}

		return e.complexity.Project.PreCode(childComplexity), true

	case "Project.priorityId":
		if e.complexity.Project.PriorityID == nil {
			break
		}

		return e.complexity.Project.PriorityID(childComplexity), true

	case "Project.projectTypeId":
		if e.complexity.Project.ProjectTypeID == nil {
			break
		}

		return e.complexity.Project.ProjectTypeID(childComplexity), true

	case "Project.projectTypeLangCode":
		if e.complexity.Project.ProjectTypeLangCode == nil {
			break
		}

		return e.complexity.Project.ProjectTypeLangCode(childComplexity), true

	case "Project.projectTypeName":
		if e.complexity.Project.ProjectTypeName == nil {
			break
		}

		return e.complexity.Project.ProjectTypeName(childComplexity), true

	case "Project.publicStatus":
		if e.complexity.Project.PublicStatus == nil {
			break
		}

		return e.complexity.Project.PublicStatus(childComplexity), true

	case "Project.remark":
		if e.complexity.Project.Remark == nil {
			break
		}

		return e.complexity.Project.Remark(childComplexity), true

	case "Project.resourceCompressedPath":
		if e.complexity.Project.ResourceCompressedPath == nil {
			break
		}

		return e.complexity.Project.ResourceCompressedPath(childComplexity), true

	case "Project.resourceId":
		if e.complexity.Project.ResourceID == nil {
			break
		}

		return e.complexity.Project.ResourceID(childComplexity), true

	case "Project.resourcePath":
		if e.complexity.Project.ResourcePath == nil {
			break
		}

		return e.complexity.Project.ResourcePath(childComplexity), true

	case "Project.status":
		if e.complexity.Project.Status == nil {
			break
		}

		return e.complexity.Project.Status(childComplexity), true

	case "Project.updateTime":
		if e.complexity.Project.UpdateTime == nil {
			break
		}

		return e.complexity.Project.UpdateTime(childComplexity), true

	case "Project.updator":
		if e.complexity.Project.Updator == nil {
			break
		}

		return e.complexity.Project.Updator(childComplexity), true

	case "Project.version":
		if e.complexity.Project.Version == nil {
			break
		}

		return e.complexity.Project.Version(childComplexity), true

	case "ProjectDayStat.bugCount":
		if e.complexity.ProjectDayStat.BugCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugCount(childComplexity), true

	case "ProjectDayStat.bugEndCount":
		if e.complexity.ProjectDayStat.BugEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugEndCount(childComplexity), true

	case "ProjectDayStat.bugOverdueCount":
		if e.complexity.ProjectDayStat.BugOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugOverdueCount(childComplexity), true

	case "ProjectDayStat.bugRunningCount":
		if e.complexity.ProjectDayStat.BugRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugRunningCount(childComplexity), true

	case "ProjectDayStat.bugWaitCount":
		if e.complexity.ProjectDayStat.BugWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.BugWaitCount(childComplexity), true

	case "ProjectDayStat.createTime":
		if e.complexity.ProjectDayStat.CreateTime == nil {
			break
		}

		return e.complexity.ProjectDayStat.CreateTime(childComplexity), true

	case "ProjectDayStat.creator":
		if e.complexity.ProjectDayStat.Creator == nil {
			break
		}

		return e.complexity.ProjectDayStat.Creator(childComplexity), true

	case "ProjectDayStat.demandCount":
		if e.complexity.ProjectDayStat.DemandCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandCount(childComplexity), true

	case "ProjectDayStat.demandEndCount":
		if e.complexity.ProjectDayStat.DemandEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandEndCount(childComplexity), true

	case "ProjectDayStat.demandOverdueCount":
		if e.complexity.ProjectDayStat.DemandOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandOverdueCount(childComplexity), true

	case "ProjectDayStat.demandRunningCount":
		if e.complexity.ProjectDayStat.DemandRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandRunningCount(childComplexity), true

	case "ProjectDayStat.demandWaitCount":
		if e.complexity.ProjectDayStat.DemandWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.DemandWaitCount(childComplexity), true

	case "ProjectDayStat.ext":
		if e.complexity.ProjectDayStat.Ext == nil {
			break
		}

		return e.complexity.ProjectDayStat.Ext(childComplexity), true

	case "ProjectDayStat.id":
		if e.complexity.ProjectDayStat.ID == nil {
			break
		}

		return e.complexity.ProjectDayStat.ID(childComplexity), true

	case "ProjectDayStat.isDelete":
		if e.complexity.ProjectDayStat.IsDelete == nil {
			break
		}

		return e.complexity.ProjectDayStat.IsDelete(childComplexity), true

	case "ProjectDayStat.issueCount":
		if e.complexity.ProjectDayStat.IssueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueCount(childComplexity), true

	case "ProjectDayStat.issueEndCount":
		if e.complexity.ProjectDayStat.IssueEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueEndCount(childComplexity), true

	case "ProjectDayStat.issueOverdueCount":
		if e.complexity.ProjectDayStat.IssueOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueOverdueCount(childComplexity), true

	case "ProjectDayStat.issueRunningCount":
		if e.complexity.ProjectDayStat.IssueRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueRunningCount(childComplexity), true

	case "ProjectDayStat.issueWaitCount":
		if e.complexity.ProjectDayStat.IssueWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.IssueWaitCount(childComplexity), true

	case "ProjectDayStat.orgId":
		if e.complexity.ProjectDayStat.OrgID == nil {
			break
		}

		return e.complexity.ProjectDayStat.OrgID(childComplexity), true

	case "ProjectDayStat.projectId":
		if e.complexity.ProjectDayStat.ProjectID == nil {
			break
		}

		return e.complexity.ProjectDayStat.ProjectID(childComplexity), true

	case "ProjectDayStat.statDate":
		if e.complexity.ProjectDayStat.StatDate == nil {
			break
		}

		return e.complexity.ProjectDayStat.StatDate(childComplexity), true

	case "ProjectDayStat.status":
		if e.complexity.ProjectDayStat.Status == nil {
			break
		}

		return e.complexity.ProjectDayStat.Status(childComplexity), true

	case "ProjectDayStat.storyPointCount":
		if e.complexity.ProjectDayStat.StoryPointCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointCount(childComplexity), true

	case "ProjectDayStat.storyPointEndCount":
		if e.complexity.ProjectDayStat.StoryPointEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointEndCount(childComplexity), true

	case "ProjectDayStat.storyPointOverdueCount":
		if e.complexity.ProjectDayStat.StoryPointOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointOverdueCount(childComplexity), true

	case "ProjectDayStat.storyPointRunningCount":
		if e.complexity.ProjectDayStat.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointRunningCount(childComplexity), true

	case "ProjectDayStat.storyPointWaitCount":
		if e.complexity.ProjectDayStat.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.StoryPointWaitCount(childComplexity), true

	case "ProjectDayStat.taskCount":
		if e.complexity.ProjectDayStat.TaskCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskCount(childComplexity), true

	case "ProjectDayStat.taskEndCount":
		if e.complexity.ProjectDayStat.TaskEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskEndCount(childComplexity), true

	case "ProjectDayStat.taskOverdueCount":
		if e.complexity.ProjectDayStat.TaskOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskOverdueCount(childComplexity), true

	case "ProjectDayStat.taskRunningCount":
		if e.complexity.ProjectDayStat.TaskRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskRunningCount(childComplexity), true

	case "ProjectDayStat.taskWaitCount":
		if e.complexity.ProjectDayStat.TaskWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TaskWaitCount(childComplexity), true

	case "ProjectDayStat.testtaskCount":
		if e.complexity.ProjectDayStat.TesttaskCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskCount(childComplexity), true

	case "ProjectDayStat.testtaskEndCount":
		if e.complexity.ProjectDayStat.TesttaskEndCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskEndCount(childComplexity), true

	case "ProjectDayStat.testtaskOverdueCount":
		if e.complexity.ProjectDayStat.TesttaskOverdueCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskOverdueCount(childComplexity), true

	case "ProjectDayStat.testtaskRunningCount":
		if e.complexity.ProjectDayStat.TesttaskRunningCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskRunningCount(childComplexity), true

	case "ProjectDayStat.testtaskWaitCount":
		if e.complexity.ProjectDayStat.TesttaskWaitCount == nil {
			break
		}

		return e.complexity.ProjectDayStat.TesttaskWaitCount(childComplexity), true

	case "ProjectDayStat.updateTime":
		if e.complexity.ProjectDayStat.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectDayStat.UpdateTime(childComplexity), true

	case "ProjectDayStat.updator":
		if e.complexity.ProjectDayStat.Updator == nil {
			break
		}

		return e.complexity.ProjectDayStat.Updator(childComplexity), true

	case "ProjectDayStat.version":
		if e.complexity.ProjectDayStat.Version == nil {
			break
		}

		return e.complexity.ProjectDayStat.Version(childComplexity), true

	case "ProjectDayStatList.list":
		if e.complexity.ProjectDayStatList.List == nil {
			break
		}

		return e.complexity.ProjectDayStatList.List(childComplexity), true

	case "ProjectDayStatList.total":
		if e.complexity.ProjectDayStatList.Total == nil {
			break
		}

		return e.complexity.ProjectDayStatList.Total(childComplexity), true

	case "ProjectDetail.createTime":
		if e.complexity.ProjectDetail.CreateTime == nil {
			break
		}

		return e.complexity.ProjectDetail.CreateTime(childComplexity), true

	case "ProjectDetail.creator":
		if e.complexity.ProjectDetail.Creator == nil {
			break
		}

		return e.complexity.ProjectDetail.Creator(childComplexity), true

	case "ProjectDetail.id":
		if e.complexity.ProjectDetail.ID == nil {
			break
		}

		return e.complexity.ProjectDetail.ID(childComplexity), true

	case "ProjectDetail.isEnableWorkHours":
		if e.complexity.ProjectDetail.IsEnableWorkHours == nil {
			break
		}

		return e.complexity.ProjectDetail.IsEnableWorkHours(childComplexity), true

	case "ProjectDetail.isSyncOutCalendar":
		if e.complexity.ProjectDetail.IsSyncOutCalendar == nil {
			break
		}

		return e.complexity.ProjectDetail.IsSyncOutCalendar(childComplexity), true

	case "ProjectDetail.notice":
		if e.complexity.ProjectDetail.Notice == nil {
			break
		}

		return e.complexity.ProjectDetail.Notice(childComplexity), true

	case "ProjectDetail.orgId":
		if e.complexity.ProjectDetail.OrgID == nil {
			break
		}

		return e.complexity.ProjectDetail.OrgID(childComplexity), true

	case "ProjectDetail.projectId":
		if e.complexity.ProjectDetail.ProjectID == nil {
			break
		}

		return e.complexity.ProjectDetail.ProjectID(childComplexity), true

	case "ProjectDetail.updateTime":
		if e.complexity.ProjectDetail.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectDetail.UpdateTime(childComplexity), true

	case "ProjectDetail.updator":
		if e.complexity.ProjectDetail.Updator == nil {
			break
		}

		return e.complexity.ProjectDetail.Updator(childComplexity), true

	case "ProjectDetailList.list":
		if e.complexity.ProjectDetailList.List == nil {
			break
		}

		return e.complexity.ProjectDetailList.List(childComplexity), true

	case "ProjectDetailList.total":
		if e.complexity.ProjectDetailList.Total == nil {
			break
		}

		return e.complexity.ProjectDetailList.Total(childComplexity), true

	case "ProjectInfo.allStatus":
		if e.complexity.ProjectInfo.AllStatus == nil {
			break
		}

		return e.complexity.ProjectInfo.AllStatus(childComplexity), true

	case "ProjectInfo.code":
		if e.complexity.ProjectInfo.Code == nil {
			break
		}

		return e.complexity.ProjectInfo.Code(childComplexity), true

	case "ProjectInfo.createTime":
		if e.complexity.ProjectInfo.CreateTime == nil {
			break
		}

		return e.complexity.ProjectInfo.CreateTime(childComplexity), true

	case "ProjectInfo.creator":
		if e.complexity.ProjectInfo.Creator == nil {
			break
		}

		return e.complexity.ProjectInfo.Creator(childComplexity), true

	case "ProjectInfo.creatorInfo":
		if e.complexity.ProjectInfo.CreatorInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.CreatorInfo(childComplexity), true

	case "ProjectInfo.followerInfo":
		if e.complexity.ProjectInfo.FollowerInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.FollowerInfo(childComplexity), true

	case "ProjectInfo.id":
		if e.complexity.ProjectInfo.ID == nil {
			break
		}

		return e.complexity.ProjectInfo.ID(childComplexity), true

	case "ProjectInfo.isFiling":
		if e.complexity.ProjectInfo.IsFiling == nil {
			break
		}

		return e.complexity.ProjectInfo.IsFiling(childComplexity), true

	case "ProjectInfo.memberInfo":
		if e.complexity.ProjectInfo.MemberInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.MemberInfo(childComplexity), true

	case "ProjectInfo.name":
		if e.complexity.ProjectInfo.Name == nil {
			break
		}

		return e.complexity.ProjectInfo.Name(childComplexity), true

	case "ProjectInfo.orgId":
		if e.complexity.ProjectInfo.OrgID == nil {
			break
		}

		return e.complexity.ProjectInfo.OrgID(childComplexity), true

	case "ProjectInfo.owner":
		if e.complexity.ProjectInfo.Owner == nil {
			break
		}

		return e.complexity.ProjectInfo.Owner(childComplexity), true

	case "ProjectInfo.ownerInfo":
		if e.complexity.ProjectInfo.OwnerInfo == nil {
			break
		}

		return e.complexity.ProjectInfo.OwnerInfo(childComplexity), true

	case "ProjectInfo.planEndTime":
		if e.complexity.ProjectInfo.PlanEndTime == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanEndTime(childComplexity), true

	case "ProjectInfo.planStartTime":
		if e.complexity.ProjectInfo.PlanStartTime == nil {
			break
		}

		return e.complexity.ProjectInfo.PlanStartTime(childComplexity), true

	case "ProjectInfo.preCode":
		if e.complexity.ProjectInfo.PreCode == nil {
			break
		}

		return e.complexity.ProjectInfo.PreCode(childComplexity), true

	case "ProjectInfo.priorityId":
		if e.complexity.ProjectInfo.PriorityID == nil {
			break
		}

		return e.complexity.ProjectInfo.PriorityID(childComplexity), true

	case "ProjectInfo.projectTypeId":
		if e.complexity.ProjectInfo.ProjectTypeID == nil {
			break
		}

		return e.complexity.ProjectInfo.ProjectTypeID(childComplexity), true

	case "ProjectInfo.publicStatus":
		if e.complexity.ProjectInfo.PublicStatus == nil {
			break
		}

		return e.complexity.ProjectInfo.PublicStatus(childComplexity), true

	case "ProjectInfo.remark":
		if e.complexity.ProjectInfo.Remark == nil {
			break
		}

		return e.complexity.ProjectInfo.Remark(childComplexity), true

	case "ProjectInfo.resourceId":
		if e.complexity.ProjectInfo.ResourceID == nil {
			break
		}

		return e.complexity.ProjectInfo.ResourceID(childComplexity), true

	case "ProjectInfo.resourcePath":
		if e.complexity.ProjectInfo.ResourcePath == nil {
			break
		}

		return e.complexity.ProjectInfo.ResourcePath(childComplexity), true

	case "ProjectInfo.status":
		if e.complexity.ProjectInfo.Status == nil {
			break
		}

		return e.complexity.ProjectInfo.Status(childComplexity), true

	case "ProjectInfo.updateTime":
		if e.complexity.ProjectInfo.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectInfo.UpdateTime(childComplexity), true

	case "ProjectInfo.updator":
		if e.complexity.ProjectInfo.Updator == nil {
			break
		}

		return e.complexity.ProjectInfo.Updator(childComplexity), true

	case "ProjectList.list":
		if e.complexity.ProjectList.List == nil {
			break
		}

		return e.complexity.ProjectList.List(childComplexity), true

	case "ProjectList.total":
		if e.complexity.ProjectList.Total == nil {
			break
		}

		return e.complexity.ProjectList.Total(childComplexity), true

	case "ProjectObjectType.bgStyle":
		if e.complexity.ProjectObjectType.BgStyle == nil {
			break
		}

		return e.complexity.ProjectObjectType.BgStyle(childComplexity), true

	case "ProjectObjectType.createTime":
		if e.complexity.ProjectObjectType.CreateTime == nil {
			break
		}

		return e.complexity.ProjectObjectType.CreateTime(childComplexity), true

	case "ProjectObjectType.creator":
		if e.complexity.ProjectObjectType.Creator == nil {
			break
		}

		return e.complexity.ProjectObjectType.Creator(childComplexity), true

	case "ProjectObjectType.fontStyle":
		if e.complexity.ProjectObjectType.FontStyle == nil {
			break
		}

		return e.complexity.ProjectObjectType.FontStyle(childComplexity), true

	case "ProjectObjectType.id":
		if e.complexity.ProjectObjectType.ID == nil {
			break
		}

		return e.complexity.ProjectObjectType.ID(childComplexity), true

	case "ProjectObjectType.icon":
		if e.complexity.ProjectObjectType.Icon == nil {
			break
		}

		return e.complexity.ProjectObjectType.Icon(childComplexity), true

	case "ProjectObjectType.isDelete":
		if e.complexity.ProjectObjectType.IsDelete == nil {
			break
		}

		return e.complexity.ProjectObjectType.IsDelete(childComplexity), true

	case "ProjectObjectType.isReadonly":
		if e.complexity.ProjectObjectType.IsReadonly == nil {
			break
		}

		return e.complexity.ProjectObjectType.IsReadonly(childComplexity), true

	case "ProjectObjectType.langCode":
		if e.complexity.ProjectObjectType.LangCode == nil {
			break
		}

		return e.complexity.ProjectObjectType.LangCode(childComplexity), true

	case "ProjectObjectType.name":
		if e.complexity.ProjectObjectType.Name == nil {
			break
		}

		return e.complexity.ProjectObjectType.Name(childComplexity), true

	case "ProjectObjectType.objectType":
		if e.complexity.ProjectObjectType.ObjectType == nil {
			break
		}

		return e.complexity.ProjectObjectType.ObjectType(childComplexity), true

	case "ProjectObjectType.orgId":
		if e.complexity.ProjectObjectType.OrgID == nil {
			break
		}

		return e.complexity.ProjectObjectType.OrgID(childComplexity), true

	case "ProjectObjectType.preCode":
		if e.complexity.ProjectObjectType.PreCode == nil {
			break
		}

		return e.complexity.ProjectObjectType.PreCode(childComplexity), true

	case "ProjectObjectType.remark":
		if e.complexity.ProjectObjectType.Remark == nil {
			break
		}

		return e.complexity.ProjectObjectType.Remark(childComplexity), true

	case "ProjectObjectType.sort":
		if e.complexity.ProjectObjectType.Sort == nil {
			break
		}

		return e.complexity.ProjectObjectType.Sort(childComplexity), true

	case "ProjectObjectType.status":
		if e.complexity.ProjectObjectType.Status == nil {
			break
		}

		return e.complexity.ProjectObjectType.Status(childComplexity), true

	case "ProjectObjectType.updateTime":
		if e.complexity.ProjectObjectType.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectObjectType.UpdateTime(childComplexity), true

	case "ProjectObjectType.updator":
		if e.complexity.ProjectObjectType.Updator == nil {
			break
		}

		return e.complexity.ProjectObjectType.Updator(childComplexity), true

	case "ProjectObjectType.version":
		if e.complexity.ProjectObjectType.Version == nil {
			break
		}

		return e.complexity.ProjectObjectType.Version(childComplexity), true

	case "ProjectObjectTypeList.list":
		if e.complexity.ProjectObjectTypeList.List == nil {
			break
		}

		return e.complexity.ProjectObjectTypeList.List(childComplexity), true

	case "ProjectObjectTypeList.total":
		if e.complexity.ProjectObjectTypeList.Total == nil {
			break
		}

		return e.complexity.ProjectObjectTypeList.Total(childComplexity), true

	case "ProjectObjectTypeRestInfo.id":
		if e.complexity.ProjectObjectTypeRestInfo.ID == nil {
			break
		}

		return e.complexity.ProjectObjectTypeRestInfo.ID(childComplexity), true

	case "ProjectObjectTypeRestInfo.langCode":
		if e.complexity.ProjectObjectTypeRestInfo.LangCode == nil {
			break
		}

		return e.complexity.ProjectObjectTypeRestInfo.LangCode(childComplexity), true

	case "ProjectObjectTypeRestInfo.name":
		if e.complexity.ProjectObjectTypeRestInfo.Name == nil {
			break
		}

		return e.complexity.ProjectObjectTypeRestInfo.Name(childComplexity), true

	case "ProjectObjectTypeRestInfo.objectType":
		if e.complexity.ProjectObjectTypeRestInfo.ObjectType == nil {
			break
		}

		return e.complexity.ProjectObjectTypeRestInfo.ObjectType(childComplexity), true

	case "ProjectObjectTypeWithProjectList.list":
		if e.complexity.ProjectObjectTypeWithProjectList.List == nil {
			break
		}

		return e.complexity.ProjectObjectTypeWithProjectList.List(childComplexity), true

	case "ProjectStatisticsResp.iterationTotal":
		if e.complexity.ProjectStatisticsResp.IterationTotal == nil {
			break
		}

		return e.complexity.ProjectStatisticsResp.IterationTotal(childComplexity), true

	case "ProjectStatisticsResp.memberTotal":
		if e.complexity.ProjectStatisticsResp.MemberTotal == nil {
			break
		}

		return e.complexity.ProjectStatisticsResp.MemberTotal(childComplexity), true

	case "ProjectStatisticsResp.taskTotal":
		if e.complexity.ProjectStatisticsResp.TaskTotal == nil {
			break
		}

		return e.complexity.ProjectStatisticsResp.TaskTotal(childComplexity), true

	case "ProjectSupportObjectTypeListResp.iterationSupportList":
		if e.complexity.ProjectSupportObjectTypeListResp.IterationSupportList == nil {
			break
		}

		return e.complexity.ProjectSupportObjectTypeListResp.IterationSupportList(childComplexity), true

	case "ProjectSupportObjectTypeListResp.projectSupportList":
		if e.complexity.ProjectSupportObjectTypeListResp.ProjectSupportList == nil {
			break
		}

		return e.complexity.ProjectSupportObjectTypeListResp.ProjectSupportList(childComplexity), true

	case "ProjectType.createTime":
		if e.complexity.ProjectType.CreateTime == nil {
			break
		}

		return e.complexity.ProjectType.CreateTime(childComplexity), true

	case "ProjectType.creator":
		if e.complexity.ProjectType.Creator == nil {
			break
		}

		return e.complexity.ProjectType.Creator(childComplexity), true

	case "ProjectType.defaultProcessId":
		if e.complexity.ProjectType.DefaultProcessID == nil {
			break
		}

		return e.complexity.ProjectType.DefaultProcessID(childComplexity), true

	case "ProjectType.id":
		if e.complexity.ProjectType.ID == nil {
			break
		}

		return e.complexity.ProjectType.ID(childComplexity), true

	case "ProjectType.isReadonly":
		if e.complexity.ProjectType.IsReadonly == nil {
			break
		}

		return e.complexity.ProjectType.IsReadonly(childComplexity), true

	case "ProjectType.langCode":
		if e.complexity.ProjectType.LangCode == nil {
			break
		}

		return e.complexity.ProjectType.LangCode(childComplexity), true

	case "ProjectType.name":
		if e.complexity.ProjectType.Name == nil {
			break
		}

		return e.complexity.ProjectType.Name(childComplexity), true

	case "ProjectType.orgId":
		if e.complexity.ProjectType.OrgID == nil {
			break
		}

		return e.complexity.ProjectType.OrgID(childComplexity), true

	case "ProjectType.remark":
		if e.complexity.ProjectType.Remark == nil {
			break
		}

		return e.complexity.ProjectType.Remark(childComplexity), true

	case "ProjectType.sort":
		if e.complexity.ProjectType.Sort == nil {
			break
		}

		return e.complexity.ProjectType.Sort(childComplexity), true

	case "ProjectType.status":
		if e.complexity.ProjectType.Status == nil {
			break
		}

		return e.complexity.ProjectType.Status(childComplexity), true

	case "ProjectType.updateTime":
		if e.complexity.ProjectType.UpdateTime == nil {
			break
		}

		return e.complexity.ProjectType.UpdateTime(childComplexity), true

	case "ProjectType.updator":
		if e.complexity.ProjectType.Updator == nil {
			break
		}

		return e.complexity.ProjectType.Updator(childComplexity), true

	case "ProjectTypeList.list":
		if e.complexity.ProjectTypeList.List == nil {
			break
		}

		return e.complexity.ProjectTypeList.List(childComplexity), true

	case "ProjectTypeList.total":
		if e.complexity.ProjectTypeList.Total == nil {
			break
		}

		return e.complexity.ProjectTypeList.Total(childComplexity), true

	case "ProjectUserListResp.list":
		if e.complexity.ProjectUserListResp.List == nil {
			break
		}

		return e.complexity.ProjectUserListResp.List(childComplexity), true

	case "ProjectUserListResp.total":
		if e.complexity.ProjectUserListResp.Total == nil {
			break
		}

		return e.complexity.ProjectUserListResp.Total(childComplexity), true

	case "Query.areaLinkageList":
		if e.complexity.Query.AreaLinkageList == nil {
			break
		}

		args, err := ec.field_Query_areaLinkageList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AreaLinkageList(childComplexity, args["input"].(vo.AreaLinkageListReq)), true

	case "Query.departmentMembers":
		if e.complexity.Query.DepartmentMembers == nil {
			break
		}

		args, err := ec.field_Query_departmentMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentMembers(childComplexity, args["params"].(vo.DepartmentMemberListReq)), true

	case "Query.departments":
		if e.complexity.Query.Departments == nil {
			break
		}

		args, err := ec.field_Query_departments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Departments(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentListReq)), true

	case "Query.exportData":
		if e.complexity.Query.ExportData == nil {
			break
		}

		args, err := ec.field_Query_exportData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportData(childComplexity, args["projectId"].(int64)), true

	case "Query.exportIssueTemplate":
		if e.complexity.Query.ExportIssueTemplate == nil {
			break
		}

		args, err := ec.field_Query_exportIssueTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportIssueTemplate(childComplexity, args["projectId"].(int64)), true

	case "Query.getBaseConfig":
		if e.complexity.Query.GetBaseConfig == nil {
			break
		}

		return e.complexity.Query.GetBaseConfig(childComplexity), true

	case "Query.getInviteCode":
		if e.complexity.Query.GetInviteCode == nil {
			break
		}

		args, err := ec.field_Query_getInviteCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInviteCode(childComplexity, args["input"].(*vo.GetInviteCodeReq)), true

	case "Query.getInviteInfo":
		if e.complexity.Query.GetInviteInfo == nil {
			break
		}

		args, err := ec.field_Query_getInviteInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetInviteInfo(childComplexity, args["input"].(vo.GetInviteInfoReq)), true

	case "Query.getMQTTChannelKey":
		if e.complexity.Query.GetMQTTChannelKey == nil {
			break
		}

		args, err := ec.field_Query_getMQTTChannelKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMQTTChannelKey(childComplexity, args["input"].(vo.GetMQTTChannelKeyReq)), true

	case "Query.getOssPostPolicy":
		if e.complexity.Query.GetOssPostPolicy == nil {
			break
		}

		args, err := ec.field_Query_getOssPostPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOssPostPolicy(childComplexity, args["input"].(vo.OssPostPolicyReq)), true

	case "Query.getOssSignUrl":
		if e.complexity.Query.GetOssSignURL == nil {
			break
		}

		args, err := ec.field_Query_getOssSignUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOssSignURL(childComplexity, args["input"].(vo.OssApplySignURLReq)), true

	case "Query.getPersonalPermissionInfo":
		if e.complexity.Query.GetPersonalPermissionInfo == nil {
			break
		}

		args, err := ec.field_Query_getPersonalPermissionInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPersonalPermissionInfo(childComplexity, args["projectId"].(*int64), args["issueId"].(*int64)), true

	case "Query.homeIssues":
		if e.complexity.Query.HomeIssues == nil {
			break
		}

		args, err := ec.field_Query_homeIssues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HomeIssues(childComplexity, args["page"].(int), args["size"].(int), args["input"].(*vo.HomeIssueInfoReq)), true

	case "Query.hotTagList":
		if e.complexity.Query.HotTagList == nil {
			break
		}

		args, err := ec.field_Query_hotTagList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HotTagList(childComplexity, args["projectId"].(int64)), true

	case "Query.industryList":
		if e.complexity.Query.IndustryList == nil {
			break
		}

		return e.complexity.Query.IndustryList(childComplexity), true

	case "Query.issueAndProjectCountStat":
		if e.complexity.Query.IssueAndProjectCountStat == nil {
			break
		}

		return e.complexity.Query.IssueAndProjectCountStat(childComplexity), true

	case "Query.issueAssignRank":
		if e.complexity.Query.IssueAssignRank == nil {
			break
		}

		args, err := ec.field_Query_issueAssignRank_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueAssignRank(childComplexity, args["input"].(vo.IssueAssignRankReq)), true

	case "Query.issueDailyPersonalWorkCompletionStat":
		if e.complexity.Query.IssueDailyPersonalWorkCompletionStat == nil {
			break
		}

		args, err := ec.field_Query_issueDailyPersonalWorkCompletionStat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueDailyPersonalWorkCompletionStat(childComplexity, args["input"].(*vo.IssueDailyPersonalWorkCompletionStatReq)), true

	case "Query.issueInfo":
		if e.complexity.Query.IssueInfo == nil {
			break
		}

		args, err := ec.field_Query_issueInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueInfo(childComplexity, args["issueId"].(int64)), true

	case "Query.issueObjectTypes":
		if e.complexity.Query.IssueObjectTypes == nil {
			break
		}

		args, err := ec.field_Query_issueObjectTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueObjectTypes(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IssueObjectTypesReq)), true

	case "Query.issueReport":
		if e.complexity.Query.IssueReport == nil {
			break
		}

		args, err := ec.field_Query_issueReport_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueReport(childComplexity, args["reportType"].(int64)), true

	case "Query.issueReportDetail":
		if e.complexity.Query.IssueReportDetail == nil {
			break
		}

		args, err := ec.field_Query_issueReportDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueReportDetail(childComplexity, args["shareId"].(string)), true

	case "Query.issueResources":
		if e.complexity.Query.IssueResources == nil {
			break
		}

		args, err := ec.field_Query_issueResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueResources(childComplexity, args["page"].(*int), args["size"].(*int), args["input"].(*vo.GetIssueResourcesReq)), true

	case "Query.issueRestInfos":
		if e.complexity.Query.IssueRestInfos == nil {
			break
		}

		args, err := ec.field_Query_issueRestInfos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueRestInfos(childComplexity, args["page"].(int), args["size"].(int), args["input"].(*vo.IssueRestInfoReq)), true

	case "Query.issueSources":
		if e.complexity.Query.IssueSources == nil {
			break
		}

		args, err := ec.field_Query_issueSources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueSources(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IssueSourcesReq)), true

	case "Query.issueStatusTypeStat":
		if e.complexity.Query.IssueStatusTypeStat == nil {
			break
		}

		args, err := ec.field_Query_issueStatusTypeStat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueStatusTypeStat(childComplexity, args["input"].(*vo.IssueStatusTypeStatReq)), true

	case "Query.issueStatusTypeStatDetail":
		if e.complexity.Query.IssueStatusTypeStatDetail == nil {
			break
		}

		args, err := ec.field_Query_issueStatusTypeStatDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IssueStatusTypeStatDetail(childComplexity, args["input"].(*vo.IssueStatusTypeStatReq)), true

	case "Query.iterationInfo":
		if e.complexity.Query.IterationInfo == nil {
			break
		}

		args, err := ec.field_Query_iterationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IterationInfo(childComplexity, args["input"].(vo.IterationInfoReq)), true

	case "Query.iterationStats":
		if e.complexity.Query.IterationStats == nil {
			break
		}

		args, err := ec.field_Query_iterationStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IterationStats(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.IterationStatReq)), true

	case "Query.iterationStatusTypeStat":
		if e.complexity.Query.IterationStatusTypeStat == nil {
			break
		}

		args, err := ec.field_Query_iterationStatusTypeStat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IterationStatusTypeStat(childComplexity, args["input"].(*vo.IterationStatusTypeStatReq)), true

	case "Query.iterations":
		if e.complexity.Query.Iterations == nil {
			break
		}

		args, err := ec.field_Query_iterations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Iterations(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IterationListReq)), true

	case "Query.noticeList":
		if e.complexity.Query.NoticeList == nil {
			break
		}

		args, err := ec.field_Query_noticeList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NoticeList(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.NoticeListReq)), true

	case "Query.orgProjectMember":
		if e.complexity.Query.OrgProjectMember == nil {
			break
		}

		args, err := ec.field_Query_orgProjectMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgProjectMember(childComplexity, args["input"].(vo.OrgProjectMemberReq)), true

	case "Query.orgRoleList":
		if e.complexity.Query.OrgRoleList == nil {
			break
		}

		return e.complexity.Query.OrgRoleList(childComplexity), true

	case "Query.orgUserList":
		if e.complexity.Query.OrgUserList == nil {
			break
		}

		args, err := ec.field_Query_orgUserList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgUserList(childComplexity, args["page"].(*int), args["size"].(*int), args["input"].(vo.OrgUserListReq)), true

	case "Query.organizationInfo":
		if e.complexity.Query.OrganizationInfo == nil {
			break
		}

		args, err := ec.field_Query_organizationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationInfo(childComplexity, args["input"].(vo.OrganizationInfoReq)), true

	case "Query.permissionOperationList":
		if e.complexity.Query.PermissionOperationList == nil {
			break
		}

		args, err := ec.field_Query_permissionOperationList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PermissionOperationList(childComplexity, args["roleId"].(int64), args["projectId"].(*int64)), true

	case "Query.personalInfo":
		if e.complexity.Query.PersonalInfo == nil {
			break
		}

		return e.complexity.Query.PersonalInfo(childComplexity), true

	case "Query.prioritys":
		if e.complexity.Query.Prioritys == nil {
			break
		}

		args, err := ec.field_Query_prioritys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Prioritys(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.PriorityListReq)), true

	case "Query.processStatuss":
		if e.complexity.Query.ProcessStatuss == nil {
			break
		}

		args, err := ec.field_Query_processStatuss_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProcessStatuss(childComplexity, args["page"].(*int), args["size"].(*int)), true

	case "Query.projectAttachment":
		if e.complexity.Query.ProjectAttachment == nil {
			break
		}

		args, err := ec.field_Query_projectAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectAttachment(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectAttachmentReq)), true

	case "Query.projectDayStats":
		if e.complexity.Query.ProjectDayStats == nil {
			break
		}

		args, err := ec.field_Query_projectDayStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectDayStats(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectDayStatReq)), true

	case "Query.projectDetail":
		if e.complexity.Query.ProjectDetail == nil {
			break
		}

		args, err := ec.field_Query_projectDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectDetail(childComplexity, args["projectId"].(int64)), true

	case "Query.projectFolder":
		if e.complexity.Query.ProjectFolder == nil {
			break
		}

		args, err := ec.field_Query_projectFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectFolder(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectFolderReq)), true

	case "Query.projectInfo":
		if e.complexity.Query.ProjectInfo == nil {
			break
		}

		args, err := ec.field_Query_projectInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectInfo(childComplexity, args["input"].(vo.ProjectInfoReq)), true

	case "Query.projectIssueRelatedStatus":
		if e.complexity.Query.ProjectIssueRelatedStatus == nil {
			break
		}

		args, err := ec.field_Query_projectIssueRelatedStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectIssueRelatedStatus(childComplexity, args["input"].(vo.ProjectIssueRelatedStatusReq)), true

	case "Query.projectObjectTypes":
		if e.complexity.Query.ProjectObjectTypes == nil {
			break
		}

		args, err := ec.field_Query_projectObjectTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectObjectTypes(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectObjectTypesReq)), true

	case "Query.projectObjectTypesWithProject":
		if e.complexity.Query.ProjectObjectTypesWithProject == nil {
			break
		}

		args, err := ec.field_Query_projectObjectTypesWithProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectObjectTypesWithProject(childComplexity, args["projectId"].(int64)), true

	case "Query.projectResource":
		if e.complexity.Query.ProjectResource == nil {
			break
		}

		args, err := ec.field_Query_projectResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectResource(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectResourceReq)), true

	case "Query.projectRoleList":
		if e.complexity.Query.ProjectRoleList == nil {
			break
		}

		args, err := ec.field_Query_projectRoleList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectRoleList(childComplexity, args["projectId"].(int64)), true

	case "Query.projectStatistics":
		if e.complexity.Query.ProjectStatistics == nil {
			break
		}

		args, err := ec.field_Query_projectStatistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectStatistics(childComplexity, args["id"].(int64)), true

	case "Query.projectSupportObjectTypes":
		if e.complexity.Query.ProjectSupportObjectTypes == nil {
			break
		}

		args, err := ec.field_Query_projectSupportObjectTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectSupportObjectTypes(childComplexity, args["input"].(vo.ProjectSupportObjectTypeListReq)), true

	case "Query.projectTypes":
		if e.complexity.Query.ProjectTypes == nil {
			break
		}

		return e.complexity.Query.ProjectTypes(childComplexity), true

	case "Query.projectUserList":
		if e.complexity.Query.ProjectUserList == nil {
			break
		}

		args, err := ec.field_Query_projectUserList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectUserList(childComplexity, args["page"].(*int), args["size"].(*int), args["input"].(vo.ProjectUserListReq)), true

	case "Query.projects":
		if e.complexity.Query.Projects == nil {
			break
		}

		args, err := ec.field_Query_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Projects(childComplexity, args["page"].(int), args["size"].(int), args["params"].(map[string]interface{}), args["order"].([]*string), args["input"].(*vo.ProjectsReq)), true

	case "Query.relatedIssueList":
		if e.complexity.Query.RelatedIssueList == nil {
			break
		}

		args, err := ec.field_Query_relatedIssueList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RelatedIssueList(childComplexity, args["input"].(vo.RelatedIssueListReq)), true

	case "Query.tagDefaultStyle":
		if e.complexity.Query.TagDefaultStyle == nil {
			break
		}

		return e.complexity.Query.TagDefaultStyle(childComplexity), true

	case "Query.tagList":
		if e.complexity.Query.TagList == nil {
			break
		}

		args, err := ec.field_Query_tagList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TagList(childComplexity, args["page"].(*int), args["size"].(*int), args["params"].(vo.TagListReq)), true

	case "Query.trendList":
		if e.complexity.Query.TrendList == nil {
			break
		}

		args, err := ec.field_Query_trendList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrendList(childComplexity, args["input"].(*vo.TrendReq)), true

	case "Query.unreadNoticeCount":
		if e.complexity.Query.UnreadNoticeCount == nil {
			break
		}

		return e.complexity.Query.UnreadNoticeCount(childComplexity), true

	case "Query.userConfigInfo":
		if e.complexity.Query.UserConfigInfo == nil {
			break
		}

		return e.complexity.Query.UserConfigInfo(childComplexity), true

	case "Query.userId":
		if e.complexity.Query.UserID == nil {
			break
		}

		args, err := ec.field_Query_userId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserID(childComplexity, args["input"].(string)), true

	case "Query.userIds":
		if e.complexity.Query.UserIds == nil {
			break
		}

		args, err := ec.field_Query_userIds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserIds(childComplexity, args["input"].([]string)), true

	case "Query.userOrganizationList":
		if e.complexity.Query.UserOrganizationList == nil {
			break
		}

		return e.complexity.Query.UserOrganizationList(childComplexity), true

	case "QuitResult.isQuitted":
		if e.complexity.QuitResult.IsQuitted == nil {
			break
		}

		return e.complexity.QuitResult.IsQuitted(childComplexity), true

	case "RelationIssue.id":
		if e.complexity.RelationIssue.ID == nil {
			break
		}

		return e.complexity.RelationIssue.ID(childComplexity), true

	case "RelationIssue.title":
		if e.complexity.RelationIssue.Title == nil {
			break
		}

		return e.complexity.RelationIssue.Title(childComplexity), true

	case "RelationType.avatar":
		if e.complexity.RelationType.Avatar == nil {
			break
		}

		return e.complexity.RelationType.Avatar(childComplexity), true

	case "RelationType.name":
		if e.complexity.RelationType.Name == nil {
			break
		}

		return e.complexity.RelationType.Name(childComplexity), true

	case "RelationType.outOrgUserId":
		if e.complexity.RelationType.OutOrgUserID == nil {
			break
		}

		return e.complexity.RelationType.OutOrgUserID(childComplexity), true

	case "RelationType.outUserId":
		if e.complexity.RelationType.OutUserID == nil {
			break
		}

		return e.complexity.RelationType.OutUserID(childComplexity), true

	case "RelationType.projectId":
		if e.complexity.RelationType.ProjectID == nil {
			break
		}

		return e.complexity.RelationType.ProjectID(childComplexity), true

	case "RelationType.relationType":
		if e.complexity.RelationType.RelationType == nil {
			break
		}

		return e.complexity.RelationType.RelationType(childComplexity), true

	case "RelationType.userId":
		if e.complexity.RelationType.UserID == nil {
			break
		}

		return e.complexity.RelationType.UserID(childComplexity), true

	case "Resource.createTime":
		if e.complexity.Resource.CreateTime == nil {
			break
		}

		return e.complexity.Resource.CreateTime(childComplexity), true

	case "Resource.creator":
		if e.complexity.Resource.Creator == nil {
			break
		}

		return e.complexity.Resource.Creator(childComplexity), true

	case "Resource.creatorName":
		if e.complexity.Resource.CreatorName == nil {
			break
		}

		return e.complexity.Resource.CreatorName(childComplexity), true

	case "Resource.fileType":
		if e.complexity.Resource.FileType == nil {
			break
		}

		return e.complexity.Resource.FileType(childComplexity), true

	case "Resource.host":
		if e.complexity.Resource.Host == nil {
			break
		}

		return e.complexity.Resource.Host(childComplexity), true

	case "Resource.id":
		if e.complexity.Resource.ID == nil {
			break
		}

		return e.complexity.Resource.ID(childComplexity), true

	case "Resource.isDelete":
		if e.complexity.Resource.IsDelete == nil {
			break
		}

		return e.complexity.Resource.IsDelete(childComplexity), true

	case "Resource.md5":
		if e.complexity.Resource.Md5 == nil {
			break
		}

		return e.complexity.Resource.Md5(childComplexity), true

	case "Resource.name":
		if e.complexity.Resource.Name == nil {
			break
		}

		return e.complexity.Resource.Name(childComplexity), true

	case "Resource.orgId":
		if e.complexity.Resource.OrgID == nil {
			break
		}

		return e.complexity.Resource.OrgID(childComplexity), true

	case "Resource.path":
		if e.complexity.Resource.Path == nil {
			break
		}

		return e.complexity.Resource.Path(childComplexity), true

	case "Resource.pathCompressed":
		if e.complexity.Resource.PathCompressed == nil {
			break
		}

		return e.complexity.Resource.PathCompressed(childComplexity), true

	case "Resource.size":
		if e.complexity.Resource.Size == nil {
			break
		}

		return e.complexity.Resource.Size(childComplexity), true

	case "Resource.suffix":
		if e.complexity.Resource.Suffix == nil {
			break
		}

		return e.complexity.Resource.Suffix(childComplexity), true

	case "Resource.type":
		if e.complexity.Resource.Type == nil {
			break
		}

		return e.complexity.Resource.Type(childComplexity), true

	case "Resource.updateTime":
		if e.complexity.Resource.UpdateTime == nil {
			break
		}

		return e.complexity.Resource.UpdateTime(childComplexity), true

	case "Resource.updator":
		if e.complexity.Resource.Updator == nil {
			break
		}

		return e.complexity.Resource.Updator(childComplexity), true

	case "Resource.version":
		if e.complexity.Resource.Version == nil {
			break
		}

		return e.complexity.Resource.Version(childComplexity), true

	case "ResourceInfo.name":
		if e.complexity.ResourceInfo.Name == nil {
			break
		}

		return e.complexity.ResourceInfo.Name(childComplexity), true

	case "ResourceInfo.size":
		if e.complexity.ResourceInfo.Size == nil {
			break
		}

		return e.complexity.ResourceInfo.Size(childComplexity), true

	case "ResourceInfo.suffix":
		if e.complexity.ResourceInfo.Suffix == nil {
			break
		}

		return e.complexity.ResourceInfo.Suffix(childComplexity), true

	case "ResourceInfo.url":
		if e.complexity.ResourceInfo.URL == nil {
			break
		}

		return e.complexity.ResourceInfo.URL(childComplexity), true

	case "ResourceInfo.uploadTime":
		if e.complexity.ResourceInfo.UploadTime == nil {
			break
		}

		return e.complexity.ResourceInfo.UploadTime(childComplexity), true

	case "ResourceList.list":
		if e.complexity.ResourceList.List == nil {
			break
		}

		return e.complexity.ResourceList.List(childComplexity), true

	case "ResourceList.total":
		if e.complexity.ResourceList.Total == nil {
			break
		}

		return e.complexity.ResourceList.Total(childComplexity), true

	case "Role.createTime":
		if e.complexity.Role.CreateTime == nil {
			break
		}

		return e.complexity.Role.CreateTime(childComplexity), true

	case "Role.creator":
		if e.complexity.Role.Creator == nil {
			break
		}

		return e.complexity.Role.Creator(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.isDefault":
		if e.complexity.Role.IsDefault == nil {
			break
		}

		return e.complexity.Role.IsDefault(childComplexity), true

	case "Role.isModifyPermission":
		if e.complexity.Role.IsModifyPermission == nil {
			break
		}

		return e.complexity.Role.IsModifyPermission(childComplexity), true

	case "Role.isReadonly":
		if e.complexity.Role.IsReadonly == nil {
			break
		}

		return e.complexity.Role.IsReadonly(childComplexity), true

	case "Role.langCode":
		if e.complexity.Role.LangCode == nil {
			break
		}

		return e.complexity.Role.LangCode(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.orgId":
		if e.complexity.Role.OrgID == nil {
			break
		}

		return e.complexity.Role.OrgID(childComplexity), true

	case "Role.remark":
		if e.complexity.Role.Remark == nil {
			break
		}

		return e.complexity.Role.Remark(childComplexity), true

	case "Role.roleGroupId":
		if e.complexity.Role.RoleGroupID == nil {
			break
		}

		return e.complexity.Role.RoleGroupID(childComplexity), true

	case "Role.status":
		if e.complexity.Role.Status == nil {
			break
		}

		return e.complexity.Role.Status(childComplexity), true

	case "Role.updateTime":
		if e.complexity.Role.UpdateTime == nil {
			break
		}

		return e.complexity.Role.UpdateTime(childComplexity), true

	case "Role.updator":
		if e.complexity.Role.Updator == nil {
			break
		}

		return e.complexity.Role.Updator(childComplexity), true

	case "StatCommon.count":
		if e.complexity.StatCommon.Count == nil {
			break
		}

		return e.complexity.StatCommon.Count(childComplexity), true

	case "StatCommon.name":
		if e.complexity.StatCommon.Name == nil {
			break
		}

		return e.complexity.StatCommon.Name(childComplexity), true

	case "StatData.issueCount":
		if e.complexity.StatData.IssueCount == nil {
			break
		}

		return e.complexity.StatData.IssueCount(childComplexity), true

	case "StatData.issueEndCount":
		if e.complexity.StatData.IssueEndCount == nil {
			break
		}

		return e.complexity.StatData.IssueEndCount(childComplexity), true

	case "StatData.issueRunningCount":
		if e.complexity.StatData.IssueRunningCount == nil {
			break
		}

		return e.complexity.StatData.IssueRunningCount(childComplexity), true

	case "StatData.issueWaitCount":
		if e.complexity.StatData.IssueWaitCount == nil {
			break
		}

		return e.complexity.StatData.IssueWaitCount(childComplexity), true

	case "StatData.storyPointCount":
		if e.complexity.StatData.StoryPointCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointCount(childComplexity), true

	case "StatData.storyPointEndCount":
		if e.complexity.StatData.StoryPointEndCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointEndCount(childComplexity), true

	case "StatData.storyPointRunningCount":
		if e.complexity.StatData.StoryPointRunningCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointRunningCount(childComplexity), true

	case "StatData.storyPointWaitCount":
		if e.complexity.StatData.StoryPointWaitCount == nil {
			break
		}

		return e.complexity.StatData.StoryPointWaitCount(childComplexity), true

	case "StatExtResp.issue":
		if e.complexity.StatExtResp.Issue == nil {
			break
		}

		return e.complexity.StatExtResp.Issue(childComplexity), true

	case "StatIssueExt.data":
		if e.complexity.StatIssueExt.Data == nil {
			break
		}

		return e.complexity.StatIssueExt.Data(childComplexity), true

	case "StypeList.list":
		if e.complexity.StypeList.List == nil {
			break
		}

		return e.complexity.StypeList.List(childComplexity), true

	case "Tag.bgStyle":
		if e.complexity.Tag.BgStyle == nil {
			break
		}

		return e.complexity.Tag.BgStyle(childComplexity), true

	case "Tag.createTime":
		if e.complexity.Tag.CreateTime == nil {
			break
		}

		return e.complexity.Tag.CreateTime(childComplexity), true

	case "Tag.creator":
		if e.complexity.Tag.Creator == nil {
			break
		}

		return e.complexity.Tag.Creator(childComplexity), true

	case "Tag.fontStyle":
		if e.complexity.Tag.FontStyle == nil {
			break
		}

		return e.complexity.Tag.FontStyle(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.namePinyin":
		if e.complexity.Tag.NamePinyin == nil {
			break
		}

		return e.complexity.Tag.NamePinyin(childComplexity), true

	case "Tag.orgId":
		if e.complexity.Tag.OrgID == nil {
			break
		}

		return e.complexity.Tag.OrgID(childComplexity), true

	case "Tag.projectId":
		if e.complexity.Tag.ProjectID == nil {
			break
		}

		return e.complexity.Tag.ProjectID(childComplexity), true

	case "Tag.usedNum":
		if e.complexity.Tag.UsedNum == nil {
			break
		}

		return e.complexity.Tag.UsedNum(childComplexity), true

	case "TagList.list":
		if e.complexity.TagList.List == nil {
			break
		}

		return e.complexity.TagList.List(childComplexity), true

	case "TagList.total":
		if e.complexity.TagList.Total == nil {
			break
		}

		return e.complexity.TagList.Total(childComplexity), true

	case "Trend.comment":
		if e.complexity.Trend.Comment == nil {
			break
		}

		return e.complexity.Trend.Comment(childComplexity), true

	case "Trend.createTime":
		if e.complexity.Trend.CreateTime == nil {
			break
		}

		return e.complexity.Trend.CreateTime(childComplexity), true

	case "Trend.creator":
		if e.complexity.Trend.Creator == nil {
			break
		}

		return e.complexity.Trend.Creator(childComplexity), true

	case "Trend.creatorInfo":
		if e.complexity.Trend.CreatorInfo == nil {
			break
		}

		return e.complexity.Trend.CreatorInfo(childComplexity), true

	case "Trend.ext":
		if e.complexity.Trend.Ext == nil {
			break
		}

		return e.complexity.Trend.Ext(childComplexity), true

	case "Trend.extension":
		if e.complexity.Trend.Extension == nil {
			break
		}

		return e.complexity.Trend.Extension(childComplexity), true

	case "Trend.id":
		if e.complexity.Trend.ID == nil {
			break
		}

		return e.complexity.Trend.ID(childComplexity), true

	case "Trend.module1":
		if e.complexity.Trend.Module1 == nil {
			break
		}

		return e.complexity.Trend.Module1(childComplexity), true

	case "Trend.module2":
		if e.complexity.Trend.Module2 == nil {
			break
		}

		return e.complexity.Trend.Module2(childComplexity), true

	case "Trend.module2Id":
		if e.complexity.Trend.Module2Id == nil {
			break
		}

		return e.complexity.Trend.Module2Id(childComplexity), true

	case "Trend.module3":
		if e.complexity.Trend.Module3 == nil {
			break
		}

		return e.complexity.Trend.Module3(childComplexity), true

	case "Trend.module3Id":
		if e.complexity.Trend.Module3Id == nil {
			break
		}

		return e.complexity.Trend.Module3Id(childComplexity), true

	case "Trend.newValue":
		if e.complexity.Trend.NewValue == nil {
			break
		}

		return e.complexity.Trend.NewValue(childComplexity), true

	case "Trend.oldValue":
		if e.complexity.Trend.OldValue == nil {
			break
		}

		return e.complexity.Trend.OldValue(childComplexity), true

	case "Trend.operCode":
		if e.complexity.Trend.OperCode == nil {
			break
		}

		return e.complexity.Trend.OperCode(childComplexity), true

	case "Trend.operObjId":
		if e.complexity.Trend.OperObjID == nil {
			break
		}

		return e.complexity.Trend.OperObjID(childComplexity), true

	case "Trend.operObjName":
		if e.complexity.Trend.OperObjName == nil {
			break
		}

		return e.complexity.Trend.OperObjName(childComplexity), true

	case "Trend.operObjProperty":
		if e.complexity.Trend.OperObjProperty == nil {
			break
		}

		return e.complexity.Trend.OperObjProperty(childComplexity), true

	case "Trend.operObjType":
		if e.complexity.Trend.OperObjType == nil {
			break
		}

		return e.complexity.Trend.OperObjType(childComplexity), true

	case "Trend.orgId":
		if e.complexity.Trend.OrgID == nil {
			break
		}

		return e.complexity.Trend.OrgID(childComplexity), true

	case "Trend.relationObjId":
		if e.complexity.Trend.RelationObjID == nil {
			break
		}

		return e.complexity.Trend.RelationObjID(childComplexity), true

	case "Trend.relationObjType":
		if e.complexity.Trend.RelationObjType == nil {
			break
		}

		return e.complexity.Trend.RelationObjType(childComplexity), true

	case "Trend.relationType":
		if e.complexity.Trend.RelationType == nil {
			break
		}

		return e.complexity.Trend.RelationType(childComplexity), true

	case "TrendExtension.changeList":
		if e.complexity.TrendExtension.ChangeList == nil {
			break
		}

		return e.complexity.TrendExtension.ChangeList(childComplexity), true

	case "TrendExtension.issueType":
		if e.complexity.TrendExtension.IssueType == nil {
			break
		}

		return e.complexity.TrendExtension.IssueType(childComplexity), true

	case "TrendExtension.memberInfo":
		if e.complexity.TrendExtension.MemberInfo == nil {
			break
		}

		return e.complexity.TrendExtension.MemberInfo(childComplexity), true

	case "TrendExtension.ObjName":
		if e.complexity.TrendExtension.ObjName == nil {
			break
		}

		return e.complexity.TrendExtension.ObjName(childComplexity), true

	case "TrendExtension.relationIssue":
		if e.complexity.TrendExtension.RelationIssue == nil {
			break
		}

		return e.complexity.TrendExtension.RelationIssue(childComplexity), true

	case "TrendExtension.resourceInfo":
		if e.complexity.TrendExtension.ResourceInfo == nil {
			break
		}

		return e.complexity.TrendExtension.ResourceInfo(childComplexity), true

	case "TrendsList.lastTrendId":
		if e.complexity.TrendsList.LastTrendID == nil {
			break
		}

		return e.complexity.TrendsList.LastTrendID(childComplexity), true

	case "TrendsList.list":
		if e.complexity.TrendsList.List == nil {
			break
		}

		return e.complexity.TrendsList.List(childComplexity), true

	case "TrendsList.page":
		if e.complexity.TrendsList.Page == nil {
			break
		}

		return e.complexity.TrendsList.Page(childComplexity), true

	case "TrendsList.size":
		if e.complexity.TrendsList.Size == nil {
			break
		}

		return e.complexity.TrendsList.Size(childComplexity), true

	case "TrendsList.total":
		if e.complexity.TrendsList.Total == nil {
			break
		}

		return e.complexity.TrendsList.Total(childComplexity), true

	case "UpdateIssueResp.id":
		if e.complexity.UpdateIssueResp.ID == nil {
			break
		}

		return e.complexity.UpdateIssueResp.ID(childComplexity), true

	case "UpdateProjectFolderResp.folderId":
		if e.complexity.UpdateProjectFolderResp.FolderID == nil {
			break
		}

		return e.complexity.UpdateProjectFolderResp.FolderID(childComplexity), true

	case "UpdateProjectResourceFolderResp.resourceIds":
		if e.complexity.UpdateProjectResourceFolderResp.ResourceIds == nil {
			break
		}

		return e.complexity.UpdateProjectResourceFolderResp.ResourceIds(childComplexity), true

	case "UpdateUserConfigResp.id":
		if e.complexity.UpdateUserConfigResp.ID == nil {
			break
		}

		return e.complexity.UpdateUserConfigResp.ID(childComplexity), true

	case "UserConfig.attentionRangeStatus":
		if e.complexity.UserConfig.AttentionRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.AttentionRangeStatus(childComplexity), true

	case "UserConfig.commentAtMessageStatus":
		if e.complexity.UserConfig.CommentAtMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.CommentAtMessageStatus(childComplexity), true

	case "UserConfig.createRangeStatus":
		if e.complexity.UserConfig.CreateRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.CreateRangeStatus(childComplexity), true

	case "UserConfig.dailyProjectReportMessageStatus":
		if e.complexity.UserConfig.DailyProjectReportMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.DailyProjectReportMessageStatus(childComplexity), true

	case "UserConfig.dailyReportMessageStatus":
		if e.complexity.UserConfig.DailyReportMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.DailyReportMessageStatus(childComplexity), true

	case "UserConfig.defaultProjectId":
		if e.complexity.UserConfig.DefaultProjectID == nil {
			break
		}

		return e.complexity.UserConfig.DefaultProjectID(childComplexity), true

	case "UserConfig.defaultProjectObjectTypeId":
		if e.complexity.UserConfig.DefaultProjectObjectTypeID == nil {
			break
		}

		return e.complexity.UserConfig.DefaultProjectObjectTypeID(childComplexity), true

	case "UserConfig.id":
		if e.complexity.UserConfig.ID == nil {
			break
		}

		return e.complexity.UserConfig.ID(childComplexity), true

	case "UserConfig.modifyMessageStatus":
		if e.complexity.UserConfig.ModifyMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.ModifyMessageStatus(childComplexity), true

	case "UserConfig.ownerRangeStatus":
		if e.complexity.UserConfig.OwnerRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.OwnerRangeStatus(childComplexity), true

	case "UserConfig.participantRangeStatus":
		if e.complexity.UserConfig.ParticipantRangeStatus == nil {
			break
		}

		return e.complexity.UserConfig.ParticipantRangeStatus(childComplexity), true

	case "UserConfig.pcCommentAtMessageStatus":
		if e.complexity.UserConfig.PcCommentAtMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcCommentAtMessageStatus(childComplexity), true

	case "UserConfig.pcIssueRemindMessageStatus":
		if e.complexity.UserConfig.PcIssueRemindMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcIssueRemindMessageStatus(childComplexity), true

	case "UserConfig.pcNoticeOpenStatus":
		if e.complexity.UserConfig.PcNoticeOpenStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcNoticeOpenStatus(childComplexity), true

	case "UserConfig.pcOrgMessageStatus":
		if e.complexity.UserConfig.PcOrgMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcOrgMessageStatus(childComplexity), true

	case "UserConfig.pcProjectMessageStatus":
		if e.complexity.UserConfig.PcProjectMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.PcProjectMessageStatus(childComplexity), true

	case "UserConfig.relationMessageStatus":
		if e.complexity.UserConfig.RelationMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.RelationMessageStatus(childComplexity), true

	case "UserConfig.remindMessageStatus":
		if e.complexity.UserConfig.RemindMessageStatus == nil {
			break
		}

		return e.complexity.UserConfig.RemindMessageStatus(childComplexity), true

	case "UserIdInfo.avatar":
		if e.complexity.UserIDInfo.Avatar == nil {
			break
		}

		return e.complexity.UserIDInfo.Avatar(childComplexity), true

	case "UserIdInfo.emplId":
		if e.complexity.UserIDInfo.EmplID == nil {
			break
		}

		return e.complexity.UserIDInfo.EmplID(childComplexity), true

	case "UserIdInfo.isDeleted":
		if e.complexity.UserIDInfo.IsDeleted == nil {
			break
		}

		return e.complexity.UserIDInfo.IsDeleted(childComplexity), true

	case "UserIdInfo.isDisabled":
		if e.complexity.UserIDInfo.IsDisabled == nil {
			break
		}

		return e.complexity.UserIDInfo.IsDisabled(childComplexity), true

	case "UserIdInfo.name":
		if e.complexity.UserIDInfo.Name == nil {
			break
		}

		return e.complexity.UserIDInfo.Name(childComplexity), true

	case "UserIdInfo.unionId":
		if e.complexity.UserIDInfo.UnionID == nil {
			break
		}

		return e.complexity.UserIDInfo.UnionID(childComplexity), true

	case "UserIdInfo.userId":
		if e.complexity.UserIDInfo.UserID == nil {
			break
		}

		return e.complexity.UserIDInfo.UserID(childComplexity), true

	case "UserLoginResp.avatar":
		if e.complexity.UserLoginResp.Avatar == nil {
			break
		}

		return e.complexity.UserLoginResp.Avatar(childComplexity), true

	case "UserLoginResp.name":
		if e.complexity.UserLoginResp.Name == nil {
			break
		}

		return e.complexity.UserLoginResp.Name(childComplexity), true

	case "UserLoginResp.needInitOrg":
		if e.complexity.UserLoginResp.NeedInitOrg == nil {
			break
		}

		return e.complexity.UserLoginResp.NeedInitOrg(childComplexity), true

	case "UserLoginResp.orgCode":
		if e.complexity.UserLoginResp.OrgCode == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgCode(childComplexity), true

	case "UserLoginResp.orgId":
		if e.complexity.UserLoginResp.OrgID == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgID(childComplexity), true

	case "UserLoginResp.orgName":
		if e.complexity.UserLoginResp.OrgName == nil {
			break
		}

		return e.complexity.UserLoginResp.OrgName(childComplexity), true

	case "UserLoginResp.token":
		if e.complexity.UserLoginResp.Token == nil {
			break
		}

		return e.complexity.UserLoginResp.Token(childComplexity), true

	case "UserLoginResp.userId":
		if e.complexity.UserLoginResp.UserID == nil {
			break
		}

		return e.complexity.UserLoginResp.UserID(childComplexity), true

	case "UserOrganization.address":
		if e.complexity.UserOrganization.Address == nil {
			break
		}

		return e.complexity.UserOrganization.Address(childComplexity), true

	case "UserOrganization.cityId":
		if e.complexity.UserOrganization.CityID == nil {
			break
		}

		return e.complexity.UserOrganization.CityID(childComplexity), true

	case "UserOrganization.code":
		if e.complexity.UserOrganization.Code == nil {
			break
		}

		return e.complexity.UserOrganization.Code(childComplexity), true

	case "UserOrganization.countryId":
		if e.complexity.UserOrganization.CountryID == nil {
			break
		}

		return e.complexity.UserOrganization.CountryID(childComplexity), true

	case "UserOrganization.id":
		if e.complexity.UserOrganization.ID == nil {
			break
		}

		return e.complexity.UserOrganization.ID(childComplexity), true

	case "UserOrganization.industryId":
		if e.complexity.UserOrganization.IndustryID == nil {
			break
		}

		return e.complexity.UserOrganization.IndustryID(childComplexity), true

	case "UserOrganization.IsAuthenticated":
		if e.complexity.UserOrganization.IsAuthenticated == nil {
			break
		}

		return e.complexity.UserOrganization.IsAuthenticated(childComplexity), true

	case "UserOrganization.isDelete":
		if e.complexity.UserOrganization.IsDelete == nil {
			break
		}

		return e.complexity.UserOrganization.IsDelete(childComplexity), true

	case "UserOrganization.isShow":
		if e.complexity.UserOrganization.IsShow == nil {
			break
		}

		return e.complexity.UserOrganization.IsShow(childComplexity), true

	case "UserOrganization.logoUrl":
		if e.complexity.UserOrganization.LogoURL == nil {
			break
		}

		return e.complexity.UserOrganization.LogoURL(childComplexity), true

	case "UserOrganization.name":
		if e.complexity.UserOrganization.Name == nil {
			break
		}

		return e.complexity.UserOrganization.Name(childComplexity), true

	case "UserOrganization.OrgIsEnabled":
		if e.complexity.UserOrganization.OrgIsEnabled == nil {
			break
		}

		return e.complexity.UserOrganization.OrgIsEnabled(childComplexity), true

	case "UserOrganization.owner":
		if e.complexity.UserOrganization.Owner == nil {
			break
		}

		return e.complexity.UserOrganization.Owner(childComplexity), true

	case "UserOrganization.provinceId":
		if e.complexity.UserOrganization.ProvinceID == nil {
			break
		}

		return e.complexity.UserOrganization.ProvinceID(childComplexity), true

	case "UserOrganization.remark":
		if e.complexity.UserOrganization.Remark == nil {
			break
		}

		return e.complexity.UserOrganization.Remark(childComplexity), true

	case "UserOrganization.resorceId":
		if e.complexity.UserOrganization.ResorceID == nil {
			break
		}

		return e.complexity.UserOrganization.ResorceID(childComplexity), true

	case "UserOrganization.scale":
		if e.complexity.UserOrganization.Scale == nil {
			break
		}

		return e.complexity.UserOrganization.Scale(childComplexity), true

	case "UserOrganization.sourceChannel":
		if e.complexity.UserOrganization.SourceChannel == nil {
			break
		}

		return e.complexity.UserOrganization.SourceChannel(childComplexity), true

	case "UserOrganization.sourcePlatform":
		if e.complexity.UserOrganization.SourcePlatform == nil {
			break
		}

		return e.complexity.UserOrganization.SourcePlatform(childComplexity), true

	case "UserOrganization.webSite":
		if e.complexity.UserOrganization.WebSite == nil {
			break
		}

		return e.complexity.UserOrganization.WebSite(childComplexity), true

	case "UserOrganizationList.list":
		if e.complexity.UserOrganizationList.List == nil {
			break
		}

		return e.complexity.UserOrganizationList.List(childComplexity), true

	case "UserOrganizationList.total":
		if e.complexity.UserOrganizationList.Total == nil {
			break
		}

		return e.complexity.UserOrganizationList.Total(childComplexity), true

	case "UserOrganizationListResp.list":
		if e.complexity.UserOrganizationListResp.List == nil {
			break
		}

		return e.complexity.UserOrganizationListResp.List(childComplexity), true

	case "UserRegisterResp.token":
		if e.complexity.UserRegisterResp.Token == nil {
			break
		}

		return e.complexity.UserRegisterResp.Token(childComplexity), true

	case "UserRoleInfo.id":
		if e.complexity.UserRoleInfo.ID == nil {
			break
		}

		return e.complexity.UserRoleInfo.ID(childComplexity), true

	case "UserRoleInfo.langCode":
		if e.complexity.UserRoleInfo.LangCode == nil {
			break
		}

		return e.complexity.UserRoleInfo.LangCode(childComplexity), true

	case "UserRoleInfo.name":
		if e.complexity.UserRoleInfo.Name == nil {
			break
		}

		return e.complexity.UserRoleInfo.Name(childComplexity), true

	case "Void.id":
		if e.complexity.Void.ID == nil {
			break
		}

		return e.complexity.Void.ID(childComplexity), true

	case "projectUser.createTime":
		if e.complexity.ProjectUser.CreateTime == nil {
			break
		}

		return e.complexity.ProjectUser.CreateTime(childComplexity), true

	case "projectUser.creator":
		if e.complexity.ProjectUser.Creator == nil {
			break
		}

		return e.complexity.ProjectUser.Creator(childComplexity), true

	case "projectUser.creatorInfo":
		if e.complexity.ProjectUser.CreatorInfo == nil {
			break
		}

		return e.complexity.ProjectUser.CreatorInfo(childComplexity), true

	case "projectUser.userInfo":
		if e.complexity.ProjectUser.UserInfo == nil {
			break
		}

		return e.complexity.ProjectUser.UserInfo(childComplexity), true

	case "projectUser.userRole":
		if e.complexity.ProjectUser.UserRole == nil {
			break
		}

		return e.complexity.ProjectUser.UserRole(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema/app_info.graphql", Input: `"接入应用信息结构体"
type AppInfo{
	"主键"
	id:Int64!
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建接入应用信息请求结构体"
input CreateAppInfoReq{
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新接入应用信息请求结构体"
input UpdateAppInfoReq{
	"主键"
	id:Int64!
	"名称"
	name:String!
	"应用编号"
	code:String!
	"秘钥1"
	secret1:String!
	"秘钥2"
	secret2:String!
	"负责人"
	owner:String!
	"审核状态,1待审核,2审核通过,3审核未通过"
	checkStatus:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除接入应用信息请求结构体"
input DeleteAppInfoReq{
	"主键"
	id:Int64!
}

"接入应用信息列表响应结构体"
type AppInfoList{
    total:Int64!
    list:[AppInfo!]
}`},
	&ast.Source{Name: "schema/attachment.graphql", Input: `input DeleteProjectAttachmentReq{
    "文件id数组"
    resourceIds:[Int64!]!
    "项目id"
    projectId:Int64!

}
type DeleteProjectAttachmentResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input ProjectAttachmentReq {
    "项目id"
    projectId:Int64!
    "文件类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int
    "文件搜索关键字"
    keyWord:String
}


type AttachmentList{
    total:Int64!
    list:[Attachment!]
}


type Attachment{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"host"
	host:String!
	"路径"
	path:String!
	"缩略图路径"
	pathCompressed: String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件大小"
	size:Int64!
	"创建人姓名"
	creatorName: String!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件类型"
	fileType:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
    "关联任务列表"
    issueList:[Issue!]!
}
`},
	&ast.Source{Name: "schema/auth.graphql", Input: `type InternalAuthResp{
    hasPermission: Any!
}

"用户登录请求结构体"
input UserLoginReq{
    "登录类型: 1、短信验证码登录，2、账号密码登录，3、邮箱验证码登录"
    loginType: Int!
    "登录类型为1时，loginName为手机号； 登录类型为3时，loginName为邮箱"
    loginName: String!
    "登录类型为2时，密码必传"
    password: String
    "验证码"
    authCode: String
    "注册时可以带上名字"
    name: String
    "邀请码, 邀请注册时必填"
    inviteCode: String
    "来源通道"
    sourceChannel: String!
    "平台"
    sourcePlatform: String!
}

"用户登录响应结构体"
type UserLoginResp{
    "用户token"
    token: String!
    "用户id"
    userId: Int64!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "用户名称"
    name: String!
    "头像"
    avatar: String!
    "是否需要创建组织"
    needInitOrg: Boolean!
}

"用户注册请求结构体"
input UserRegisterReq{
    "注册用户名（邮箱，手机号，账号等等）"
    userName: String!
    "注册类型(1,手机号，2，账号，3，邮箱)(暂时只支持邮箱)"
    registerType: Int!
    "姓名"
    name: String!
    "密码，只有注册类型为2时必填"
    password: String
    "短信或者邮箱验证码，当注册类型为1和3时必填"
    authCode: String
    "来源通道"
    sourceChannel: String!
    "平台"
    sourcePlatform: String!
}

"用户注册响应结构体"
type UserRegisterResp{
    "用户token"
    token: String!
}

"获取邀请码响应结构体"
type GetInviteCodeResp{
    "邀请码"
    inviteCode: String!
    "有效时长，单位：秒"
    expire: Int!
}

"获取邀请码请求结构体"
input GetInviteCodeReq{
    "平台"
    sourcePlatform: String
}

"获取邀请信息请求结构体"
input GetInviteInfoReq{
    "邀请code"
    inviteCode: String!
}

"获取邀请信息响应结构体"
type GetInviteInfoResp{
    "组织id"
    orgId: Int64!
    "组织名"
    orgName: String!
    "邀请人id"
    inviterId: Int64!
    "邀请人姓名"
    inviterName: String!
}

"找回密码请求结构体"
input RetrievePasswordReq{
    "账号，可以是邮箱或者手机号"
    username: String!
    "验证码"
    authCode: String!
    "新密码"
    newPassword: String!
}

"重新设置密码请求结构体"
input ResetPasswordReq{
    "当前密码"
    currentPassword: String!
    "新密码"
    newPassword: String!
}

"设置登录密码密码请求结构体"
input SetPasswordReq{
    "密码"
    password: String!
}

"解绑登录方式请求结构体（只剩下一种登录方式的时候不允许解绑）"
input UnbindLoginNameReq{
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "验证码"
    authCode: String!
}

"绑定手机号或者邮箱请求结构体"
input BindLoginNameReq{
    "登录地址，手机号或者邮箱"
    address: String!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "验证码"
    authCode: String!
}

"检测邮箱、手机号、账户是否存在请求结构体"
input CheckLoginNameReq{
    "登录地址，手机号或者邮箱"
    address: String!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
}`},
	&ast.Source{Name: "schema/common.graphql", Input: `type StatExtResp{
    issue: StatIssueExt!
}

type StatIssueExt{
    data: Any
}

type StatData{
    issueCount: Int!
    issueWaitCount: Int!
    issueRunningCount: Int!
    issueEndCount: Int!
    storyPointCount: Int!
    storyPointWaitCount: Int!
    storyPointRunningCount: Int!
    storyPointEndCount: Int!
}

type BasicConfigResp {
    "运行模式，1：Saas集群，2：单机部署，3：私有化集群部署，4：私有化单库部署"
    runMode: Int!
    "构建信息"
    buildInfo: BuildInfoDefine!
}

type BuildInfoDefine {
    gitCommitLog: String!
    gitStatus:  String!
    buildTime:  String!
    buildGoVersion: String!
}


input AreaLinkageListReq{
    "是否是根"
    isRoot:Boolean
    "大陆板块"
    continentId:Int64
    "国家Id"
    countryId:Int64
    "地区Id"
    areaId:Int64
    "省/州Id"
    stateId:Int64
    "城市Id"
    cityId:Int64
}

type AreaLinkageListResp{
    list:[AreaLinkageResp!]
}


type AreaLinkageResp{
    "主键"
    id:Int64!
    "名字"
    name:String!
    "中文名"
    cname:String!
    "code"
    code:String!
    "是否默认选择"
    isDefault:Int!
}

type IndustryListResp{
    list:[IndustryResp!]
}


type IndustryResp{
    "主键"
    id:Int64!
    "名字"
    name:String!
    "中文名"
    cname:String!

}


`},
	&ast.Source{Name: "schema/department.graphql", Input: `"部门结构体"
type Department{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
}

"创建部门请求结构体"
input CreateDepartmentReq{
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"状态, 1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新部门请求结构体"
input UpdateDepartmentReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"部门名称"
	name:String!
	"部门标识"
	code:String!
	"父部门id"
	parentId:Int64!
	"排序"
	sort:Int!
	"是否隐藏部门,1隐藏,2不隐藏"
	isHide:Int!
	"来源渠道,"
	sourceChannel:String!
	"状态, 1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除部门请求结构体"
input DeleteDepartmentReq{
	"主键"
	id:Int64!
}

"部门列表响应结构体"
type DepartmentList{
	"总数"
    total:Int64!
	"列表"
    list:[Department!]
}

input DepartmentListReq{
	"父部门id"
    parentId: Int64
	"是否查询最上级部门, 如果是1则为true"
	isTop: Int
	"是否显示隐藏的部门，如果是1则为true，默认不显示"
	showHiding: Int
	"部门名称"
	name: String
}

input DepartmentMemberListReq{
	"部门id"
	departmentId: Int64
}

"部门用户信息"
type DepartmentMemberInfo{
	"id"
	userId: Int64!
	"姓名"
	name: String!
	"姓名拼音"
	namePy: String
	"用户头像"
	avatar: String!
	"工号：企业下唯一"
	emplId: String!
	"unionId： 开发者账号下唯一"
	unionId: String!
	"用户部门id"
	departmentId: Int64!
}
`},
	&ast.Source{Name: "schema/dingtalk.graphql", Input: `"获取JSApi签名请求结构体"
input JsApiSignReq{
    "类型:目前只支持:jsapi"
    type: String!
    "路由url"
    url: String!
    "dingtalk企业id"
    corpId: String!
}

"获取JSApi签名响应结构体"
type JsApiSignResp{
    "应用代理id"
    agentId: Int64!
    "时间戳"
    timeStamp: String!
    "随机字符串"
    noceStr: String!
    "签名"
    signature: String!
}

"DingTalk免登陆 Code 登录验证请求结构体"
input AuthReq{
    "免登code"
    code: String!
    "企业id"
    corpId: String!
}

"DingTalk免登陆 Code 登录验证响应结构体"
type AuthResp{
    "持久化登录信息的Token"
    token: String!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "用户id"
    userId: Int64!
    "用户姓名"
    name: String!
}`},
	&ast.Source{Name: "schema/directive.graphql", Input: `directive @hasRole on FIELD_DEFINITION
`},
	&ast.Source{Name: "schema/feishu.graphql", Input: `"飞书免登陆Code 登录验证请求结构体"
input FeiShuAuthReq{
    "免登code"
    code: String!
    "免登code类型，1: code2session, 2: oauth(默认为1)"
    codeType: Int
}

"飞书免登陆Code 登录验证响应结构体"
type FeiShuAuthResp{
    "持久化登录信息的Token"
    token: String!
    "组织id"
    orgId: Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "用户id"
    userId: Int64!
    "用户姓名"
    name: String!
}`},
	&ast.Source{Name: "schema/folder.graphql", Input: `"创建文件夹请求结构体"
input CreateProjectFolderReq {
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String!
    "父级文件夹id"
    parentId:Int64!
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64!
}
"文件夹结构体"
type Folder {
    "文件夹id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String!
    "父级文件夹id"
    parentId:Int64!
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64!
    "文件路径"
    path:String!
    "创建人"
    creator:Int64!
    "创建人中文名"
    creatorName:String!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
   	"乐观锁"
   	version:Int!
   	"是否删除,1是,2否"
   	isDelete:Int!
}

"删除文件夹请求结构体"
input DeleteProjectFolderReq{
    "文件夹id数组"
    folderIds:[Int64!]!
    "项目id"
    projectId:Int64!
}

"更新文件夹请求结构体"
input UpdateProjectFolderReq{
    "文件夹id"
    folderId:Int64!
    "项目id"
    projectId:Int64!
    "文件夹名"
    name:String
    "父级文件夹id"
    parentId:Int64
    "文件夹类型,0其他,1文档,2图片,3视频,4音频"
    fileType:Int64
    "变动的字段列表"
    updateFields:[String!]
}

type UpdateProjectFolderResp{
    "文件夹id"
    folderId:Int64!
}

type DeleteProjectFolderResp{
    "文件夹id数组"
    folderIds:[Int64!]!
}

input ProjectFolderReq{
    "父文件夹id"
    parentId:Int64
    "项目id"
    projectId:Int64!
}

"文件夹列表相应结构体"
type FolderList{
    total:Int64!
    list:[Folder!]!
}`},
	&ast.Source{Name: "schema/issue.graphql", Input: `"首页的任务列表请求结构体"
input HomeIssueInfoReq{
    "关联类型，1：我发起的，2：我负责的，3：我参与的，4：我关注的"
    relatedType: Int
    "排序类型，1：项目分组，2：优先级分组，3：创建日期降序，4：最后更新日期降序, 5: 按开始时间最早, 6：按开始时间最晚, 8：按截止时间最近，9：按创建时间最早, 10: sort排序"
    orderType: Int
    "状态,1:未完成，2：已完成，3：未开始，4：进行中，5: 已逾期"
    status: Int
    "流程状态id"
    processStatusId: Int64
    "类型，1：主任务,2 子任务"
    type: Int
    "截止时间开始时间点(若只选择开始时间：表示任务截止日期在这之后的所有任务)"
    startTime: Time
    "截止时间结束时间点(若只选择截止时间：则表示任务截止时间在这之前的所有任务)"
    endTime: Time
    "负责人"
    ownerIds: [Int64!]
    "创建人"
    creatorIds: [Int64!]
    "参与人"
    participantIds: [Int64!]
    "关注人"
    followerIds: [Int64!]
    "时间范围：本周，全部.."
    timeScope: Time
    "搜索筛选"
    searchCond: String
    "项目id"
    projectId: Int64
    "迭代id"
    iterationId: Int64
    "是否已规划(是否关联了迭代)，1: 已规划，2：未规划 "
    planType: Int
    "项目对象类型id"
    projectObjectTypeId: Int64
    "支持多个项目对象类型同时做筛选"
    projectObjectTypeIds: [Int64!]
    "优先级"
    priorityId: Int64
    "组合查询类型，1: 今日指派给我，2：最近截止(包括即将逾期和已逾期)，3：今日逾期，4：逾期完成, 5:即将逾期,6:今日创建"
    combinedType: Int
    "任务标签id"
    issueTagId: [Int64!]
    "项目是否归档(1是2否3所有,不传查询未归档)"
    isFiling:Int
    "父任务id"
    parentId:Int64
    "上次更新时间（会查询这个时间点之后有变动的任务，其中包括被删除的任务）"
    lastUpdateTime: Time
    "是否查询父任务的子任务, 如果不是空，且值为1，则将子任务的父任务也查询出来"
    enableParentIssues: Int
    "周期开始时间（只要开始时间和截止时间有一个大于该项则命中条件）"
    periodStartTime: Time
    "周期结束时间（只要开始时间和截止时间有一个小于该项则命中条件）"
    periodEndTime: Time
    "附件资源id"
    resourceId: Int64
}

"任务简单信息请求结构体（任务详情中的子任务信息）"
input IssueRestInfoReq{
    "状态,1:未完成，2：已完成"
    status: Int
    "项目id"
    projectId: Int64
    "父任务id"
    parentId: Int64
    "任务id集合"
    issueIds: [Int64]
}

"首页任务tag信息"
type HomeIssueTagInfo{
    "标签id"
    id: Int64!
    "标签名"
    name: String!
    "背景颜色"
    bgStyle:String!
    "字体颜色"
    fontStyle:String!
}

"任务结构体"
type Issue{
    "任务id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "任务code"
    code:String!
    "项目id"
    projectId:Int64!
    "项目对象类型id"
    projectObjectTypeId:Int64!
    "标题"
    title:String!
    "负责人id"
    owner:Int64!
    "优先级id"
    priorityId:Int64!
    "来源"
    sourceId:Int64!
    "问题类型id"
    issueObjectTypeId:Int64!
    "计划开始时间"
    planStartTime:Time!
    "计划结束时间"
    planEndTime:Time!
    "实际开始时间"
    startTime:Time!
    "实际结束时间"
    endTime:Time!
    "计划工时"
    planWorkHour:Int!
    "迭代id"
    iterationId:Int64!
    "版本id"
    versionId:Int64!
    "模块id"
    moduleId:Int64!
    "父任务id"
    parentId:Int64!
    "父任务标题"
    parentTitle: String!
    "备注"
    remark: String
    "状态id"
    status:Int64!
    "创建者"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新者"
    updator:Int64!
    "更新时间"
    updateTime:Time!
    "排序"
    sort: Int64!
}

"单个任务信息详情结构体"
type IssueInfo{
    "任务信息"
    issue: Issue!
    "项目信息"
    project: HomeIssueProjectInfo!
    "状态信息"
    status: HomeIssueStatusInfo!
    "优先级信息"
    priority: HomeIssuePriorityInfo!
    "执行人信息"
    owner: UserIdInfo!
    "执行人信息"
    creatorInfo: UserIdInfo!
    "参与人"
    participantInfos: [UserIdInfo!]
    "关注人"
    followerInfos: [UserIdInfo!]
    "下一个状态"
    nextStatus: [HomeIssueStatusInfo!]
    "标签信息"
    tags: [HomeIssueTagInfo!]
    "来源信息"
    sourceInfo: IssueSourceInfo
    "类型信息"
    typeInfo: IssueObjectTypeInfo
    "子任务数量"
    childsNum: Int64!
    "子任务已完成数量"
    childsFinishedNum: Int64!
    "任务类型名称"
    projectObjectTypeName:String!
}

"创建任务请求结构体"
input CreateIssueReq{
    "项目id"
    projectId:Int64!
    "标题"
    title:String!
    "优先级"
    priorityId: Int64!
    "类型id，问题，需求...."
    typeId: Int64
    "负责人"
    ownerId: Int64!
    "参与人"
    participantIds: [Int64!]
    "关注人"
    followerIds: [Int64!]
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "计划工作时长"
    planWorkHour:Int
    "所属版本id"
    versionId:Int64
    "所属模块id"
    moduleId:Int64
    "父任务id"
    parentId:Int64
    "备注"
    remark: String
    "所属迭代id"
    iterationId:Int64
    "问题对象类型id"
    issueObjectId:Int64
    "子任务列表"
    children: [IssueChildren]
    "关联的标签列表"
    tags: [IssueTagReqInfo!]
}

"任务标签结构体"
input IssueTagReqInfo{
    "标签id"
    id: Int64!
    "标签名称"
    name: String!
}

"子任务创建结构体"
input IssueChildren{
    "名称"
    title:String!
    "负责人"
    ownerId:Int64!
    "类型id，问题，需求...."
    typeId: Int64
    "优先级"
    priorityId: Int64!
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "计划工作时长"
    planWorkHour:Int
    "备注"
    remark:String
}

"更新任务请求结构体"
input UpdateIssueReq{
    "要更新的任务id"
    id:Int64!
    # "项目id" 转移任务不走这里，去掉项目id
    # projectId:Int64
    "标题"
    title:String
    "负责人"
    ownerId:Int64
    "优先级id"
    priorityId:Int64
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "计划工作时长"
    planWorkHour:Int
    "备注"
    remark: String
    "迭代"
    iterationId:Int64
    "来源"
    sourceId:Int64
    "类型"
    issueObjectTypeId:Int64
    "参与人"
    participantIds: [Int64!]
    "关注人"
    followerIds: [Int64!]
    "变动的字段列表"
    updateFields:[String!]
}

"更新项目对象类型请求结构体"
input UpdateIssueProjectObjectTypeReq{
    "要更新的任务id"
    id:Int64!
   "要更新的projectObjectType"
    projectObjectTypeId:Int64!
}

"更新任务状态请求结构体"
input UpdateIssueStatusReq{
    "任务id"
    id:Int64!
    "要更新的状态id"
    nextStatusId:Int64
    "要更新的状态类型,1: 未开始，2：进行中，3：已完成"
    nextStatusType: Int
    "完成父任务时，是否同步更新子任务的状态,1:是，2：否，默认为否"
    needModifyChildStatus: Int
}

"更新任务Sort请求结构体"
input UpdateIssueSortReq{
    "任务id"
    id: Int64!
    "排序位置标记，上一个任务id, beforeId和afterId至少传一个，否则不会更新sort"
    beforeId: Int64
    "排序位置标记，下一个任务id"
    afterId: Int64
    "项目对象类型id"
    projectObjectTypeId: Int64
}

"更新任务标签关联请求结构体"
input UpdateIssueTagsReq{
    "任务id"
    id: Int64!
    "新关联的标签列表，addTags和delTags可以同时存在"
    addTags: [IssueTagReqInfo!]
    "要取消关联的标签列表"
    delTags: [IssueTagReqInfo!]
}

"更新任务响应结构体"
type UpdateIssueResp{
    "任务id"
    id:Int64!
}

"删除任务响应结构体"
input DeleteIssueReq{
    "任务id"
    id:Int64!
}

"任务列表响应结构体"
type IssueList{
    "总数量"
    total:Int64!
    "任务列表"
    list:[Issue!]
}

"首页任务列表响应结构体"
type HomeIssueInfoResp{
    "总数量"
    total:Int64!
    "实际总数量"
    actualTotal: Int64!
    "首页任务列表"
    list:[HomeIssueInfo!]
}

"任务简单信息响应结构体（任务详情中的子任务信息）"
type IssueRestInfoResp{
    "总数量"
    total:Int64!
    "任务简单信息列表"
    list:[IssueRestInfo!]
}

"首页任务信息结构体"
type HomeIssueInfo{
    "任务信息"
    issue: Issue!
    "项目信息"
    project: HomeIssueProjectInfo!
    "执行人信息"
    owner: HomeIssueOwnerInfo!
    "状态信息"
    status: HomeIssueStatusInfo!
    "优先级信息"
    priority: HomeIssuePriorityInfo!
    "标签信息"
    tags: [HomeIssueTagInfo!]
    "子任务数量"
    childsNum: Int64!
    "子任务已完成数量"
    childsFinishedNum: Int64!
}

"任务的简化信息"
type IssueRestInfo{
    "任务id"
    id: Int64!
    "任务标题"
    title: String!
    "负责人"
    ownerId: Int64!
    "负责人名称"
    ownerName: String!
    "负责人头像"
    ownerAvatar: String!
    "是否已被删除，为true则代表被组织移除"
    ownerIsDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    ownerIsDisabled: Boolean!

    "是否已完成"
    finished: Boolean!
    "状态id"
    statusId:Int64!
    "状态名称"
    statusName:String!
    "计划结束时间"
    planEndTime:Time!
    "计划开始时间"
    planStartTime:Time!
    "完成时间"
    endTime:Time!
    "优先级信息"
    priorityInfo:HomeIssuePriorityInfo!
}

"首页任务-优先级信息结构体"
type HomeIssuePriorityInfo{
    "优先级id"
    id: Int64!
    "优先级名称"
    name: String!
    "背景色"
    bgStyle: String!
    "字体色"
    fontStyle: String!
}

"任务-来源信息结构体"
type IssueSourceInfo{
    "id"
    id: Int64!
    "来源名称"
    name: String!
}

"任务-类型信息结构体"
type IssueObjectTypeInfo{
    "类型id"
    id: Int64!
    "类型名"
    name: String!
}

"首页任务-状态信息结构体"
type HomeIssueStatusInfo{
    "状态id"
    id: Int64!
    "状态名"
    name: String!
    "显示名，为空则显示状态名"
    displayName: String
    "背景色"
    bgStyle: String!
    "字体色"
    fontStyle: String!
    "状态类型,1未开始,2进行中,3已完成"
    type: Int!
}

"首页任务-项目信息结构体"
type HomeIssueProjectInfo{
    "项目id"
    id: Int64!
    "项目名称"
    name: String!
    "是否归档(1是2否)"
    isFilling:Int!
}

"首页任务-负责人信息结构体"
type HomeIssueOwnerInfo{
    "负责人信息"
    id: Int64!
    "负责人名称"
    name: String!
    "负责人头像"
    avatar: String
    "是否已被删除，为true则代表被组织移除"
    isDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    isDisabled: Boolean!
}

"任务报表响应结构体"
type IssueReportResp{
    "总数量"
    total:Int64!
    "分享id"
    shareId:String!
    "报表所属者名称"
    reportUserName:String!
    "开始时间"
    startTime:String!
    "结束时间"
    endTime:String!
    "任务信息"
    list:[HomeIssueInfo!]
}

"任务状态数量统计请求结构体"
input IssueStatusTypeStatReq{
    "项目id"
    projectId: Int64
    "迭代id"
    iterationId: Int64
    "关联类型：1我负责的2我参与的3我关注的4我发起的"
    relationType: Int
}

"每日个人完成图数据统计请求结构体"
input IssueDailyPersonalWorkCompletionStatReq{
    "开始时间, 开始时间和结束时间可以不传，默认七天"
    startDate: Time
    "结束时间"
    endDate: Time
}

"每日个人完成图数据统计响应结构体"
type IssueDailyPersonalWorkCompletionStatResp{
    "数据列表"
    list: [IssueDailyPersonalWorkCompletionStatData!]
}

"每日个人完成图数据统计响应数据"
type IssueDailyPersonalWorkCompletionStatData{
    "日期"
    statDate: String!
    "完成数量"
    completedCount: Int64!
}

"任务状态数量统计响应结构体"
type IssueStatusTypeStatResp{
    "状态为未开始的数量"
    notStartTotal:Int64!
    "状态为进行中的数量"
    processingTotal: Int64!
    "状态为已完成的数量"
    completedTotal: Int64!
    "今日完成数"
    completedTodayTotal: Int64!
    "状态为逾期的数量"
    overdueTotal: Int64!
    "状态为明日逾期"
    overdueTomorrowTotal: Int64!
    "逾期完成"
    overdueCompletedTotal:Int64!
    "任务总数"
    total:Int64!
    "今日到期"
    overdueTodayTotal:Int64!
    "即将到期"
    beAboutToOverdueSum:Int64!
    "指派给我的任务"
    todayCount:Int64!
    "今日创建"
    todayCreateCount:Int64!
    "概览"
    list:[StatCommon!]
}

type StatCommon{
    "名称"
    name:String!
    "数量"
    count:Int64!
}


type IssueStatByObjectType{
    "对象类型id"
    projectObjectTypeId: Int64
    "对象类型名称"
    projectObjectTypeName: String
    "数量"
    total:Int64!
}
type IssueStatusTypeStatDetailResp{
    "未开始的统计"
    notStart:[IssueStatByObjectType]!
    "进行中的统计"
    processing:[IssueStatByObjectType]!
    "已完成的统计"
    completed:[IssueStatByObjectType]!
}

"添加任务评论请求结构体"
input CreateIssueCommentReq{
    "任务id"
    issueId: Int64!
    "评论信息"
    comment: String!
    "提及的用户id"
    mentionedUserIds: [Int64!]
}

"任务添加文件资源"
input CreateIssueResourceReq{
    "任务id"
    issueId: Int64!
    "资源路径"
    resourcePath: String!
    "资源大小，单位B"
    resourceSize: Int64!
    "文件名"
    fileName: String!
    "文件后缀"
    fileSuffix: String!
    "md5"
    md5: String
    "bucketName"
    bucketName: String
}

"删除子任务请求结构体"
input DeleteIssueResourceReq{
    "任务id'"
    issueId: Int64!
    "关联资源id列表"
    deletedResourceIds:[Int64!]!
}

"任务添加关联任务"
input UpdateIssueAndIssueRelateReq{
    "任务id"
    issueId: Int64!
    "添加的关联任务id集合"
    addRelateIssueIds: [Int64!]
    "删除的关联任务id集合"
    delRelateIssueIds: [Int64!]
}

"关联任务列表请求结构体"
input RelatedIssueListReq{
    "任务id"
    issueId:Int64!
}

"获取任务资源请求结构体"
input GetIssueResourcesReq{
    "任务id"
    issueId: Int64!
}

"任务分配排行请求结构体"
input IssueAssignRankReq{
    "项目Id"
    projectId: Int64!
    "rank数量， 1 <= rankTop <= 100， 默认为5"
    rankTop: Int
}

"任务分配信息"
type IssueAssignRankInfo{
    "姓名"
    name: String!
    "用户头像"
    avatar: String!
    "工号：企业下唯一"
    emplId: String!
    "分配的未完成的任务数量"
    incompleteissueCount: Int64!
}

"导入任务"
input ImportIssuesReq{
    "项目id"
    projectId:Int64!
    "excel地址"
    url:String!
    "url类型, 1 网址，2 本地dist路径"
    urlType: Int!
}

"项目和任务信息统计"
type IssueAndProjectCountStatResp{
    "项目未完成的数量"
    projectNotCompletedCount: Int64!
    "任务未完成的数量"
    issueNotCompletedCount: Int64!
    "参与项目数"
    participantsProjectCount:Int64!
    "参与归档项目数"
    filingParticipantsProjectCount:Int64!
}


type ExportIssueTemplateResp{
    "模板地址"
    url:String!
}`},
	&ast.Source{Name: "schema/issue_object_type.graphql", Input: `"获取任务类型列表请求结构体"
input IssueObjectTypesReq{
	"项目对象类型id"
	projectObjectTypeId: Int64
}

"问题对象类型结构体"
type IssueObjectType{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建问题对象类型请求结构体"
input CreateIssueObjectTypeReq{
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新问题对象类型请求结构体"
input UpdateIssueObjectTypeReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"类型名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除问题对象类型请求结构体"
input DeleteIssueObjectTypeReq{
	"主键"
	id:Int64!
	"组织Id 暂时不用传 之后用户校验的时候比较是否包含这个orgId 操作的时候是否有当前orgId的权限"
	orgId:Int64

}

"问题对象类型列表响应结构体"
type IssueObjectTypeList{
    total:Int64!
    list:[IssueObjectType!]
}`},
	&ast.Source{Name: "schema/issue_source.graphql", Input: `"获取任务来源列表请求结构体"
input IssueSourcesReq{
	"项目对象类型id"
	projectObjectTypeId: Int64
}

"问题来源结构体"
type IssueSource{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建问题来源请求结构体"
input CreateIssueSourceReq{
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新问题来源请求结构体"
input UpdateIssueSourceReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"对象类型id"
	projectObjectTypeId:Int64!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除问题来源请求结构体"
input DeleteIssueSourceReq{
	"主键"
	id:Int64!
	"组织Id 暂时不用传 之后用户校验的时候比较是否包含这个orgId 操作的时候是否有当前orgId的权限"
	orgId:Int64
}

"问题来源列表响应结构体"
type IssueSourceList{
    total:Int64!
    list:[IssueSource!]
}`},
	&ast.Source{Name: "schema/issue_tag.graphql", Input: `"获取任务标签列表请求结构体"
input IssueTagsReq{
    "任务id"
    issueId: Int64!
}


`},
	&ast.Source{Name: "schema/iteration.graphql", Input: `"迭代列表请求结构体"
input IterationListReq{
	"项目id"
	projectId: Int64
	"名称，模糊搜索"
	name: String
	"状态,1:未开始，2：进行中，3：已完成"
	statusType: Int
}

"迭代结构体"
type Iteration{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"名称"
	name:String!
	"负责人"
	owner:Int64!
	"版本"
	versionId:Int64!
	"计划开始时间"
	planStartTime:Time!
	"计划结束时间"
	planEndTime:Time!
	"预估工时"
	planWorkHour:Int!
	"故事点"
	storyPoint:Int!
	"描述"
	remark:String
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"负责人信息"
	ownerInfo: HomeIssueOwnerInfo!
	"状态信息"
	statusInfo: HomeIssueStatusInfo!
}

"创建迭代请求结构体"
input CreateIterationReq{
	"项目id"
	projectId:Int64!
	"名称"
	name:String!
	"负责人"
	owner:Int64!
	"计划开始时间"
	planStartTime:Time!
	"计划结束时间"
	planEndTime:Time!
}

"更新迭代请求结构体"
input UpdateIterationReq{
	"主键"
	id:Int64!
	"名称"
	name:String
	"负责人"
	owner:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"变动的字段列表"
	updateFields:[String!]
}

"删除迭代结构体"
input DeleteIterationReq{
	"主键"
	id:Int64!
}

"迭代列表响应结构体"
type IterationList{
	"总数量"
    total:Int64!
	"迭代列表"
    list:[Iteration!]
}

"迭代状态类型统计请求结构体"
input IterationStatusTypeStatReq{
	"项目id"
	projectId: Int64
}

"迭代状态类型统计响应结构体"
type IterationStatusTypeStatResp{
	"状态为未开始的数量"
	notStartTotal:Int64!
	"状态为进行中的数量"
	processingTotal: Int64!
	"状态为已完成的数量"
	completedTotal: Int64!
	"总数量"
	total: Int64!
}

"迭代和任务关联请求结构体"
input IterationIssueRealtionReq{
	"迭代id"
	iterationId: Int64!
	"要添加的任务id列表（除特性任务）"
	addIssueIds: [Int64!]
	"要移除的任务id列表"
	delIssueIds: [Int64!]
}

"更新迭代状态请求结构体"
input UpdateIterationStatusReq{
	"迭代id"
	id:Int64!
	"要更新的状态id"
	nextStatusId:Int64!
}

"迭代信息请求结构体"
input IterationInfoReq{
	"迭代id"
	id: Int64!
}

"迭代信息响应结构体"
type IterationInfoResp{
	"迭代信息"
	iteration: Iteration!
	"项目信息"
	project: HomeIssueProjectInfo!
	"状态信息"
	status: HomeIssueStatusInfo!
	"负责人信息"
	owner: UserIdInfo!
	"下一步骤状态列表"
	nextStatus: [HomeIssueStatusInfo!]
}

`},
	&ast.Source{Name: "schema/iteration_stat.graphql", Input: `"迭代统计查询请求"
input IterationStatReq{
	"迭代id"
	iterationId: Int64!
	"开始时间"
	startDate: Time
	"结束时间"
	endDate: Time
}

"迭代统计结构体"
type IterationStat{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
}

"创建迭代统计请求结构体"
input CreateIterationStatReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新迭代统计请求结构体"
input UpdateIterationStatReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"迭代id"
	iterationId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除迭代统计请求结构体"
input DeleteIterationStatReq{
	"主键"
	id:Int64!
}

"迭代统计列表响应结构体"
type IterationStatList{
    total:Int64!
    list:[IterationStat!]
}`},
	&ast.Source{Name: "schema/notice.graphql", Input: `"结构体"
type Notice{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"通知类型, 1项目通知,2组织通知,"
	type:Int!
	"操作类型"
	relationTye:String!
	"冗余信息"
	ext:String!
	"项目id"
	projectId:Int64!
	"issueId"
	issueId:Int64!
	"关联动态id"
	trendsId:Int64!
	"通知内容"
	content:String!
	"被通知人"
	noticer:Int64!
	"状态, 1未读,2已读"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"创建人信息"
	creatorInfo:UserIdInfo!
	"项目名称"
	projectName:String!
	"任务名称"
	issueName:String!
}

input NoticeListReq{
	"通知类型, 1项目通知,2组织通知,"
	type:Int
}

"阅读通知结构体"
input ReadNoticeReq{
	"主键"
	id:Int64!
}

"删除请求结构体"
input DeleteNoticeReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type NoticeList{
    total:Int64!
    list:[Notice!]
}

"通知条数"
type NoticeCountResp{
	total:Int64!
}

"获取MQTT通道key请求结构体"
input GetMQTTChannelKeyReq{
	"通道类型：1、项目（任务，标签，工作栏），2、组织（成员）"
	channelType: Int!
	"通道类型为1时必传"
	projectId: Int64
}

"获取MQTT通道key响应结构体"
type GetMQTTChannelKeyResp{
	"连接地址"
	address: String!
	"host"
	host: String!
	"port"
	port: Int
	"通道"
	channel: String!
	"通道key"
	key: String!
}`},
	&ast.Source{Name: "schema/org.graphql", Input: `"创建组织请求结构体"
input CreateOrgReq{
    "组织名称"
    orgName: String!
    "补全个人姓名"
    creatorName: String
    "是否要导入示例数据, 1：导入，2：不导入，默认不导入"
    importSampleData: Int
    "来源平台"
    sourcePlatform:String
    "来源渠道"
    sourceChannel:String
}

"用户组织列表响应结构体"
type UserOrganization{
    "组织id"
    id:Int64!
    "组织名称"
    name: String!
    "组织code"
    code: String!
    "组织网站"
    webSite: String!
    "所属行业"
    industryId:Int64!
    "组织规模"
    scale:String!
    "来源平台"
    sourcePlatform:String!
    "来源渠道"
    sourceChannel:String!
    "所在国家"
    countryId:Int64!
    "所在省份"
    provinceId:Int64!
    "所在城市"
    cityId:Int64!
    "组织地址"
    address:String!
    "组织logo地址"
    logoUrl:String!
    "组织标识"
    resorceId:Int64!
    "组织所有人,创建时默认为创建人"
    owner:Int64!
    "企业是否认证"
    IsAuthenticated:Int!
    "描述"
    remark:String!
    "是否展示"
    isShow:Int!
    "是否删除,1是,2否"
    isDelete:Int
    "对于该用户组织是否可用（1是2否）"
    OrgIsEnabled:Int
}

type UserOrganizationListResp{
    "用户组织列表"
    list:[UserOrganization!]
}


input SwitchUserOrganizationReq{
    "组织id"
    orgId:Int64!
}

"组织设置入参"
input UpdateOrganizationSettingsReq{
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "组织code"
    code: String
    "所属行业"
    industryId:Int64
    "组织规模"
    scale:String
    "所在国家"
    countryId:Int64
    "所在省份"
    provinceId:Int64
    "所在城市"
    cityId:Int64
    "组织地址"
    address:String
    "组织logo地址"
    logoUrl:String
    "变动的字段列表"
    updateFields:[String!]!
}


input OrganizationInfoReq{
    "组织id"
    orgId:Int64!
}

"组织设置入参"
type OrganizationInfoResp{
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "code"
    code:String!
    "组织网站"
    webSite: String!
    "所属行业"
    industryId:Int64!
    "所属行业中文名"
    industryName:String!
    "组织规模"
    scale:String!
    "所在国家"
    countryId:Int64!
    "所在国家中文名"
    countryCname:String!
    "所在省份"
    provinceId:Int64!
    "所在省份中文名"
    provinceCname:String!
    "所在城市"
    cityId:Int64!
    "所在城市中文名"
    cityCname:String!
    "组织地址"
    address:String!
    "组织logo地址"
    logoUrl:String!
    "组织负责人"
    owner:Int64!
}

"修改组织成员状态请求结构体"
input UpdateOrgMemberStatusReq{
    "要修改的组织成员列表"
    memberIds: [Int64!]!
    "状态,  1可用,2禁用"
    status: Int!
}

"修改组织成员审核状态请求结构体"
input UpdateOrgMemberCheckStatusReq{
    "要修改的组织成员列表"
    memberIds: [Int64!]!
    "审核状态, 1待审核,2审核通过,3审核不过"
    checkStatus: Int!
}

"移除组织"
input RemoveOrgMemberReq{
    "要移除的组织成员列表"
    memberIds: [Int64!]!
}`},
	&ast.Source{Name: "schema/oss.graphql", Input: `"Oss申请signUrl响应结构体"
type OssApplySignUrlResp {
    "signUrl"
    signUrl: String!
}

"Oss申请signUrl请求结构体"
input OssApplySignUrlReq{
    "文件url"
    url: String!
}

"Oss Post Policy策略请求结构体"
input OssPostPolicyReq{
    "策略类型, 1: 项目封面，2：任务资源（需要callback）, 3：导入任务的excel， 4：项目文件（需要callback），5：兼容测试， 6:用户头像"
    policyType: Int!
    "如果policyType为1和2和3，那么projectId必传(创建场景传0)"
    projectId: Int64
    "如果policyType为2，那么issueId必传"
    issueId: Int64
    "目录id, policy为4的时候必填"
    folderId: Int64
}

"Oss Post Policy策略响应结构体"
type OssPostPolicyResp{
    "policy"
    policy: String!
    "签名"
    signature: String!
    "文件上传目录"
    dir: String!
    "有效期"
    expire: String!
    "access Id"
    accessId: String!
    "Host"
    host: String!
    "Region"
    region: String!
    "bucket名称"
    bucket: String!
    "文件名"
    fileName: String!
    "文件最大限制"
    maxFileSize: Int64!
    "callback回调，为空说明不需要回调"
    callback: String!
}`},
	&ast.Source{Name: "schema/permission.graphql", Input: `"结构体"
type Permission{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建请求结构体"
input CreatePermissionReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdatePermissionReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号,仅支持大写英文字母"
	code:String!
	"名称"
	name:String!
	"父id"
	parentId:Int64!
	"权限项类型,1系统,2组织,3项目"
	type:Int!
	"权限路径"
	path:String!
	"是否显示,1是,2否"
	isShow:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeletePermissionReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type PermissionList{
    total:Int64!
    list:[Permission!]
}

type PermissionOperationListResp{
	"权限项信息"
	permissionInfo:Permission!
	"权限操作项信息"
	operationList:[PermissionOperation!]
	"角色拥有的操作项权限id"
	permissionHave:[Int64!]
}

type GetPersonalPermissionInfoResp{
	Data:Map!
}`},
	&ast.Source{Name: "schema/permission_operation.graphql", Input: `"结构体"
type PermissionOperation{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
}

"创建请求结构体"
input CreatePermissionOperationReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdatePermissionOperationReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"权限项id"
	permissionId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"操作编号,多个半角逗号分隔"
	operationCodes:String!
	"描述"
	remark:String!
	"是否显示,1是,2否"
	isShow:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeletePermissionOperationReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type PermissionOperationList{
    total:Int64!
    list:[PermissionOperation!]
}

"更新角色操作权限"
input UpdateRolePermissionOperationReq{
	"角色id"
	roleId:Int64!
	"所有涉及到的更改的权限组"
	updatePermissions:[EveryPermission!]
}

input EveryPermission{
	"权限组id"
	permissionId:Int64!
	"修改后的操作项id"
	operationIds:[Int64!]
}`},
	&ast.Source{Name: "schema/priority.graphql", Input: `"优先级列表"
input PriorityListReq {
	"类型,1项目优先级,2:需求/任务等优先级"
	type:Int
}

"优先级结构体"
type Priority{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"类型,1项目优先级,2:需求/任务等优先级"
	type:Int!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"是否默认,1是,2否"
	isDefault:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建优先级请求结构体"
input CreatePriorityReq{
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"类型,1项目优先级,2:需求/任务等优先级"
	type:Int!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"是否默认,1是,2否"
	isDefault:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新优先级请求结构体"
input UpdatePriorityReq{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"类型,1项目优先级,2:需求/任务等优先级"
	type:Int!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"是否默认,1是,2否"
	isDefault:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除优先级请求结构体"
input DeletePriorityReq{
	"主键"
	id:Int64!
	"组织Id 暂时不用传 之后用户校验的时候比较是否包含这个orgId 操作的时候是否有当前orgId的权限"
	orgId:Int64
}

"优先级列表响应结构体"
type PriorityList{
	total:Int64!
	list:[Priority!]
}`},
	&ast.Source{Name: "schema/process_status.graphql", Input: `"流程状态结构体"
type ProcessStatus{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"状态类型,1未开始,2进行中,3已完成"
	type:Int!
	"状态类别,1项目状态,2迭代状态,3问题状态,"
	category:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建流程状态请求结构体"
input CreateProcessStatusReq{
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"状态类型,1未开始,2进行中,3已完成"
	type:Int!
	"状态类别,1项目状态,2迭代状态,3问题状态,"
	category:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新流程状态请求结构体"
input UpdateProcessStatusReq{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"状态类型,1未开始,2进行中,3已完成"
	type:Int!
	"状态类别,1项目状态,2迭代状态,3问题状态,"
	category:Int!
	"描述"
	remark:String!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除流程状态请求结构体"
input DeleteProcessStatusReq{
	"主键"
	id:Int64!
}

"流程状态列表响应结构体"
type ProcessStatusList{
	total:Int64!
	list:[ProcessStatus!]
}`},
	&ast.Source{Name: "schema/project.graphql", Input: `type Project{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"编号"
	code:String!
	"名称"
	name:String!
	"前缀编号"
	preCode:String!
	"项目负责人"
	owner:Int64!
	"项目类型"
	projectTypeId:Int64!
	"项目优先级"
	priorityId:Int64!
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"项目标识"
	resourceId:Int64!
	"是否归档,1归档,2未归档"
	isFiling:Int!
	"描述"
	remark:String!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
	"创建人信息"
	creatorInfo:UserIdInfo
	"负责人信息"
	ownerInfo:UserIdInfo
	"成员信息"
	memberInfo:[UserIdInfo]
	"关注人信息"
	followerInfo:[UserIdInfo]
    "封面地址"
    resourcePath:String!
	"封面缩略图"
	resourceCompressedPath:String!
    "所有任务数量"
    allIssues:Int64!
    "已完成任务数量"
    finishIssues:Int64!
    "逾期任务数量"
    overdueIssues:Int64!
	"流程状态"
	allStatus: [HomeIssueStatusInfo!]
	"项目类型名称"
	projectTypeName: String!
	"项目类型LangCode，ProjectType.NormalTask  普通任务项目, ProjectType.Agile  敏捷研发项目"
	projectTypeLangCode: String!
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int!
}

"项目信息请求结构体"
input ProjectInfoReq{
	"项目id"
	projectId: Int64!
}

"项目信息结构体"
type ProjectInfo{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"编号"
	code:String!
	"名称"
	name:String!
	"前缀编号"
	preCode:String!
	"项目负责人"
	owner:Int64!
	"项目类型"
	projectTypeId:Int64!
	"项目优先级"
	priorityId:Int64!
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"项目标识"
	resourceId:Int64!
	"是否归档,1归档,2未归档"
	isFiling:Int!
	"描述"
	remark:String!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"创建人信息"
	creatorInfo:UserIdInfo
	"负责人信息"
	ownerInfo:UserIdInfo
	"成员信息"
	memberInfo:[UserIdInfo]
	"关注人信息"
	followerInfo:[UserIdInfo]
	"封面地址"
	resourcePath:String!
	"所有状态"
	allStatus:[HomeIssueStatusInfo!]
}

type RelationType{
    "用户id"
    userId:Int64
    "类型id"
    relationType:Int
    "项目id"
    projectId:Int64
    "外部组织用户id"
    outOrgUserId:String
    "外部用户id"
    outUserId:String
    "姓名"
    name:String
    "头像"
    avatar:String
}

input CreateProjectReq{
    "编号"
	code:String
	"名称"
	name:String!
	"前缀编号"
	preCode:String
	"负责人id"
	owner:Int64!
	"项目类型"
	projectTypeId:Int64
	"优先级"
	priorityId:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"项目公开性,1公开,2私有"
	publicStatus:Int!
	"资源id"
	resourceId:Int64
	"是否归档,1归档,2未归档"
	isFiling:Int
	"描述"
	remark:String
	"项目状态"
	status:Int64
	"创建时间"
	createTime:Time
	"更新人"
	updator:Int64
	"更新时间"
	updateTime:Time
	"资源路径"
	resourcePath:String!
	"资源类型1本地2oss3钉盘"
	resourceType:Int!
	"用户成员id"
	memberIds:[Int64!]
	"关注人id"
	followerIds:[Int64!]
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int
}

input UpdateProjectReq{
    "项目id"
    id:Int64!
    "编号"
    code:String
    "名称"
    name:String
    "前缀编号"
    preCode:String
    "负责人id"
    owner:Int64
    "优先级"
    priorityId:Int64
    "计划开始时间"
    planStartTime:Time
    "计划结束时间"
    planEndTime:Time
    "项目公开性,1公开,2私有"
    publicStatus:Int
    "资源id"
    resourceId:Int64
    "描述"
    remark:String
    "项目状态"
    status:Int64
    "资源路径"
    resourcePath:String
    "资源类型1本地2oss3钉盘"
    resourceType:Int
    "用户成员id"
    memberIds:[Int64!]
	"关注人id"
	followerIds:[Int64!]
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int
    "变动的字段列表"
    updateFields:[String!]!
}

input DeleteProjectReq{
    "项目id"
	id:Int64!
}

type ProjectList{
    "项目数量"
    total:Int64!
    "项目列表"
    list:[Project!]
}

type QuitResult{
    "是否退出"
    isQuitted:Any!
}

input ConvertCodeReq{
    "项目名"
	name: String!
}

type ConvertCodeResp{
    "项目code"
	code: String!
}

type OperateProjectResp{
    "是否成功"
    isSuccess:Any!
}

type ProjectStatisticsResp{
    "迭代数量"
	iterationTotal:Int64!
	"任务数量"
	taskTotal:Int64!
	"成员数量"
	memberTotal:Int64!
}

"项目任务关联的状态请求结构体"
input ProjectIssueRelatedStatusReq{
	"项目id"
	projectId: Int64!
	"项目对象类型id"
	projectObjectTypeId: Int64!
}

input UpdateProjectStatusReq{
	"项目id"
	projectId: Int64!
	"下一个状态"
	nextStatusId: Int64!
}

input ProjectsReq{
	"主键"
	id:Int64
	"名称"
	name:String
	"项目负责人"
	owner:Int64
	"项目类型"
	projectTypeId:Int64
	"项目优先级"
	priorityId:Int64
	"计划开始时间"
	planStartTime:Time
	"计划结束时间"
	planEndTime:Time
	"是否归档,1归档,2未归档,3全部（不传默认查未归档）"
	isFiling:Int
	"项目状态,从状态表取"
	status:Int64
	"项目状态，通用（1未开始2进行中3已完成4未完成）"
	statusType:Int
	"创建人集合"
	creatorIds:[Int64!]
	"负责人集合"
	ownerIds:[Int64!]
	"关联类型(0所有1我发起的2我负责的3我参与的4我负责的和我参与的)"
	relateType:Int64
	"参与人"
	participants:[Int64!]
	"关注人"
	followers:[Int64!]
}

input ProjectUserListReq{
	"项目id"
	projectId:Int64!
}

type ProjectUserListResp{
	total:Int64!
	list:[projectUser!]
}

type projectUser{
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"用户信息"
	userInfo:PersonalInfo
	"创建人信息（添加人）"
	creatorInfo:PersonalInfo
	"用户角色"
	userRole:UserRoleInfo
}

"移出项目成员"
input RemoveProjectMemberReq{
	"项目id"
	projectId:Int64!
	"要移除的项目成员列表"
	memberIds: [Int64!]!
}`},
	&ast.Source{Name: "schema/project_day_stat.graphql", Input: `"迭代统计查询请求"
input ProjectDayStatReq{
	"迭代id"
	projectId: Int64!
	"开始时间"
	startDate: Time
	"结束时间"
	endDate: Time
}

"项目日统计结构体"
type ProjectDayStat{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已逾期问题数"
	issueOverdueCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已逾期需求数"
	demandOverdueCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已逾期故事点数"
	storyPointOverdueCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已逾期任务数"
	taskOverdueCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已逾期缺陷数"
	bugOverdueCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已逾期测试任务数"
	testtaskOverdueCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建项目日统计请求结构体"
input CreateProjectDayStatReq{
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新项目日统计请求结构体"
input UpdateProjectDayStatReq{
	"主键"
	id:Int64!
	"组织id,应该是全局的,因此填0"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"问题总数"
	issueCount:Int!
	"未开始问题数"
	issueWaitCount:Int!
	"进行中问题数"
	issueRunningCount:Int!
	"已完成问题数"
	issueEndCount:Int!
	"需求总数"
	demandCount:Int!
	"未开始需求数"
	demandWaitCount:Int!
	"进行中需求数"
	demandRunningCount:Int!
	"已完成需求数"
	demandEndCount:Int!
	"故事点总数"
	storyPointCount:Int!
	"未开始故事点数"
	storyPointWaitCount:Int!
	"进行中故事点数"
	storyPointRunningCount:Int!
	"已完成故事点数"
	storyPointEndCount:Int!
	"任务总数"
	taskCount:Int!
	"未开始任务数"
	taskWaitCount:Int!
	"进行中任务数"
	taskRunningCount:Int!
	"已完成任务数"
	taskEndCount:Int!
	"缺陷总数"
	bugCount:Int!
	"未开始缺陷数"
	bugWaitCount:Int!
	"进行中缺陷数"
	bugRunningCount:Int!
	"已完成缺陷数"
	bugEndCount:Int!
	"测试任务总数"
	testtaskCount:Int!
	"未开始测试任务数"
	testtaskWaitCount:Int!
	"进行中测试任务数"
	testtaskRunningCount:Int!
	"已完成测试任务数"
	testtaskEndCount:Int!
	"扩展"
	ext:String!
	"统计日期"
	statDate:Time!
	"项目状态,从状态表取"
	status:Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除项目日统计请求结构体"
input DeleteProjectDayStatReq{
	"主键"
	id:Int64!
}

"项目日统计列表响应结构体"
type ProjectDayStatList{
    total:Int64!
    list:[ProjectDayStat!]
}`},
	&ast.Source{Name: "schema/project_detail.graphql", Input: `type ProjectDetail{
	"详情id"
	id:Int64!
	"组织id"
	orgId:Int64!
	"项目id"
	projectId:Int64!
	"公告"
	notice:String!
	"是否启用工时和故事点,1启用,2不启用"
	isEnableWorkHours:Int!
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int!
	creator:Int64!
	createTime:Time!
	updator:Int64!
	updateTime:Time!
}

input CreateProjectDetailReq{
	orgId:Int64!
	projectId:Int64!
	isEnableWorkHours:Int
	notice:String!
}

input UpdateProjectDetailReq{
	"详情id"
	id:Int64!
	"项目id"
	projectId:Int64
	"公告"
	notice:String
	"是否启用工时和故事点,1启用,2不启用"
	isEnableWorkHours:Int
	"是否同步到飞书日历(1是2否,默认否)"
	isSyncOutCalendar:Int
}

input DeleteProjectDetailReq{
	id:Int64!
}

type ProjectDetailList{
    total:Int64!
    list:[ProjectDetail!]
}`},
	&ast.Source{Name: "schema/project_object_type.graphql", Input: `"项目支持的对象类型请求结构体"
input ProjectSupportObjectTypeListReq{
	"项目id"
	projectId: Int64!
}

"项目支持的对象类型响应结构体"
type ProjectSupportObjectTypeListResp{
	"项目支持的对象类型"
	projectSupportList:[ProjectObjectTypeRestInfo!]
	"迭代支持的对象类型"
	iterationSupportList:[ProjectObjectTypeRestInfo!]
}

"项目对象类型简单信息结构体"
type ProjectObjectTypeRestInfo{
	"主键"
	id:Int64!
	"语言编号"
	langCode:String!
	"名称"
	name:String!
	"类型,1迭代，2问题"
	objectType:Int!
}

"项目对象类型结构体"
type ProjectObjectType{
	"主键"
	id:Int64!
	"组织id,全局的填0"
	orgId:Int64!
	"语言编号"
	langCode:String!
	"编号前缀"
	preCode:String!
	"名称"
	name:String!
	"类型,1迭代，2问题"
	objectType:Int!
	"背景颜色"
	bgStyle:String!
	"字体颜色"
	fontStyle:String!
	"icon路径"
	icon:String!
	"排序"
	sort:Int!
	"描述"
	remark:String!
	"是否只读,1是 2否"
	isReadonly:Int!
	"状态,  1可用,2禁用"
	status:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建项目对象类型请求结构体"
input CreateProjectObjectTypeReq{
	"项目id,用来校验权限"
	projectId:Int64!
	"名称"
	name:String!
	"类型,1迭代，2问题"
	objectType:Int!
	"前一个对象类型的id 没有给0"
	beforeId:Int64!
}

"更新项目对象类型请求结构体"
input UpdateProjectObjectTypeReq{
	"主键"
	id:Int64!
	"项目iid,用来校验权限"
	projectId:Int64!
	"名称"
	name:String!
	"排序"
	sort:Int!
	"后一系列对象类型的id"
	afterId:Int64
	"往前挪的一些列对象类型的id"
	beforeId:Int64
}

"删除项目对象类型请求结构体"
input DeleteProjectObjectTypeReq{
	"主键"
	id:Int64!
	"项目iid,用来校验权限"
	projectId:Int64!
}

"项目对象类型列表响应结构体"
type ProjectObjectTypeList{
	"总数量"
	total: Int64!
	"列表"
    list:[ProjectObjectType!]
}

"项目对象类型列表响应结构体"
type ProjectObjectTypeWithProjectList{
	"列表"
	list:[ProjectObjectType!]
}


input projectObjectTypesReq{
	"类型,1迭代，2问题"
	objectType:Int!
	"任务栏id集合"
	Ids:[Int64!]
}`},
	&ast.Source{Name: "schema/project_type.graphql", Input: `"项目类型入参"
input projectTypesReq{
    "主键"
    id:Int64
    "组织编号"
    orgId:Int64
    "语言编号"
    langCode:String
    "名称"
    name:String
}

"结构体"
type ProjectType{
    "主键"
    id:Int64!
    "组织编号"
    orgId:Int64!
    "语言编号"
    langCode:String!
    "名称"
    name:String!
    "排序"
    sort:Int!
    "默认流程编号"
    defaultProcessId:Int64!
    "是否只读,2否,1是"
    isReadonly:Int!
    "描述"
    remark:String!
    "状态,  1可用,2禁用"
    status:Int!
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
}

"列表响应结构体"
type ProjectTypeList{
    total:Int64!
    list:[ProjectType!]
}`},
	&ast.Source{Name: "schema/resource.graphql", Input: `"存放各类资源，其他业务表统一关联此表id结构体"
type Resource{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"host"
	host:String!
	"路径"
	path:String!
	"缩略图路径"
	pathCompressed: String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件大小"
	size:Int64!
	"创建人姓名"
	creatorName: String!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件类型"
	fileType:Int!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"创建存放各类资源，其他业务表统一关联此表id请求结构体"
input CreateResourceReq{
	"组织id"
	orgId:Int64!
	"路径"
	path:String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新存放各类资源，其他业务表统一关联此表id请求结构体"
input UpdateResourceReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"路径"
	path:String!
	"文件名"
	name:String!
	"存储类型,1：本地，2：oss,3.钉盘"
	type:Int!
	"文件后缀"
	suffix:String!
	"文件的md5"
	md5:String!
	"文件大小"
	size: Int64!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除存放各类资源，其他业务表统一关联此表id请求结构体"
input DeleteResourceReq{
	"主键"
	id:Int64!
}

"存放各类资源，其他业务表统一关联此表id列表响应结构体"
type ResourceList{
    total:Int64!
    list:[Resource!]
}


"新增项目资源"
input CreateProjectResourceReq{
    "项目id"
    projectId: Int64!
    "文件夹id"
    folderId:Int64!
    "资源路径"
    resourcePath: String!
    "资源大小，单位B"
    resourceSize: Int64!
    "文件名"
    fileName: String!
    "文件后缀"
    fileSuffix: String!
    "md5"
    md5: String
    "bucketName"
    bucketName: String
}



input UpdateProjectResourceFolderReq{
    "当前文件夹id"
    currentFolderId:Int64!
    "目标文件夹id"
    targetFolderId:Int64!
    "文件id数组"
    resourceIds:[Int64!]!
    "项目id"
    projectId: Int64!
}

type UpdateProjectResourceFolderResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input UpdateProjectResourceNameReq{
    "文件id"
    resourceId:Int64!
    "项目id"
    projectId: Int64!

    "文件名"
    fileName: String
    "文件后缀"
    fileSuffix: String

    "修改项"
    updateFields:[String!]!
}

input DeleteProjectResourceReq{
    "文件id数组"
    resourceIds:[Int64!]!
    "文件夹id,只支持相同目录下的批量文件删除"
    folderId:Int64!
    "项目id"
    projectId:Int64!
}

type DeleteProjectResourceResp{
    "文件id数组"
    resourceIds:[Int64!]!
}

input ProjectResourceReq {
    "文件夹id"
    folderId:Int64!
    "项目id"
    projectId:Int64!
}
`},
	&ast.Source{Name: "schema/role.graphql", Input: `input UpdateUserOrgRoleReq {
    "用户id"
    userId:Int64!
    "修改后的角色id"
    roleId:Int64!
    "项目Id"
    projectId:Int64
}

"结构体"
type Role{
    "主键"
    id:Int64!
    "组织id,全局为0"
    orgId:Int64!
    "语言编号"
    langCode:String!
    "名称"
    name:String!
    "描述"
    remark:String!
    "是否只读 1只读 2可编辑"
    isReadonly:Int!
    "是否可以变更权限,1可以,2不可以"
    isModifyPermission:Int!
    "是否默认角色,1是,2否"
    isDefault:Int!
    "角色分组"
    roleGroupId:Int64!
    "状态,  1可用,2禁用"
    status:Int!
    "创建人"
    creator:Int64!
    "创建时间"
    createTime:Time!
    "更新人"
    updator:Int64!
    "更新时间"
    updateTime:Time!
}

"创建角色请求结构体"
input CreateRoleReq{
    "角色组1组织角色2项目角色"
    roleGroupType:Int!
    "名称"
    name:String!
    "描述"
    remark:String
    "是否只读 1只读 2可编辑"
    isReadonly:Int
    "是否可以变更权限,1可以,2不可以"
    isModifyPermission:Int
    "是否默认角色,1是,2否"
    isDefault:Int
    "状态,  1可用,2禁用"
    status:Int
    "项目id"
    projectId:Int64
}

"删除角色请求结构体"
input DelRoleReq{
    "角色ID"
    roleIds: [Int64!]!
    "如果删除项目角色，projectId必填，如果删除组织角色，projectId可以不传或者传0"
    projectId: Int64
}

"更新角色请求结构体"
input UpdateRoleReq{
    "角色ID"
    roleId: Int64!
    "角色名称, 非必填，为空则不更新"
    name: String
}`},
	&ast.Source{Name: "schema/schema.graphql", Input: `type Query {
    ############### business
    "获取系统基本信息"
    getBaseConfig: BasicConfigResp!
    "获取的当前用户的信息"
    personalInfo: PersonalInfo!

    "获取用户配置信息"
    userConfigInfo: UserConfig!
    "获取首页的任务列表(默认不获取已归档的任务)"
    homeIssues(page: Int!, size: Int!, input: HomeIssueInfoReq): HomeIssueInfoResp!
    "获取任务信息"
    issueInfo(issueId: Int64!): IssueInfo!
    "获取任务的简单信息（任务详情子任务信息）"
    issueRestInfos(page: Int!, size: Int!, input: IssueRestInfoReq): IssueRestInfoResp!
    "关联任务列表"
    relatedIssueList(input:RelatedIssueListReq!):IssueRestInfoResp!
    "获取分享列表  type:(分享类型1日报2周报3月报)"
    issueReport(reportType: Int64!): IssueReportResp!
    "分享页获取分享内容"
    issueReportDetail(shareId: String!): IssueReportResp!

    "个人负责的未完成的任务和项目数统计(不统计已归档的项目)"
    issueAndProjectCountStat: IssueAndProjectCountStatResp!

    "任务状态类型数量统计(不统计已归档的项目)"
    issueStatusTypeStat(input: IssueStatusTypeStatReq): IssueStatusTypeStatResp!
    "任务类型统计(不统计已归档的项目)"
    issueStatusTypeStatDetail(input: IssueStatusTypeStatReq):IssueStatusTypeStatDetailResp!
    "个人每日工作完成图统计(不统计已归档的项目)"
    issueDailyPersonalWorkCompletionStat(input: IssueDailyPersonalWorkCompletionStatReq): IssueDailyPersonalWorkCompletionStatResp!

    "任务分配rank排行(Top5)(不统计已归档的项目)"
    issueAssignRank(input: IssueAssignRankReq!):[IssueAssignRankInfo!]

    "获取任务资源"
    issueResources(page: Int, size: Int, input: GetIssueResourcesReq):ResourceList!

    "获取动态列表"
    trendList(input:TrendReq):TrendsList!
    "项目数据统计"
    projectStatistics(id:Int64!):ProjectStatisticsResp!

    "获取当前项目中对应任务类型所包含的状态列表"
    projectIssueRelatedStatus(input: ProjectIssueRelatedStatusReq!):[HomeIssueStatusInfo!]!

    "获取不同类型的状态下的迭代数量"
    iterationStatusTypeStat(input: IterationStatusTypeStatReq):IterationStatusTypeStatResp!
    "获取迭代信息"
    iterationInfo(input: IterationInfoReq!): IterationInfoResp!

    "通过外部用户id列表获取内部用户id列表"
    userIds(input: [String!]!): [UserIdInfo!]!
    "通过外部用户id获取内部用户id"
    userId(input: String!): UserIdInfo!

    "获取OSS sign url"
    getOssSignUrl(input: OssApplySignUrlReq!): OssApplySignUrlResp!
    "获取OSS policy认证信息"
    getOssPostPolicy(input: OssPostPolicyReq!): OssPostPolicyResp!
    "获取邀请码"
    getInviteCode(input: GetInviteCodeReq): GetInviteCodeResp!
    "获取邀请信息"
    getInviteInfo(input: GetInviteInfoReq!): GetInviteInfoResp!
    "获取MQTT通道key"
    getMQTTChannelKey(input: GetMQTTChannelKeyReq!): GetMQTTChannelKeyResp!

    "获取项目和迭代支持的对象列表"
    projectSupportObjectTypes(input: ProjectSupportObjectTypeListReq!): ProjectSupportObjectTypeListResp!

    ## power by codegen
    "获取优先级列表"
    prioritys(page: Int, size: Int, params: PriorityListReq):PriorityList!
    "获取流程状态列表"
    processStatuss(page: Int, size: Int):ProcessStatusList!
    "获取项目列表"
    projects(page: Int!, size: Int!, params: Map!, order:[String], input: ProjectsReq):ProjectList!
    "获取项目信息"
    projectInfo(input: ProjectInfoReq!): ProjectInfo!

    "获取迭代列表"
    iterations(page: Int, size: Int, params: IterationListReq):IterationList!
    "获取迭代燃尽图统计"
    iterationStats(page: Int, size: Int, params: IterationStatReq!):IterationStatList!
    "获取项目明细列表"
    projectDetail(projectId:Int64!):ProjectDetail!
    "获取项目对象类型"
    projectObjectTypes(page: Int, size: Int, params: projectObjectTypesReq):ProjectObjectTypeList!
    "获取项目中任务的燃尽图"
    projectDayStats(page: Int, size: Int, params: ProjectDayStatReq):ProjectDayStatList!
    "获取问题类型列表"
    issueObjectTypes(page: Int, size: Int, params: IssueObjectTypesReq):IssueObjectTypeList!
    "获取问题来源列表"
    issueSources(page: Int, size: Int, params: IssueSourcesReq):IssueSourceList!

    ## power by codegen
    "获取一个项目下的所有项目对象类型"
    projectObjectTypesWithProject(projectId:Int64!):ProjectObjectTypeWithProjectList!
    "获取部门列表"
    departments(page: Int, size: Int, params: DepartmentListReq):DepartmentList!
    "获取部门成员列表"
    departmentMembers(params: DepartmentMemberListReq!):[DepartmentMemberInfo!]!
    "获取项目类型"
    projectTypes:[ProjectType!]
    "用户组织列表(不需要验证当前用户组织状态)"
    userOrganizationList:UserOrganizationListResp!

    "标签列表"
    tagList(page: Int, size: Int, params: TagListReq!):TagList!
    "热度标签(全部标签)"
    hotTagList(projectId:Int64!):TagList!
    "标签颜色列表"
    tagDefaultStyle:StypeList!
    "通知列表"
    noticeList(page: Int, size: Int, params: NoticeListReq):NoticeList!
    "获取未读通知条数"
    unreadNoticeCount:NoticeCountResp!
    "地区联动列表"
    areaLinkageList(input:AreaLinkageListReq!):AreaLinkageListResp!
    "行业列表"
    industryList:IndustryListResp!
    "组织信息"
    organizationInfo(input:OrganizationInfoReq!):OrganizationInfoResp!


    "导出项目任务excel模板"
    exportIssueTemplate(projectId:Int64!):ExportIssueTemplateResp!
    "组织成员列表"
    orgUserList(page: Int, size: Int, input: OrgUserListReq!):UserOrganizationList!
    "操作权限项列表"
    permissionOperationList(roleId: Int64!, projectId: Int64):[PermissionOperationListResp!]!
    "组织角色列表"
    orgRoleList:[Role!]!
    "导出项目任务数据"
    exportData(projectId:Int64!):ExportIssueTemplateResp!
    "项目成员列表"
    projectUserList(page: Int, size: Int, input: ProjectUserListReq!):ProjectUserListResp!
    "项目角色列表"
    projectRoleList(projectId:Int64!):[Role!]!
    "项目组织成员"
    orgProjectMember(input:OrgProjectMemberReq!):OrgProjectMemberResp!

    "查询项目文件资源"
    projectResource(page: Int, size: Int,params:ProjectResourceReq!):ResourceList!
    "查询项目文件夹"
    projectFolder(page: Int, size: Int,params:ProjectFolderReq!):FolderList!

    "查询项目下所有附件"
    projectAttachment(page: Int, size: Int,params: ProjectAttachmentReq!):AttachmentList!

    getPersonalPermissionInfo(projectId: Int64, issueId: Int64):GetPersonalPermissionInfoResp!
}

type Mutation {
    "发送短信登录验证码"
    sendSmsLoginCode(input: SendSmsLoginCodeReq!): Void!
    "发送各种验证码(目前支持手机号以及邮箱)"
    sendAuthCode(input: SendAuthCodeReq!): Void!
    "通过手机号和邮箱找回密码"
    retrievePassword(input: RetrievePasswordReq!): Void!
    "重设密码"
    resetPassword(input: ResetPasswordReq!): Void!
    "设置密码"
    setPassword(input: SetPasswordReq!): Void!
    "解绑登录方式"
    unbindLoginName(input: UnbindLoginNameReq!): Void!
    "绑定登录方式"
    bindLoginName(input: BindLoginNameReq!): Void!
    "检测邮箱、手机号、账户是否存在"
    checkLoginName(input: CheckLoginNameReq!): Void!

    "用户登录"
    userLogin(input: UserLoginReq!): UserLoginResp!
    "用户注册"
    userRegister(input: UserRegisterReq!): UserRegisterResp!
    "用户退出"
    userQuit:Void!
    "官网注册联系人"
    registerWebSiteContact(input: RegisterWebSiteContactReq!): Void!

    "退出项目"
    quitProject(projectId:Int64!):QuitResult!
    "关注项目"
    starProject(projectId:Int64!):OperateProjectResp!
    "取消关注项目"
    unstarProject(projectId:Int64!):OperateProjectResp!
    "修改项目状态"
    updateProjectStatus(input: UpdateProjectStatusReq!): Void!
    "归档项目"
    archiveProject(projectId:Int64!):Void!
    "项目取消归档"
    cancelArchivedProject(projectId:Int64!):Void!

    "更新用户配置"
    updateUserConfig(input: UpdateUserConfigReq!): UpdateUserConfigResp!
    "更新用户默认项目配置"
    updateUserDefaultProjectConfig(input: UpdateUserDefaultProjectConfigReq!): UpdateUserConfigResp!
    "更新用户pc的通知配置"
    updateUserPcConfig(input: UpdateUserPcConfigReq!): UpdateUserConfigResp!

    "转换项目code"
    convertCode(input: ConvertCodeReq!): ConvertCodeResp!

    "迭代和任务关联"
    updateIterationIssueRelate(input: IterationIssueRealtionReq!): Void!
    "更新迭代状态"
    updateIterationStatus(input: UpdateIterationStatusReq!): Void!
    ## power by codegen

    "创建组织(不需要验证当前用户组织状态)"
    createOrg(input: CreateOrgReq!):Void!

    "创建任务"
    createIssue(input: CreateIssueReq!):Issue!
    "添加任务评论"
    createIssueComment(input: CreateIssueCommentReq!): Void!
    "添加任务资源"
    createIssueResource(input: CreateIssueResourceReq!): Void!
    "删除任务资源"
    deleteIssueResource(input: DeleteIssueResourceReq!): Void!
    "更新关联任务"
    updateIssueAndIssueRelate(input: UpdateIssueAndIssueRelateReq!): Void!

    "更新任务"
    updateIssue(input: UpdateIssueReq!):UpdateIssueResp!
    "更新任务状态"
    updateIssueStatus(input: UpdateIssueStatusReq!):Issue!
    "更新任务sort"
    updateIssueSort(input: UpdateIssueSortReq!): Void!
    "更新任务泳道"
    updateIssueProjectObjectType(input:UpdateIssueProjectObjectTypeReq!):Void!
    "更新任务标签"
    updateIssueTags(input: UpdateIssueTagsReq!): Void!
    "删除任务"
    deleteIssue(input: DeleteIssueReq!):Issue!

    "创建项目"
    createProject(input: CreateProjectReq!):Project!
    "更新项目"
    updateProject(input: UpdateProjectReq!):Project!

    "创建流程状态"
    createProcessStatus(input: CreateProcessStatusReq!):Void!
    "更新流程状态"
    updateProcessStatus(input: UpdateProcessStatusReq!):Void!
    "删除流程状态"
    deleteProcessStatus(input: DeleteProcessStatusReq!):Void!

    "创建优先级"
    createPriority(input: CreatePriorityReq!):Void!
    "更新优先级"
    updatePriority(input: UpdatePriorityReq!):Void!
    "删除优先级"
    deletePriority(input: DeletePriorityReq!):Void!

    "创建迭代"
    createIteration(input: CreateIterationReq!):Void!
    "更新迭代"
    updateIteration(input: UpdateIterationReq!):Void!
    "删除迭代"
    deleteIteration(input: DeleteIterationReq!):Void!

    "创建项目明细"
    createProjectDetail(input: CreateProjectDetailReq!):Void!
    "更新项目明细"
    updateProjectDetail(input: UpdateProjectDetailReq!):Void!
    "删除项目明细"
    deleteProjectDetail(input: DeleteProjectDetailReq!):Void!
    "导入项目任务"
    importIssues(input:ImportIssuesReq!):Void!
    "创建标签"
    createTag(input:CreateTagReq!):Void!
    "删除标签"
    deleteTag(input:DeleteTagReq!):Void!
    "更新标签"
    updateTag(input:UpdateTagReq!):Void!

    createProjectObjectType(input: CreateProjectObjectTypeReq!):Void!
    updateProjectObjectType(input: UpdateProjectObjectTypeReq!):Void!
    deleteProjectObjectType(input: DeleteProjectObjectTypeReq!):Void!

    createIssueObjectType(input: CreateIssueObjectTypeReq!):Void!
    updateIssueObjectType(input: UpdateIssueObjectTypeReq!):Void!
    deleteIssueObjectType(input: DeleteIssueObjectTypeReq!):Void!

    createIssueSource(input: CreateIssueSourceReq!):Void!
    updateIssueSource(input: UpdateIssueSourceReq!):Void!
    deleteIssueSource(input: DeleteIssueSourceReq!):Void!


    "切换用户组织(不需要验证当前用户组织状态)"
    switchUserOrganization(input:SwitchUserOrganizationReq!):Void!
    "更新组织设置"
    updateOrganizationSetting(input:UpdateOrganizationSettingsReq!):Void!

    "修改用户组织角色"
    updateUserOrgRole(input:UpdateUserOrgRoleReq!):Void!
    "修改组织成员状态"
    updateOrgMemberStatus(input:UpdateOrgMemberStatusReq!): Void!
    "修改组织成员审核状态"
    updateOrgMemberCheckStatus(input:UpdateOrgMemberCheckStatusReq!): Void!
    "创建角色"
    createRole(input:CreateRoleReq!):Void!
    "更新角色权限"
    updateRolePermissionOperation(input:UpdateRolePermissionOperationReq!):Void!
    "删除角色"
    delRole(input: DelRoleReq!): Void!
    "更新角色"
    updateRole(input: UpdateRoleReq!): Void!
    "移除组织成员"
    removeOrgMember(input: RemoveOrgMemberReq!): Void !
    "更新用户个人信息"
    updateUserInfo(input:UpdateUserInfoReq!):Void!
    "移出项目"
    removeProjectMember(input: RemoveProjectMemberReq!):Void!
    "添加项目成员"
    addProjectMember(input: RemoveProjectMemberReq!):Void!



    "添加项目文件"
    createProjectResource(input: CreateProjectResourceReq!): Void!
    "更新项目文件目录"
    updateProjectResourceFolder(input: UpdateProjectResourceFolderReq!): UpdateProjectResourceFolderResp!
    "更新项目文件名"
    updateProjectResourceName(input: UpdateProjectResourceNameReq!): Void!
    "删除项目文件"
    deleteProjectResource(input: DeleteProjectResourceReq!): DeleteProjectResourceResp!


    "创建文件夹"
    createProjectFolder(input: CreateProjectFolderReq!):Void!
    "删除文件夹"
    deleteProjectFolder(input: DeleteProjectFolderReq!):DeleteProjectFolderResp!
    "更新文件夹"
    updateProjectFolder(input: UpdateProjectFolderReq!):UpdateProjectFolderResp!

    "删除附件"
    deleteProjectAttachment(input: DeleteProjectAttachmentReq!):DeleteProjectAttachmentResp!

}









`},
	&ast.Source{Name: "schema/sms_code.graphql", Input: `"发送短信登录验证码请求结构体"
input SendSmsLoginCodeReq{
    "手机号"
    phoneNumber: String!
    "验证码id"
    captchaId:String
    "输入的验证码"
    captchaPassword:String
}

"发送各种验证码请求结构体"
input SendAuthCodeReq{
    "验证方式: 1: 登录验证码，2：注册验证码，3：修改密码验证码，4：找回密码验证码，5：绑定验证码, 6：解绑验证码"
    authType: Int!
    "地址类型: 1：手机号，2：邮箱"
    addressType: Int!
    "联系地址，根据地址类型区分手机号或者邮箱"
    address: String!
    "验证码id"
    captchaId:String
    "输入的验证码"
    captchaPassword:String
}`},
	&ast.Source{Name: "schema/tag.graphql", Input: `"结构体"
type Tag{
    "id"
    id:Int64!
    "组织id"
    orgId:Int64!
    "项目id"
    projectId:Int64!
    "名称"
    name:String!
    "名称拼音"
    namePinyin:String!
    "背景色"
    bgStyle:String!
    "字体色"
    fontStyle:String!
    "使用任务数"
    usedNum:Int64!
    "创建人id"
    creator:Int64!
    "创建时间"
    createTime:Time!
}

"创建请求结构体"
input CreateTagReq{
    "项目id"
    projectId:Int64!
    "名称"
    name:String!
    "背景颜色"
    bgStyle:String!
    "字体颜色"
    fontStyle:String
}

"更新请求结构体"
input UpdateTagReq{
    id:Int64!
    "名称"
    name:String
    "背景颜色"
    bgStyle:String
}

"删除请求结构体"
input DeleteTagReq{
    "项目id"
    projectId:Int64!
    "标签id集合"
    ids:[Int64!]
}

"列表响应结构体"
type TagList{
    total:Int64!
    list:[Tag!]
}

"查询请求"
input TagListReq{
    "名称"
    name:String
    "名称拼音"
    namePinyin:String
    "项目id"
    projectId:Int64!
}

type StypeList{
    list:[String!]
}
`},
	&ast.Source{Name: "schema/trend.graphql", Input: `"动态列表请求结构体"
input TrendReq {
	"上次分页的最后一条动态id"
	lastTrendId:Int64
	"对象类型"
    objType:String
	"对象id"
	objId:Int64
	"操作id"
	operId:Int64
    "开始时间"
	startTime:Time
	"结束时间"
    endTime:Time
	"分类（1任务动态2评论3项目动态（仅包括项目）4项目动态（包括项目和任务））"
	type:Int
	"page"
    page:Int64
	"size"
    size:Int64
	"排序（1时间正序2时间倒叙）"
	orderType:Int
}

"动态列表"
type TrendsList {
	"总数量"
	total: Int64!
	"页码"
	page:  Int64!
	"size"
	size:  Int64!
	"分页的最后一条动态id"
	lastTrendId:Int64!
	"列表"
	list:  [Trend]
}

"动态信息"
type Trend {
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"一级模块, 系统,组织,项目等"
	module1:String!
	"二级模块id"
	module2Id:Int64!
	"二级模块.系统设置,消息设置,项目问题等"
	module2:String!
	"三级模块id"
	module3Id:Int64!
	"三级模块,issus,迭代"
	module3:String!
	"操作编号"
	operCode:String!
	"被操作对象id"
	operObjId:Int64!
	"被操作对象类型"
	operObjType:String!
	"操作对象属性"
	operObjProperty:String!
	"主关联对象id"
	relationObjId:Int64!
	"主关联对象类型"
	relationObjType:String!
	"关联类型"
	relationType:String!
	"新值,json"
	newValue:String
	"旧值,json"
	oldValue:String
	"扩展信息"
	ext:String!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"被操作对象名称"
	operObjName:String!
	"操作人名称"
	creatorInfo:UserIdInfo!
	"评论内容"
	comment:String
	"扩展信息详情"
	extension:TrendExtension
}

type TrendExtension {
	issueType:String
	"操作对象名称"
	ObjName:String
	"变更列表（主要用于更新字段）"
	changeList:[ChangeList]
	"涉及的变更成员信息（人员更新，关联对象增加/删除）"
	memberInfo:[MemberInfo]
	"关联问题信息"
	relationIssue:RelationIssue
	"关联资源信息"
	resourceInfo:[ResourceInfo]
}

type ChangeList {
	"字段"
	field:String
	"字段名"
	fieldName:String
	"旧值"
	oldValue:String
	"新值"
	newValue:String
}

type MemberInfo{
	"成员信息id"
	id: Int64
	"成员名称"
	name: String
	"成员头像"
	avatar: String
}

type RelationIssue {
	"关联信息id"
	id: Int64
	"关联信息名称"
	title: String
}

type ResourceInfo{
	"路径"
	url: String
	"资源名称"
	name: String
	"资源大小"
	size: Int64
	"上传时间"
	uploadTime:Time
	"文件后缀"
	suffix:String
}`},
	&ast.Source{Name: "schema/type.graphql", Input: `scalar Time
#scalar Date
scalar Int64
scalar Map
scalar Any

"空响应结构体"
type Void{
    "主键"
    id: Int64!
}`},
	&ast.Source{Name: "schema/user.graphql", Input: `"个人信息"
type PersonalInfo{
    "主键"
    id:Int64!
    "工号"
    emplId: String
    "组织id"
    orgId:Int64!
    "组织名称"
    orgName: String!
    "组织code"
    orgCode: String!
    "名称"
    name:String!
    "登录名"
    loginName:String!
    "登录名编辑次数"
    loginNameEditCount:Int!
    "邮箱"
    email:String!
    "电话"
    mobile:String!
    "生日"
    birthday:Time!
    "性别"
    sex:Int!
    "剩余使用时长"
    rimanente:Int!
    "付费等级"
    level:Int!
    "付费等级名"
    levelName:String!
    "头像"
    avatar:String!
    "来源"
    sourceChannel:String!
    "语言"
    language:String!
    "座右铭"
    motto:String!
    "上次登录ip"
    lastLoginIp:String!
    "上次登录时间"
    lastLoginTime:Time!
    "登录失败次数"
    loginFailCount:Int!
    "创建时间"
    createTime:Time!
    "更新时间"
    updateTime:Time!
    "密码是否设置过(1已设置0未设置)"
    passwordSet:Int!
}

"用户id信息"
type UserIdInfo{
    "用户id"
    userId: Int64!
    "用户名称"
    name: String!
    "用户头像"
    avatar: String!
    "工号：企业下唯一"
    emplId: String!
    "unionId： 开发者账号下唯一(暂时废弃，返回空)"
    unionId: String!
    "是否已被删除，为true则代表被组织移除"
    isDeleted: Boolean!
    "是否已被禁用, 为true则代表被组织禁用"
    isDisabled: Boolean!
}

"更改用户个人信息"
input UpdateUserInfoReq{
    "姓名"
    name:String
    "性别"
    sex:Int
    "用户头像"
    avatar:String
    "生日"
    birthday:Time
    "变动的字段列表"
    updateFields:[String!]!
}

input OrgProjectMemberReq{
    "项目id"
    projectId: Int64!
}

type OrgProjectMemberResp  {
    owner  :OrgProjectMemberInfoResp!
    participants :[OrgProjectMemberInfoResp]!
    follower :[OrgProjectMemberInfoResp]!
    allMembers:[OrgProjectMemberInfoResp]!

}
type OrgProjectMemberInfoResp{
    "用户id"
    userId:Int64!
    "外部用户id"
    outUserId:String!
    "组织id"
    orgId:Int64!
    "外部组织id"
    outOrgId:String!
    "姓名"
    name:String!
    "姓名拼音（可能为空）"
    namePy:String
    "用户头像"
    avatar:String!
    "是否有外部信息"
    hasOutInfo:Boolean!
    "是否有组织外部信息"
    hasOrgOutInfo:Boolean!
    "组织用户是否删除"
    orgUserIsDelete :Int!
    "组织用户状态"
    orgUserStatus:Int!
    "组织用户check状态"
    orgUserCheckStatus:Int!
}

`},
	&ast.Source{Name: "schema/user_config.graphql", Input: `"用户配置信息结构体"
type UserConfig{
	"主键"
	id: Int64!
	"个人日报开启状态, 2否, 1是"
	dailyReportMessageStatus:Int!
	"我负责的 2否, 1是"
	ownerRangeStatus:Int!
	"我参与的, 2否, 1是"
	participantRangeStatus:Int!
	"我关注的, 2否, 1是"
	attentionRangeStatus:Int!
	"我创建的, 2否, 1是"
	createRangeStatus:Int!
	"任务提醒状态 2否, 1是"
	remindMessageStatus:Int!
	"评论和at我的通知"
	commentAtMessageStatus:Int!
	"任务更新状态, 2否, 1是"
	modifyMessageStatus:Int!
	"任务关联动态, 2否, 1是"
	relationMessageStatus:Int!
	"项目日报开启状态, 2  否 1:是"
	dailyProjectReportMessageStatus:Int!
	"默认项目id, 机器人创建项目的时候会选用这个项目"
	defaultProjectId: Int64!
	"默认工作栏"
	defaultProjectObjectTypeId: Int64!
	"pc桌面通知开关状态, 2否, 1是"
	pcNoticeOpenStatus: Int!
	"pc任务提醒状态, 2否, 1是"
	pcIssueRemindMessageStatus: Int!
	"pc组织相关推送状态, 2否, 1是"
	pcOrgMessageStatus: Int!
	"pc项目相关推送状态, 2否, 1是"
	pcProjectMessageStatus: Int!
	"pc评论相关推送状态, 2否, 1是"
	pcCommentAtMessageStatus: Int!
}

"更新用户配置响应结构体"
type UpdateUserConfigResp{
	"主键"
	id: Int64!
}

"更新用户配置请求结构体"
input UpdateUserConfigReq{
	"主键"
	id: Int64!
	"个人日报开启状态, 2否, 1是"
	dailyReportMessageStatus:Int!
	"我负责的 2否, 1是"
	ownerRangeStatus:Int!
	"我参与的, 2否, 1是"
	participantRangeStatus:Int!
	"我关注的, 2否, 1是"
	attentionRangeStatus:Int!
	"我创建的, 2否, 1是"
	createRangeStatus:Int!
	"任务提醒状态 2否, 1是"
	remindMessageStatus:Int!
	"评论和at我的通知"
	commentAtMessageStatus:Int!
	"任务更新状态, 2否, 1是"
	modifyMessageStatus:Int!
	"任务关联动态, 2否, 1是"
	relationMessageStatus:Int!
	"项目日报开启状态, 2否, 1是"
	dailyProjectReportMessageStatus:Int!
}

"更新用户pc配置请求结构体"
input UpdateUserPcConfigReq{
	"pc桌面通知开关状态, 2否, 1是"
	pcNoticeOpenStatus: Int
	"pc任务提醒状态, 2否, 1是"
	pcIssueRemindMessageStatus: Int
	"pc组织相关推送状态, 2否, 1是"
	pcOrgMessageStatus: Int
	"pc项目相关推送状态, 2否, 1是"
	pcProjectMessageStatus: Int
	"pc评论相关推送状态, 2否, 1是"
	pcCommentAtMessageStatus: Int
	"变动的字段列表"
	updateFields:[String!]
}

"更新用户默认项目配置请求结构体"
input UpdateUserDefaultProjectConfigReq{
	"默认项目id, 机器人创建项目的时候会选用这个项目"
	defaultProjectId: Int64!
	"默认工作栏id"
	defaultProjectObjectTypeId: Int64
}`},
	&ast.Source{Name: "schema/user_organization.graphql", Input: `"结构体"
type OrganizationUser{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"用户信息"
	userInfo:PersonalInfo!
	"审核人信息"
	auditorInfo:PersonalInfo
	"用户角色"
	userRole:UserRoleInfo
}

type UserRoleInfo {
	"角色id"
	id:Int64!
	"角色名称"
	name:String!
    "角色lang_code"
    langCode:String!
}

"创建请求结构体"
input CreateUserOrganizationReq{
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"更新请求结构体"
input UpdateUserOrganizationReq{
	"主键"
	id:Int64!
	"组织id"
	orgId:Int64!
	"用户id"
	userId:Int64!
	"审核状态,1待审核,2审核通过,3审核不过"
	checkStatus:Int!
	"使用状态,1已使用,2未使用"
	useStatus:Int!
	"企业用户状态, 1可用,2禁用"
	status:Int!
	"状态变更人id"
	statusChangerId:Int64!
	"状态变更时间"
	statusChangeTime:Time!
	"审核人id"
	auditorId:Int64!
	"审核时间"
	auditTime:Time!
	"创建人"
	creator:Int64!
	"创建时间"
	createTime:Time!
	"更新人"
	updator:Int64!
	"更新时间"
	updateTime:Time!
	"乐观锁"
	version:Int!
	"是否删除,1是,2否"
	isDelete:Int!
}

"删除请求结构体"
input DeleteUserOrganizationReq{
	"主键"
	id:Int64!
}

"列表响应结构体"
type UserOrganizationList{
    total:Int64!
    list:[OrganizationUser!]
}

"列表请求结构体"
input OrgUserListReq{
	"审核状态,1待审核,2审核通过,3审核不过(成员管理取审核通过的，成员审核取待审核和审核不过的)"
	checkStatus:[Int!]
	"使用状态,1已使用,2未使用"
	useStatus:Int
	"企业用户状态, 1可用,2禁用"
	status:Int
}`},
	&ast.Source{Name: "schema/website.graphql", Input: `"官网注册联系人请求结构体"
input RegisterWebSiteContactReq{
    "性别：1 女，2 男"
    sex: Int
    "姓名"
    name: String
    "联系信息，可填手机号或者是邮箱（目前仅支持手机号）"
    contactInfo: String!
    "问题描述"
    remark: String
    "问题图片url"
    resourceUrls: [String!]
    "来源"
    source: String
}`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addProjectMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RemoveProjectMemberReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRemoveProjectMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRemoveProjectMemberReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archiveProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bindLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.BindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBindLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelArchivedProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_checkLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CheckLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCheckLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_convertCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ConvertCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNConvertCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueCommentReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIssueCommentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueCommentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIssueResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssueSource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueSourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueSourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIssueReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateOrgReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateOrgReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateOrgReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPriority_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreatePriorityReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreatePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreatePriorityReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProcessStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProcessStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProcessStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProjectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectDetailReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectDetailReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProjectObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProjectResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateProjectReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProjectReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateRoleReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateRoleReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.CreateTagReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateTagReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DelRoleReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDelRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDelRoleReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssueObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssueResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteIssueResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssueSource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueSourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueSourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIssueReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePriority_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeletePriorityReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeletePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeletePriorityReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProcessStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProcessStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProcessStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectAttachmentReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProjectAttachmentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectDetailReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectDetailReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteProjectResourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DeleteTagReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteTagReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_importIssues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ImportIssuesReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNImportIssuesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐImportIssuesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_quitProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerWebSiteContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RegisterWebSiteContactReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRegisterWebSiteContactReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRegisterWebSiteContactReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeOrgMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RemoveOrgMemberReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRemoveOrgMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRemoveOrgMemberReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeProjectMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RemoveProjectMemberReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRemoveProjectMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRemoveProjectMemberReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ResetPasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNResetPasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResetPasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_retrievePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RetrievePasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRetrievePasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRetrievePasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendAuthCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SendAuthCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSendAuthCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendAuthCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendSmsLoginCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SendSmsLoginCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSendSmsLoginCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendSmsLoginCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SetPasswordReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSetPasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetPasswordReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_starProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_switchUserOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.SwitchUserOrganizationReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSwitchUserOrganizationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSwitchUserOrganizationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unbindLoginName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UnbindLoginNameReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUnbindLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUnbindLoginNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unstarProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueAndIssueRelate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueAndIssueRelateReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueAndIssueRelateReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueAndIssueRelateReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueProjectObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueProjectObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueProjectObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueSort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueSortReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueSortReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueSortReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueSource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueSourceReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueSourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssueTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueTagsReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueTagsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueTagsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIssue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIssueReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIterationIssueRelate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IterationIssueRealtionReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNIterationIssueRealtionReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationIssueRealtionReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIterationStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIterationStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIteration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateIterationReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgMemberCheckStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrgMemberCheckStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateOrgMemberCheckStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberCheckStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgMemberStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrgMemberStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateOrgMemberStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateOrganizationSettingsReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateOrganizationSettingsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrganizationSettingsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePriority_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdatePriorityReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdatePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdatePriorityReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProcessStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProcessStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProcessStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectDetailReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectDetailReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectObjectType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectObjectTypeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectObjectTypeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectResourceFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectResourceFolderReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectResourceFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectResourceName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectResourceNameReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectResourceNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceNameReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateProjectReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProjectReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRolePermissionOperation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateRolePermissionOperationReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateRolePermissionOperationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateRolePermissionOperationReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateRoleReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateRoleReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateTagReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateTagReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserConfigReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserDefaultProjectConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserDefaultProjectConfigReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserDefaultProjectConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserDefaultProjectConfigReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserOrgRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserOrgRoleReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserOrgRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserOrgRoleReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPcConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UpdateUserPcConfigReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserPcConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserPcConfigReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userLogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UserLoginReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserLoginReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userRegister_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.UserRegisterReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserRegisterReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_areaLinkageList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.AreaLinkageListReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAreaLinkageListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departmentMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.DepartmentMemberListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg0, err = ec.unmarshalNDepartmentMemberListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.DepartmentListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalODepartmentListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_exportData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_exportIssueTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getInviteCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.GetInviteCodeReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOGetInviteCodeReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getInviteInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetInviteInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetInviteInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMQTTChannelKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.GetMQTTChannelKeyReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetMQTTChannelKeyReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOssPostPolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OssPostPolicyReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOssPostPolicyReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOssSignUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OssApplySignURLReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOssApplySignUrlReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssApplySignURLReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPersonalPermissionInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["issueId"]; ok {
		arg1, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["issueId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_homeIssues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.HomeIssueInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg2, err = ec.unmarshalOHomeIssueInfoReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_hotTagList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueAssignRank_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IssueAssignRankReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNIssueAssignRankReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueDailyPersonalWorkCompletionStat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IssueDailyPersonalWorkCompletionStatReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOIssueDailyPersonalWorkCompletionStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["issueId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["issueId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueObjectTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.IssueObjectTypesReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOIssueObjectTypesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_issueReportDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["shareId"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shareId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueReport_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["reportType"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reportType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.GetIssueResourcesReq
	if tmp, ok := rawArgs["input"]; ok {
		arg2, err = ec.unmarshalOGetIssueResourcesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueResourcesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_issueRestInfos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.IssueRestInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg2, err = ec.unmarshalOIssueRestInfoReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_issueSources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.IssueSourcesReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOIssueSourcesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourcesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_issueStatusTypeStatDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IssueStatusTypeStatReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOIssueStatusTypeStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_issueStatusTypeStat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IssueStatusTypeStatReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOIssueStatusTypeStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iterationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.IterationInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNIterationInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iterationStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.IterationStatReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNIterationStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_iterationStatusTypeStat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.IterationStatusTypeStatReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOIterationStatusTypeStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iterations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.IterationListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOIterationListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_noticeList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.NoticeListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalONoticeListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_orgProjectMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OrgProjectMemberReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOrgProjectMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orgUserList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.OrgUserListReq
	if tmp, ok := rawArgs["input"]; ok {
		arg2, err = ec.unmarshalNOrgUserListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgUserListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_organizationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.OrganizationInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOrganizationInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_permissionOperationList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["roleId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg1, err = ec.unmarshalOInt642ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_prioritys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.PriorityListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOPriorityListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_processStatuss_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_projectAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectAttachmentReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNProjectAttachmentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectDayStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.ProjectDayStatReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOProjectDayStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectFolderReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectFolderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProjectInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectIssueRelatedStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectIssueRelatedStatusReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProjectIssueRelatedStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectIssueRelatedStatusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectObjectTypesWithProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectObjectTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 *vo.ProjectObjectTypesReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalOprojectObjectTypesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectResourceReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectResourceReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projectRoleList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["projectId"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectStatistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNInt642int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectSupportObjectTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.ProjectSupportObjectTypeListReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProjectSupportObjectTypeListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectSupportObjectTypeListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectUserList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.ProjectUserListReq
	if tmp, ok := rawArgs["input"]; ok {
		arg2, err = ec.unmarshalNProjectUserListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUserListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	var arg3 []*string
	if tmp, ok := rawArgs["order"]; ok {
		arg3, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg3
	var arg4 *vo.ProjectsReq
	if tmp, ok := rawArgs["input"]; ok {
		arg4, err = ec.unmarshalOProjectsReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_relatedIssueList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 vo.RelatedIssueListReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRelatedIssueListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelatedIssueListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tagList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["size"]; ok {
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 vo.TagListReq
	if tmp, ok := rawArgs["params"]; ok {
		arg2, err = ec.unmarshalNTagListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagListReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_trendList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *vo.TrendReq
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOTrendReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userIds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AppInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_code(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_secret1(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_secret2(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_checkStatus(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_creator(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_updator(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_version(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfo_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfoList_total(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfoList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfoList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInfoList_list(ctx context.Context, field graphql.CollectedField, obj *vo.AppInfoList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AppInfoList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.AppInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAppInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.AreaLinkageResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAreaLinkageResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_cname(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_code(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AreaLinkageResp_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.AreaLinkageResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AreaLinkageResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_host(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_path(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_pathCompressed(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PathCompressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_name(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_type(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_size(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_md5(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_version(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_issueList(ctx context.Context, field graphql.CollectedField, obj *vo.Attachment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachmentList_total(ctx context.Context, field graphql.CollectedField, obj *vo.AttachmentList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AttachmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachmentList_list(ctx context.Context, field graphql.CollectedField, obj *vo.AttachmentList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AttachmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Attachment)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAttachment2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.AuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicConfigResp_runMode(ctx context.Context, field graphql.CollectedField, obj *vo.BasicConfigResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BasicConfigResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicConfigResp_buildInfo(ctx context.Context, field graphql.CollectedField, obj *vo.BasicConfigResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BasicConfigResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BuildInfoDefine)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBuildInfoDefine2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBuildInfoDefine(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_gitCommitLog(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GitCommitLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_gitStatus(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GitStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_buildTime(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildInfoDefine_buildGoVersion(ctx context.Context, field graphql.CollectedField, obj *vo.BuildInfoDefine) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BuildInfoDefine",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildGoVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_field(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_fieldName(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_oldValue(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeList_newValue(ctx context.Context, field graphql.CollectedField, obj *vo.ChangeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ChangeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConvertCodeResp_code(ctx context.Context, field graphql.CollectedField, obj *vo.ConvertCodeResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ConvertCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectAttachmentResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectAttachmentResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DeleteProjectAttachmentResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642ᚕint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectFolderResp_folderIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectFolderResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DeleteProjectFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolderIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642ᚕint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProjectResourceResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.DeleteProjectResourceResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DeleteProjectResourceResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642ᚕint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_name(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_code(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_isHide(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHide, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Department) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Department",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentList_total(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentList_list(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Department)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalODepartment2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_userId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_unionId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMemberInfo_departmentId(ctx context.Context, field graphql.CollectedField, obj *vo.DepartmentMemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "DepartmentMemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ExportIssueTemplateResp_url(ctx context.Context, field graphql.CollectedField, obj *vo.ExportIssueTemplateResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ExportIssueTemplateResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeiShuAuthResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.FeiShuAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FeiShuAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_id(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_name(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_path(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_version(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Folder_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Folder) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Folder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FolderList_total(ctx context.Context, field graphql.CollectedField, obj *vo.FolderList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FolderList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FolderList_list(ctx context.Context, field graphql.CollectedField, obj *vo.FolderList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "FolderList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Folder)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFolder2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteCodeResp_inviteCode(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteCodeResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteCodeResp_expire(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteCodeResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteCodeResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_inviterId(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetInviteInfoResp_inviterName(ctx context.Context, field graphql.CollectedField, obj *vo.GetInviteInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetInviteInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_address(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_host(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_port(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_channel(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetMQTTChannelKeyResp_key(ctx context.Context, field graphql.CollectedField, obj *vo.GetMQTTChannelKeyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetMQTTChannelKeyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetPersonalPermissionInfoResp_Data(ctx context.Context, field graphql.CollectedField, obj *vo.GetPersonalPermissionInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "GetPersonalPermissionInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_issue(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_project(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueOwnerInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueOwnerInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_priority(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssuePriorityInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_tags(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueTagInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueTagInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_childsNum(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfo_childsFinishedNum(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsFinishedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_actualTotal(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueInfoResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_isDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueOwnerInfo_isDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueOwnerInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueOwnerInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssuePriorityInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssuePriorityInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssuePriorityInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueProjectInfo_isFilling(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFilling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueStatusInfo_type(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueStatusInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueStatusInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HomeIssueTagInfo_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.HomeIssueTagInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HomeIssueTagInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IndustryListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IndustryResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIndustryResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndustryResp_cname(ctx context.Context, field graphql.CollectedField, obj *vo.IndustryResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IndustryResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _InternalAuthResp_hasPermission(ctx context.Context, field graphql.CollectedField, obj *vo.InternalAuthResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InternalAuthResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_id(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_code(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_title(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_sourceId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_issueObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_planWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_iterationId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_versionId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_moduleId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_parentTitle(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_status(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Issue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Issue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAndProjectCountStatResp_projectNotCompletedCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAndProjectCountStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAndProjectCountStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNotCompletedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAndProjectCountStatResp_issueNotCompletedCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAndProjectCountStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAndProjectCountStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueNotCompletedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAndProjectCountStatResp_participantsProjectCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAndProjectCountStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAndProjectCountStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsProjectCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAndProjectCountStatResp_filingParticipantsProjectCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAndProjectCountStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAndProjectCountStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilingParticipantsProjectCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueAssignRankInfo_incompleteissueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueAssignRankInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueAssignRankInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncompleteissueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.IssueDailyPersonalWorkCompletionStatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueDailyPersonalWorkCompletionStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData_completedCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueDailyPersonalWorkCompletionStatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueDailyPersonalWorkCompletionStatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueDailyPersonalWorkCompletionStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueDailyPersonalWorkCompletionStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueDailyPersonalWorkCompletionStatData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueDailyPersonalWorkCompletionStatData2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatData(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_issue(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_project(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_priority(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssuePriorityInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_participantInfos(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_followerInfos(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_nextStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_tags(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueTagInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueTagInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_sourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueSourceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueSourceInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_typeInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.IssueObjectTypeInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueObjectTypeInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_childsNum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_childsFinishedNum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildsFinishedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueInfo_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssue2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_sort(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_remark(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_updator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectType_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectTypeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectTypeInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueObjectTypeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueObjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueObjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_shareId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_reportUserName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReportUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_startTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueReportResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueReportResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueReportResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_title(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerAvatar(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerAvatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerIsDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_ownerIsDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_finished(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_statusId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_statusName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_endTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfo_priorityInfo(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssuePriorityInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssuePriorityInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfoResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueRestInfoResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueRestInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueRestInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueRestInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueRestInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_sort(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_remark(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_status(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_updator(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSource_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueSourceList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueSourceList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueSourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueSource)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueSource2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSource(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_projectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_projectObjectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectObjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatByObjectType_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatByObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatByObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_notStart(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueStatByObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_processing(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueStatByObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatDetailResp_completed(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatDetailResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatDetailResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueStatByObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueStatByObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_notStartTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotStartTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_processingTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_completedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_completedTodayTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedTodayTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTomorrowTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTomorrowTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueCompletedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueCompletedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_overdueTodayTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueTodayTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_beAboutToOverdueSum(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeAboutToOverdueSum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_todayCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TodayCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_todayCreateCount(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TodayCreateCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IssueStatusTypeStatResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.IssueStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IssueStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.StatCommon)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOStatCommon2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_id(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_name(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_versionId(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_planWorkHour(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanWorkHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_storyPoint(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_status(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueOwnerInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueOwnerInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Iteration_statusInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Iteration) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iteration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_iteration(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iteration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Iteration)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIteration2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_project(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueProjectInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_status(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_owner(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationInfoResp_nextStatus(ctx context.Context, field graphql.CollectedField, obj *vo.IterationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IterationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IterationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Iteration)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIteration2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_id(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_iterationId(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_demandEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_taskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_bugEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_testtaskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_ext(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_status(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_creator(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStat_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatList_total(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatList_list(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IterationStat)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIterationStat2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatusTypeStatResp_notStartTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotStartTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatusTypeStatResp_processingTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatusTypeStatResp_completedTotal(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IterationStatusTypeStatResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.IterationStatusTypeStatResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IterationStatusTypeStatResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_agentId(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_timeStamp(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_noceStr(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoceStr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JsApiSignResp_signature(ctx context.Context, field graphql.CollectedField, obj *vo.JsAPISignResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "JsApiSignResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MemberInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.MemberInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "MemberInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendSmsLoginCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendSmsLoginCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendSmsLoginCode(rctx, args["input"].(vo.SendSmsLoginCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendAuthCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendAuthCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendAuthCode(rctx, args["input"].(vo.SendAuthCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_retrievePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_retrievePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RetrievePassword(rctx, args["input"].(vo.RetrievePasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, args["input"].(vo.ResetPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetPassword(rctx, args["input"].(vo.SetPasswordReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unbindLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unbindLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnbindLoginName(rctx, args["input"].(vo.UnbindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bindLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bindLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BindLoginName(rctx, args["input"].(vo.BindLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_checkLoginName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_checkLoginName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckLoginName(rctx, args["input"].(vo.CheckLoginNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userLogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userLogin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserLogin(rctx, args["input"].(vo.UserLoginReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserLoginResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserLoginResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userRegister_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserRegister(rctx, args["input"].(vo.UserRegisterReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserRegisterResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserRegisterResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userQuit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserQuit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerWebSiteContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerWebSiteContact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterWebSiteContact(rctx, args["input"].(vo.RegisterWebSiteContactReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_quitProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_quitProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().QuitProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.QuitResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQuitResult2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐQuitResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_starProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_starProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StarProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OperateProjectResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOperateProjectResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOperateProjectResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unstarProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unstarProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnstarProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OperateProjectResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOperateProjectResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOperateProjectResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectStatus(rctx, args["input"].(vo.UpdateProjectStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_archiveProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_archiveProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchiveProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelArchivedProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelArchivedProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelArchivedProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserConfig(rctx, args["input"].(vo.UpdateUserConfigReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateUserConfigResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateUserConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserDefaultProjectConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserDefaultProjectConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserDefaultProjectConfig(rctx, args["input"].(vo.UpdateUserDefaultProjectConfigReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateUserConfigResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateUserConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserPcConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserPcConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPcConfig(rctx, args["input"].(vo.UpdateUserPcConfigReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateUserConfigResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateUserConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_convertCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_convertCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConvertCode(rctx, args["input"].(vo.ConvertCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ConvertCodeResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNConvertCodeResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertCodeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIterationIssueRelate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIterationIssueRelate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIterationIssueRelate(rctx, args["input"].(vo.IterationIssueRealtionReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIterationStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIterationStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIterationStatus(rctx, args["input"].(vo.UpdateIterationStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrg(rctx, args["input"].(vo.CreateOrgReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssue(rctx, args["input"].(vo.CreateIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueComment(rctx, args["input"].(vo.CreateIssueCommentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueResource(rctx, args["input"].(vo.CreateIssueResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssueResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssueResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssueResource(rctx, args["input"].(vo.DeleteIssueResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueAndIssueRelate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueAndIssueRelate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueAndIssueRelate(rctx, args["input"].(vo.UpdateIssueAndIssueRelateReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssue(rctx, args["input"].(vo.UpdateIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateIssueResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateIssueResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueStatus(rctx, args["input"].(vo.UpdateIssueStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueSort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueSort_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueSort(rctx, args["input"].(vo.UpdateIssueSortReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueProjectObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueProjectObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueProjectObjectType(rctx, args["input"].(vo.UpdateIssueProjectObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueTags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueTags(rctx, args["input"].(vo.UpdateIssueTagsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssue(rctx, args["input"].(vo.DeleteIssueReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Issue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProject(rctx, args["input"].(vo.CreateProjectReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Project)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProject2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProject(rctx, args["input"].(vo.UpdateProjectReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Project)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProject2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProcessStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProcessStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProcessStatus(rctx, args["input"].(vo.CreateProcessStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProcessStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProcessStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProcessStatus(rctx, args["input"].(vo.UpdateProcessStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProcessStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProcessStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProcessStatus(rctx, args["input"].(vo.DeleteProcessStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPriority(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPriority_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePriority(rctx, args["input"].(vo.CreatePriorityReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePriority(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePriority_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePriority(rctx, args["input"].(vo.UpdatePriorityReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePriority(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePriority_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePriority(rctx, args["input"].(vo.DeletePriorityReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIteration(rctx, args["input"].(vo.CreateIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIteration(rctx, args["input"].(vo.UpdateIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIteration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIteration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIteration(rctx, args["input"].(vo.DeleteIterationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProjectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProjectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectDetail(rctx, args["input"].(vo.CreateProjectDetailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectDetail(rctx, args["input"].(vo.UpdateProjectDetailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectDetail(rctx, args["input"].(vo.DeleteProjectDetailReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_importIssues(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_importIssues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImportIssues(rctx, args["input"].(vo.ImportIssuesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTag(rctx, args["input"].(vo.CreateTagReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTag(rctx, args["input"].(vo.DeleteTagReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTag(rctx, args["input"].(vo.UpdateTagReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProjectObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProjectObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectObjectType(rctx, args["input"].(vo.CreateProjectObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectObjectType(rctx, args["input"].(vo.UpdateProjectObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectObjectType(rctx, args["input"].(vo.DeleteProjectObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueObjectType(rctx, args["input"].(vo.CreateIssueObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueObjectType(rctx, args["input"].(vo.UpdateIssueObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssueObjectType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssueObjectType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssueObjectType(rctx, args["input"].(vo.DeleteIssueObjectTypeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIssueSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createIssueSource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIssueSource(rctx, args["input"].(vo.CreateIssueSourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIssueSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIssueSource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIssueSource(rctx, args["input"].(vo.UpdateIssueSourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIssueSource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIssueSource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIssueSource(rctx, args["input"].(vo.DeleteIssueSourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_switchUserOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_switchUserOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SwitchUserOrganization(rctx, args["input"].(vo.SwitchUserOrganizationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationSetting(rctx, args["input"].(vo.UpdateOrganizationSettingsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserOrgRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserOrgRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserOrgRole(rctx, args["input"].(vo.UpdateUserOrgRoleReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrgMemberStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrgMemberStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgMemberStatus(rctx, args["input"].(vo.UpdateOrgMemberStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrgMemberCheckStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrgMemberCheckStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgMemberCheckStatus(rctx, args["input"].(vo.UpdateOrgMemberCheckStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, args["input"].(vo.CreateRoleReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRolePermissionOperation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRolePermissionOperation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRolePermissionOperation(rctx, args["input"].(vo.UpdateRolePermissionOperationReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelRole(rctx, args["input"].(vo.DelRoleReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, args["input"].(vo.UpdateRoleReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeOrgMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeOrgMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveOrgMember(rctx, args["input"].(vo.RemoveOrgMemberReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserInfo(rctx, args["input"].(vo.UpdateUserInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeProjectMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeProjectMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveProjectMember(rctx, args["input"].(vo.RemoveProjectMemberReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addProjectMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addProjectMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProjectMember(rctx, args["input"].(vo.RemoveProjectMemberReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProjectResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProjectResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectResource(rctx, args["input"].(vo.CreateProjectResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectResourceFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectResourceFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectResourceFolder(rctx, args["input"].(vo.UpdateProjectResourceFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateProjectResourceFolderResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateProjectResourceFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectResourceName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectResourceName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectResourceName(rctx, args["input"].(vo.UpdateProjectResourceNameReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectResource(rctx, args["input"].(vo.DeleteProjectResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectResourceResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDeleteProjectResourceResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProjectFolder(rctx, args["input"].(vo.CreateProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Void)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectFolder(rctx, args["input"].(vo.DeleteProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectFolderResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDeleteProjectFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProjectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProjectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectFolder(rctx, args["input"].(vo.UpdateProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UpdateProjectFolderResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUpdateProjectFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProjectAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProjectAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectAttachment(rctx, args["input"].(vo.DeleteProjectAttachmentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DeleteProjectAttachmentResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDeleteProjectAttachmentResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_id(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_type(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_relationTye(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationTye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_ext(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_issueId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_trendsId(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrendsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_content(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_noticer(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Noticer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_status(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_projectName(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notice_issueName(ctx context.Context, field graphql.CollectedField, obj *vo.Notice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Notice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NoticeCountResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.NoticeCountResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "NoticeCountResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NoticeList_total(ctx context.Context, field graphql.CollectedField, obj *vo.NoticeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "NoticeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NoticeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.NoticeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "NoticeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Notice)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalONotice2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNotice(ctx, field.Selections, res)
}

func (ec *executionContext) _OperateProjectResp_isSuccess(ctx context.Context, field graphql.CollectedField, obj *vo.OperateProjectResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OperateProjectResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_outUserId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_outOrgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_namePy(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_hasOutInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOutInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_hasOrgOutInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOrgOutInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserIsDelete(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserIsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberInfoResp_orgUserCheckStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUserCheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberResp_owner(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OrgProjectMemberInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrgProjectMemberInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberResp_participants(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.OrgProjectMemberInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrgProjectMemberInfoResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberResp_follower(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Follower, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.OrgProjectMemberInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrgProjectMemberInfoResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgProjectMemberResp_allMembers(ctx context.Context, field graphql.CollectedField, obj *vo.OrgProjectMemberResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrgProjectMemberResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllMembers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.OrgProjectMemberInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrgProjectMemberInfoResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_code(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_webSite(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_industryId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_industryName(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_scale(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_countryId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_countryCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_provinceId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_provinceCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_cityId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_cityCname(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_address(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_logoUrl(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationInfoResp_owner(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationInfoResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationInfoResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_id(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_checkStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_useStatus(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_status(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_statusChangerId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusChangerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_statusChangeTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusChangeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditorId(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_creator(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_updator(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_auditorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationUser_userRole(ctx context.Context, field graphql.CollectedField, obj *vo.OrganizationUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrganizationUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserRoleInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserRoleInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OssApplySignUrlResp_signUrl(ctx context.Context, field graphql.CollectedField, obj *vo.OssApplySignURLResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssApplySignUrlResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_policy(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_signature(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_dir(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dir, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_expire(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_accessId(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_host(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_region(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_bucket(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_fileName(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_maxFileSize(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxFileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OssPostPolicyResp_callback(ctx context.Context, field graphql.CollectedField, obj *vo.OssPostPolicyResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OssPostPolicyResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Callback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_code(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_name(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_parentId(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_type(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_path(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_status(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Permission) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Permission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionList_total(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionList_list(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Permission)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPermission2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_id(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_permissionId(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_name(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_operationCodes(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_remark(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_status(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_creator(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_updator(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperation_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationList_total(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationList_list(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.PermissionOperation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPermissionOperation2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_permissionInfo(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.Permission)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPermission2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_operationList(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.PermissionOperation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPermissionOperation2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionOperationListResp_permissionHave(ctx context.Context, field graphql.CollectedField, obj *vo.PermissionOperationListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionOperationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionHave, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚕint64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginNameEditCount(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginNameEditCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_email(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_mobile(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_birthday(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_sex(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_rimanente(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rimanente, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_level(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_levelName(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LevelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_language(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_motto(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Motto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_lastLoginIp(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_lastLoginTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLoginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_loginFailCount(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginFailCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PersonalInfo_passwordSet(ctx context.Context, field graphql.CollectedField, obj *vo.PersonalInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PersonalInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_id(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_name(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_type(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_sort(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_status(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_version(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Priority_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Priority) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Priority",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PriorityList_total(ctx context.Context, field graphql.CollectedField, obj *vo.PriorityList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriorityList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriorityList_list(ctx context.Context, field graphql.CollectedField, obj *vo.PriorityList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriorityList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Priority)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPriority2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_sort(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_type(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_category(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_version(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatus_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatus) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatusList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatusList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatusList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStatusList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProcessStatusList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStatusList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProcessStatus)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProcessStatus2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_code(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_preCode(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_owner(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_publicStatus(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourceId(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isFiling(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_status(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_version(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_followerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourcePath(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourcePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_resourceCompressedPath(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceCompressedPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_allIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_finishIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_overdueIssues(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverdueIssues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeName(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_projectTypeLangCode(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeLangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Project_isSyncOutCalendar(ctx context.Context, field graphql.CollectedField, obj *vo.Project) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Project",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncOutCalendar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_demandEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemandEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_taskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_bugEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskOverdueCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_testtaskEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TesttaskEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_ext(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_statDate(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_version(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStat_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStat) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStat",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStatList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStatList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDayStatList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDayStatList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDayStatList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectDayStat)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectDayStat2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_notice(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_isEnableWorkHours(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnableWorkHours, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_isSyncOutCalendar(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncOutCalendar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetail_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetail) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetail",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetailList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetailList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetailList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectDetailList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectDetailList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectDetailList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectDetail)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectDetail2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_code(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_preCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_owner(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_projectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_priorityId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_planStartTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_planEndTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_publicStatus(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_resourceId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_isFiling(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_ownerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_followerInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_resourcePath(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourcePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectInfo_allStatus(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Project)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProject2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_preCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_objectType(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_icon(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_sort(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_isReadonly(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReadonly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_version(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectType_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeRestInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeRestInfo_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeRestInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeRestInfo_objectType(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeRestInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeRestInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectObjectTypeWithProjectList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectObjectTypeWithProjectList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectObjectTypeWithProjectList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectObjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectStatisticsResp_iterationTotal(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectStatisticsResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectStatisticsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectStatisticsResp_taskTotal(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectStatisticsResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectStatisticsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectStatisticsResp_memberTotal(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectStatisticsResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectStatisticsResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectSupportObjectTypeListResp_projectSupportList(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectSupportObjectTypeListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectSupportObjectTypeListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectSupportList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectObjectTypeRestInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectObjectTypeRestInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectSupportObjectTypeListResp_iterationSupportList(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectSupportObjectTypeListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectSupportObjectTypeListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IterationSupportList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectObjectTypeRestInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectObjectTypeRestInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_id(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_name(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_sort(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_defaultProcessId(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProcessID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_isReadonly(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReadonly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_remark(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_status(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_updator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectType_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectTypeList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectTypeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectTypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectTypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectUserListResp_total(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUserListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectUserListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectUserListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUserListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProjectUserListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectUser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOprojectUser2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBaseConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBaseConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.BasicConfigResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBasicConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBasicConfigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_personalInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PersonalInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userConfigInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserConfigInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserConfig)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserConfig2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_homeIssues(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_homeIssues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HomeIssues(rctx, args["page"].(int), args["size"].(int), args["input"].(*vo.HomeIssueInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.HomeIssueInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueInfo(rctx, args["issueId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueRestInfos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueRestInfos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueRestInfos(rctx, args["page"].(int), args["size"].(int), args["input"].(*vo.IssueRestInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueRestInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueRestInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_relatedIssueList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_relatedIssueList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RelatedIssueList(rctx, args["input"].(vo.RelatedIssueListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueRestInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueRestInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueReport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueReport_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueReport(rctx, args["reportType"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueReportResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueReportResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueReportResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueReportDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueReportDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueReportDetail(rctx, args["shareId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueReportResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueReportResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueReportResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueAndProjectCountStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueAndProjectCountStat(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueAndProjectCountStatResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueAndProjectCountStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAndProjectCountStatResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueStatusTypeStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueStatusTypeStat_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueStatusTypeStat(rctx, args["input"].(*vo.IssueStatusTypeStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueStatusTypeStatResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueStatusTypeStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueStatusTypeStatDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueStatusTypeStatDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueStatusTypeStatDetail(rctx, args["input"].(*vo.IssueStatusTypeStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueStatusTypeStatDetailResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueStatusTypeStatDetailResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueDailyPersonalWorkCompletionStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueDailyPersonalWorkCompletionStat_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueDailyPersonalWorkCompletionStat(rctx, args["input"].(*vo.IssueDailyPersonalWorkCompletionStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueDailyPersonalWorkCompletionStatResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueDailyPersonalWorkCompletionStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueAssignRank(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueAssignRank_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueAssignRank(rctx, args["input"].(vo.IssueAssignRankReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.IssueAssignRankInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIssueAssignRankInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueResources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueResources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueResources(rctx, args["page"].(*int), args["size"].(*int), args["input"].(*vo.GetIssueResourcesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ResourceList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNResourceList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_trendList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_trendList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrendList(rctx, args["input"].(*vo.TrendReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.TrendsList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTrendsList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectStatistics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectStatistics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectStatistics(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectStatisticsResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectStatisticsResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectStatisticsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectIssueRelatedStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectIssueRelatedStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectIssueRelatedStatus(rctx, args["input"].(vo.ProjectIssueRelatedStatusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.HomeIssueStatusInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterationStatusTypeStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterationStatusTypeStat_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IterationStatusTypeStat(rctx, args["input"].(*vo.IterationStatusTypeStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationStatusTypeStatResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIterationStatusTypeStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IterationInfo(rctx, args["input"].(vo.IterationInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIterationInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userIds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userIds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserIds(rctx, args["input"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserID(rctx, args["input"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOssSignUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOssSignUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOssSignURL(rctx, args["input"].(vo.OssApplySignURLReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OssApplySignURLResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOssApplySignUrlResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssApplySignURLResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOssPostPolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOssPostPolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOssPostPolicy(rctx, args["input"].(vo.OssPostPolicyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OssPostPolicyResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOssPostPolicyResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getInviteCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getInviteCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInviteCode(rctx, args["input"].(*vo.GetInviteCodeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetInviteCodeResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNGetInviteCodeResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getInviteInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getInviteInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInviteInfo(rctx, args["input"].(vo.GetInviteInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetInviteInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNGetInviteInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMQTTChannelKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMQTTChannelKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMQTTChannelKey(rctx, args["input"].(vo.GetMQTTChannelKeyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetMQTTChannelKeyResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNGetMQTTChannelKeyResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectSupportObjectTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectSupportObjectTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectSupportObjectTypes(rctx, args["input"].(vo.ProjectSupportObjectTypeListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectSupportObjectTypeListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectSupportObjectTypeListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectSupportObjectTypeListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_prioritys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_prioritys_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Prioritys(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.PriorityListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.PriorityList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPriorityList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_processStatuss(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_processStatuss_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProcessStatuss(rctx, args["page"].(*int), args["size"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProcessStatusList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProcessStatusList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatusList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Projects(rctx, args["page"].(int), args["size"].(int), args["params"].(map[string]interface{}), args["order"].([]*string), args["input"].(*vo.ProjectsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectInfo(rctx, args["input"].(vo.ProjectInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Iterations(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IterationListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIterationList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iterationStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iterationStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IterationStats(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.IterationStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IterationStatList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIterationStatList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectDetail(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectDetail)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectDetail2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectObjectTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectObjectTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectObjectTypes(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectObjectTypesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectObjectTypeList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectObjectTypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectDayStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectDayStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectDayStats(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.ProjectDayStatReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectDayStatList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectDayStatList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueObjectTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueObjectTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueObjectTypes(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IssueObjectTypesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueObjectTypeList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueObjectTypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_issueSources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_issueSources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IssueSources(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.IssueSourcesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IssueSourceList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIssueSourceList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectObjectTypesWithProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectObjectTypesWithProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectObjectTypesWithProject(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectObjectTypeWithProjectList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectObjectTypeWithProjectList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeWithProjectList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Departments(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.DepartmentListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.DepartmentList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDepartmentList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departmentMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departmentMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentMembers(rctx, args["params"].(vo.DepartmentMemberListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.DepartmentMemberInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDepartmentMemberInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ProjectType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOProjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userOrganizationList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserOrganizationList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserOrganizationListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserOrganizationListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tagList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tagList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TagList(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.TagListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.TagList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTagList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_hotTagList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_hotTagList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HotTagList(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.TagList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTagList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tagDefaultStyle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TagDefaultStyle(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.StypeList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNStypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStypeList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_noticeList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_noticeList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NoticeList(rctx, args["page"].(*int), args["size"].(*int), args["params"].(*vo.NoticeListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.NoticeList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNNoticeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_unreadNoticeCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UnreadNoticeCount(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.NoticeCountResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNNoticeCountResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeCountResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_areaLinkageList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_areaLinkageList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AreaLinkageList(rctx, args["input"].(vo.AreaLinkageListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.AreaLinkageListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAreaLinkageListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_industryList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IndustryList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.IndustryListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIndustryListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationInfo(rctx, args["input"].(vo.OrganizationInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OrganizationInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrganizationInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_exportIssueTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_exportIssueTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportIssueTemplate(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ExportIssueTemplateResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNExportIssueTemplateResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orgUserList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orgUserList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgUserList(rctx, args["page"].(*int), args["size"].(*int), args["input"].(vo.OrgUserListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserOrganizationList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserOrganizationList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_permissionOperationList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_permissionOperationList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PermissionOperationList(rctx, args["roleId"].(int64), args["projectId"].(*int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.PermissionOperationListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPermissionOperationListResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orgRoleList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgRoleList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Role)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_exportData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_exportData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportData(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ExportIssueTemplateResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNExportIssueTemplateResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectUserList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectUserList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectUserList(rctx, args["page"].(*int), args["size"].(*int), args["input"].(vo.ProjectUserListReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ProjectUserListResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProjectUserListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUserListResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectRoleList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectRoleList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectRoleList(rctx, args["projectId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*vo.Role)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orgProjectMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orgProjectMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgProjectMember(rctx, args["input"].(vo.OrgProjectMemberReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.OrgProjectMemberResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrgProjectMemberResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectResource(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectResourceReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.ResourceList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNResourceList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectFolder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectFolder(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectFolderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.FolderList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFolderList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_projectAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_projectAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectAttachment(rctx, args["page"].(*int), args["size"].(*int), args["params"].(vo.ProjectAttachmentReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.AttachmentList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAttachmentList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPersonalPermissionInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPersonalPermissionInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPersonalPermissionInfo(rctx, args["projectId"].(*int64), args["issueId"].(*int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.GetPersonalPermissionInfoResp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNGetPersonalPermissionInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _QuitResult_isQuitted(ctx context.Context, field graphql.CollectedField, obj *vo.QuitResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QuitResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsQuitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationIssue_id(ctx context.Context, field graphql.CollectedField, obj *vo.RelationIssue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationIssue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationIssue_title(ctx context.Context, field graphql.CollectedField, obj *vo.RelationIssue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationIssue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_userId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_outOrgUserId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutOrgUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_outUserId(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_name(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelationType_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.RelationType) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RelationType",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_id(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_host(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_path(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_pathCompressed(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PathCompressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_name(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_type(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_size(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_creatorName(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_md5(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_fileType(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_version(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Resource_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.Resource) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Resource",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_url(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_size(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_uploadTime(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceInfo_suffix(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceList_total(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceList_list(ctx context.Context, field graphql.CollectedField, obj *vo.ResourceList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ResourceList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Resource)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOResource2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_remark(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isReadonly(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReadonly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isModifyPermission(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsModifyPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_isDefault(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_roleGroupId(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_status(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updator(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updateTime(ctx context.Context, field graphql.CollectedField, obj *vo.Role) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StatCommon_name(ctx context.Context, field graphql.CollectedField, obj *vo.StatCommon) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatCommon",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StatCommon_count(ctx context.Context, field graphql.CollectedField, obj *vo.StatCommon) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatCommon",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_issueEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointWaitCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointWaitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointRunningCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointRunningCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatData_storyPointEndCount(ctx context.Context, field graphql.CollectedField, obj *vo.StatData) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoryPointEndCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatExtResp_issue(ctx context.Context, field graphql.CollectedField, obj *vo.StatExtResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatExtResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.StatIssueExt)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNStatIssueExt2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatIssueExt(ctx, field.Selections, res)
}

func (ec *executionContext) _StatIssueExt_data(ctx context.Context, field graphql.CollectedField, obj *vo.StatIssueExt) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StatIssueExt",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*interface{})
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAny2ᚖinterface(ctx, field.Selections, res)
}

func (ec *executionContext) _StypeList_list(ctx context.Context, field graphql.CollectedField, obj *vo.StypeList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "StypeList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_projectId(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_namePinyin(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePinyin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_bgStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BgStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_fontStyle(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_usedNum(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Tag) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Tag",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TagList_total(ctx context.Context, field graphql.CollectedField, obj *vo.TagList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TagList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TagList_list(ctx context.Context, field graphql.CollectedField, obj *vo.TagList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TagList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Tag)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module1(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module2Id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module2Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module2(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module3Id(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module3Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_module3(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operCode(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjProperty(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjProperty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationObjId(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationObjID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationObjType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationObjType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_relationType(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_newValue(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_oldValue(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_ext(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_creator(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_operObjName(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperObjName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*vo.UserIDInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_comment(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Trend_extension(ctx context.Context, field graphql.CollectedField, obj *vo.Trend) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Trend",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.TrendExtension)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTrendExtension2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendExtension(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_issueType(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_ObjName(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_changeList(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ChangeList)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOChangeList2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_memberInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.MemberInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOMemberInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_relationIssue(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.RelationIssue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORelationIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelationIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendExtension_resourceInfo(ctx context.Context, field graphql.CollectedField, obj *vo.TrendExtension) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendExtension",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.ResourceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOResourceInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_total(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_page(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_size(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_lastTrendId(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTrendID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TrendsList_list(ctx context.Context, field graphql.CollectedField, obj *vo.TrendsList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "TrendsList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.Trend)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTrend2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateIssueResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateIssueResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UpdateIssueResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProjectFolderResp_folderId(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateProjectFolderResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UpdateProjectFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProjectResourceFolderResp_resourceIds(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateProjectResourceFolderResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UpdateProjectResourceFolderResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642ᚕint64(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUserConfigResp_id(ctx context.Context, field graphql.CollectedField, obj *vo.UpdateUserConfigResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UpdateUserConfigResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_dailyReportMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DailyReportMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_ownerRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_participantRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_attentionRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttentionRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_createRangeStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateRangeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_remindMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_commentAtMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentAtMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_modifyMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifyMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_relationMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelationMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_dailyProjectReportMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DailyProjectReportMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_defaultProjectId(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_defaultProjectObjectTypeId(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProjectObjectTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcNoticeOpenStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcNoticeOpenStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcIssueRemindMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcIssueRemindMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcOrgMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcOrgMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcProjectMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcProjectMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConfig_pcCommentAtMessageStatus(ctx context.Context, field graphql.CollectedField, obj *vo.UserConfig) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcCommentAtMessageStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_userId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_emplId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmplID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_unionId(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_isDeleted(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserIdInfo_isDisabled(ctx context.Context, field graphql.CollectedField, obj *vo.UserIDInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserIdInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_userId(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgId(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgName(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_orgCode(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_avatar(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLoginResp_needInitOrg(ctx context.Context, field graphql.CollectedField, obj *vo.UserLoginResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserLoginResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedInitOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_code(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_webSite(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_industryId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_scale(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_sourcePlatform(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourcePlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_sourceChannel(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_countryId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_provinceId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_cityId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_address(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_logoUrl(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_resorceId(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResorceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_owner(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_IsAuthenticated(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAuthenticated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_remark(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_isShow(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsShow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_isDelete(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganization_OrgIsEnabled(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganization) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganization",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgIsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationList_total(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganizationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationList_list(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationList) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganizationList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.OrganizationUser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOrganizationUser2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserOrganizationListResp_list(ctx context.Context, field graphql.CollectedField, obj *vo.UserOrganizationListResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserOrganizationListResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*vo.UserOrganization)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserOrganization2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRegisterResp_token(ctx context.Context, field graphql.CollectedField, obj *vo.UserRegisterResp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserRegisterResp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_id(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_name(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserRoleInfo_langCode(ctx context.Context, field graphql.CollectedField, obj *vo.UserRoleInfo) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserRoleInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LangCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Void_id(ctx context.Context, field graphql.CollectedField, obj *vo.Void) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Void",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_creator(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_createTime(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_userInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_creatorInfo(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.PersonalInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _projectUser_userRole(ctx context.Context, field graphql.CollectedField, obj *vo.ProjectUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "projectUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*vo.UserRoleInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserRoleInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAreaLinkageListReq(ctx context.Context, obj interface{}) (vo.AreaLinkageListReq, error) {
	var it vo.AreaLinkageListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isRoot":
			var err error
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "continentId":
			var err error
			it.ContinentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryId":
			var err error
			it.CountryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "areaId":
			var err error
			it.AreaID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateId":
			var err error
			it.StateID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityId":
			var err error
			it.CityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthReq(ctx context.Context, obj interface{}) (vo.AuthReq, error) {
	var it vo.AuthReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "corpId":
			var err error
			it.CorpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBindLoginNameReq(ctx context.Context, obj interface{}) (vo.BindLoginNameReq, error) {
	var it vo.BindLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error
			it.AuthCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckLoginNameReq(ctx context.Context, obj interface{}) (vo.CheckLoginNameReq, error) {
	var it vo.CheckLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConvertCodeReq(ctx context.Context, obj interface{}) (vo.ConvertCodeReq, error) {
	var it vo.ConvertCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppInfoReq(ctx context.Context, obj interface{}) (vo.CreateAppInfoReq, error) {
	var it vo.CreateAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret1":
			var err error
			it.Secret1, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret2":
			var err error
			it.Secret2, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDepartmentReq(ctx context.Context, obj interface{}) (vo.CreateDepartmentReq, error) {
	var it vo.CreateDepartmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHide":
			var err error
			it.IsHide, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueCommentReq(ctx context.Context, obj interface{}) (vo.CreateIssueCommentReq, error) {
	var it vo.CreateIssueCommentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error
			it.Comment, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mentionedUserIds":
			var err error
			it.MentionedUserIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueObjectTypeReq(ctx context.Context, obj interface{}) (vo.CreateIssueObjectTypeReq, error) {
	var it vo.CreateIssueObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueReq(ctx context.Context, obj interface{}) (vo.CreateIssueReq, error) {
	var it vo.CreateIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeId":
			var err error
			it.TypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error
			it.OwnerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantIds":
			var err error
			it.ParticipantIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planWorkHour":
			var err error
			it.PlanWorkHour, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionId":
			var err error
			it.VersionID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleId":
			var err error
			it.ModuleID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueObjectId":
			var err error
			it.IssueObjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error
			it.Children, err = ec.unmarshalOIssueChildren2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error
			it.Tags, err = ec.unmarshalOIssueTagReqInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueResourceReq(ctx context.Context, obj interface{}) (vo.CreateIssueResourceReq, error) {
	var it vo.CreateIssueResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error
			it.ResourcePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceSize":
			var err error
			it.ResourceSize, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error
			it.FileName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSuffix":
			var err error
			it.FileSuffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error
			it.Md5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bucketName":
			var err error
			it.BucketName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIssueSourceReq(ctx context.Context, obj interface{}) (vo.CreateIssueSourceReq, error) {
	var it vo.CreateIssueSourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIterationReq(ctx context.Context, obj interface{}) (vo.CreateIterationReq, error) {
	var it vo.CreateIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIterationStatReq(ctx context.Context, obj interface{}) (vo.CreateIterationStatReq, error) {
	var it vo.CreateIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error
			it.StatDate, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrgReq(ctx context.Context, obj interface{}) (vo.CreateOrgReq, error) {
	var it vo.CreateOrgReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgName":
			var err error
			it.OrgName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorName":
			var err error
			it.CreatorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "importSampleData":
			var err error
			it.ImportSampleData, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error
			it.SourcePlatform, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error
			it.SourceChannel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePermissionOperationReq(ctx context.Context, obj interface{}) (vo.CreatePermissionOperationReq, error) {
	var it vo.CreatePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationCodes":
			var err error
			it.OperationCodes, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePermissionReq(ctx context.Context, obj interface{}) (vo.CreatePermissionReq, error) {
	var it vo.CreatePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePriorityReq(ctx context.Context, obj interface{}) (vo.CreatePriorityReq, error) {
	var it vo.CreatePriorityReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fontStyle":
			var err error
			it.FontStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error
			it.IsDefault, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProcessStatusReq(ctx context.Context, obj interface{}) (vo.CreateProcessStatusReq, error) {
	var it vo.CreateProcessStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fontStyle":
			var err error
			it.FontStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectDayStatReq(ctx context.Context, obj interface{}) (vo.CreateProjectDayStatReq, error) {
	var it vo.CreateProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error
			it.StatDate, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectDetailReq(ctx context.Context, obj interface{}) (vo.CreateProjectDetailReq, error) {
	var it vo.CreateProjectDetailReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableWorkHours":
			var err error
			it.IsEnableWorkHours, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice":
			var err error
			it.Notice, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectFolderReq(ctx context.Context, obj interface{}) (vo.CreateProjectFolderReq, error) {
	var it vo.CreateProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error
			it.FileType, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectObjectTypeReq(ctx context.Context, obj interface{}) (vo.CreateProjectObjectTypeReq, error) {
	var it vo.CreateProjectObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "objectType":
			var err error
			it.ObjectType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeId":
			var err error
			it.BeforeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectReq(ctx context.Context, obj interface{}) (vo.CreateProjectReq, error) {
	var it vo.CreateProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "preCode":
			var err error
			it.PreCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectTypeId":
			var err error
			it.ProjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publicStatus":
			var err error
			it.PublicStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error
			it.ResourcePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceType":
			var err error
			it.ResourceType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectResourceReq(ctx context.Context, obj interface{}) (vo.CreateProjectResourceReq, error) {
	var it vo.CreateProjectResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "folderId":
			var err error
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error
			it.ResourcePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceSize":
			var err error
			it.ResourceSize, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error
			it.FileName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSuffix":
			var err error
			it.FileSuffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error
			it.Md5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bucketName":
			var err error
			it.BucketName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateResourceReq(ctx context.Context, obj interface{}) (vo.CreateResourceReq, error) {
	var it vo.CreateResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "suffix":
			var err error
			it.Suffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error
			it.Md5, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRoleReq(ctx context.Context, obj interface{}) (vo.CreateRoleReq, error) {
	var it vo.CreateRoleReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleGroupType":
			var err error
			it.RoleGroupType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isReadonly":
			var err error
			it.IsReadonly, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isModifyPermission":
			var err error
			it.IsModifyPermission, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error
			it.IsDefault, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTagReq(ctx context.Context, obj interface{}) (vo.CreateTagReq, error) {
	var it vo.CreateTagReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fontStyle":
			var err error
			it.FontStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserOrganizationReq(ctx context.Context, obj interface{}) (vo.CreateUserOrganizationReq, error) {
	var it vo.CreateUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error
			it.UseStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangerId":
			var err error
			it.StatusChangerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangeTime":
			var err error
			it.StatusChangeTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorId":
			var err error
			it.AuditorID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditTime":
			var err error
			it.AuditTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDelRoleReq(ctx context.Context, obj interface{}) (vo.DelRoleReq, error) {
	var it vo.DelRoleReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleIds":
			var err error
			it.RoleIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteAppInfoReq(ctx context.Context, obj interface{}) (vo.DeleteAppInfoReq, error) {
	var it vo.DeleteAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteDepartmentReq(ctx context.Context, obj interface{}) (vo.DeleteDepartmentReq, error) {
	var it vo.DeleteDepartmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueObjectTypeReq(ctx context.Context, obj interface{}) (vo.DeleteIssueObjectTypeReq, error) {
	var it vo.DeleteIssueObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueReq(ctx context.Context, obj interface{}) (vo.DeleteIssueReq, error) {
	var it vo.DeleteIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueResourceReq(ctx context.Context, obj interface{}) (vo.DeleteIssueResourceReq, error) {
	var it vo.DeleteIssueResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedResourceIds":
			var err error
			it.DeletedResourceIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIssueSourceReq(ctx context.Context, obj interface{}) (vo.DeleteIssueSourceReq, error) {
	var it vo.DeleteIssueSourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIterationReq(ctx context.Context, obj interface{}) (vo.DeleteIterationReq, error) {
	var it vo.DeleteIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteIterationStatReq(ctx context.Context, obj interface{}) (vo.DeleteIterationStatReq, error) {
	var it vo.DeleteIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteNoticeReq(ctx context.Context, obj interface{}) (vo.DeleteNoticeReq, error) {
	var it vo.DeleteNoticeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePermissionOperationReq(ctx context.Context, obj interface{}) (vo.DeletePermissionOperationReq, error) {
	var it vo.DeletePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePermissionReq(ctx context.Context, obj interface{}) (vo.DeletePermissionReq, error) {
	var it vo.DeletePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePriorityReq(ctx context.Context, obj interface{}) (vo.DeletePriorityReq, error) {
	var it vo.DeletePriorityReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProcessStatusReq(ctx context.Context, obj interface{}) (vo.DeleteProcessStatusReq, error) {
	var it vo.DeleteProcessStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectAttachmentReq(ctx context.Context, obj interface{}) (vo.DeleteProjectAttachmentReq, error) {
	var it vo.DeleteProjectAttachmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceIds":
			var err error
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectDayStatReq(ctx context.Context, obj interface{}) (vo.DeleteProjectDayStatReq, error) {
	var it vo.DeleteProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectDetailReq(ctx context.Context, obj interface{}) (vo.DeleteProjectDetailReq, error) {
	var it vo.DeleteProjectDetailReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectFolderReq(ctx context.Context, obj interface{}) (vo.DeleteProjectFolderReq, error) {
	var it vo.DeleteProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderIds":
			var err error
			it.FolderIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectObjectTypeReq(ctx context.Context, obj interface{}) (vo.DeleteProjectObjectTypeReq, error) {
	var it vo.DeleteProjectObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectReq(ctx context.Context, obj interface{}) (vo.DeleteProjectReq, error) {
	var it vo.DeleteProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProjectResourceReq(ctx context.Context, obj interface{}) (vo.DeleteProjectResourceReq, error) {
	var it vo.DeleteProjectResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceIds":
			var err error
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "folderId":
			var err error
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteResourceReq(ctx context.Context, obj interface{}) (vo.DeleteResourceReq, error) {
	var it vo.DeleteResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteTagReq(ctx context.Context, obj interface{}) (vo.DeleteTagReq, error) {
	var it vo.DeleteTagReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error
			it.Ids, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteUserOrganizationReq(ctx context.Context, obj interface{}) (vo.DeleteUserOrganizationReq, error) {
	var it vo.DeleteUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentListReq(ctx context.Context, obj interface{}) (vo.DepartmentListReq, error) {
	var it vo.DepartmentListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isTop":
			var err error
			it.IsTop, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "showHiding":
			var err error
			it.ShowHiding, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentMemberListReq(ctx context.Context, obj interface{}) (vo.DepartmentMemberListReq, error) {
	var it vo.DepartmentMemberListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "departmentId":
			var err error
			it.DepartmentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEveryPermission(ctx context.Context, obj interface{}) (vo.EveryPermission, error) {
	var it vo.EveryPermission
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationIds":
			var err error
			it.OperationIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeiShuAuthReq(ctx context.Context, obj interface{}) (vo.FeiShuAuthReq, error) {
	var it vo.FeiShuAuthReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeType":
			var err error
			it.CodeType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetInviteCodeReq(ctx context.Context, obj interface{}) (vo.GetInviteCodeReq, error) {
	var it vo.GetInviteCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sourcePlatform":
			var err error
			it.SourcePlatform, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetInviteInfoReq(ctx context.Context, obj interface{}) (vo.GetInviteInfoReq, error) {
	var it vo.GetInviteInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "inviteCode":
			var err error
			it.InviteCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetIssueResourcesReq(ctx context.Context, obj interface{}) (vo.GetIssueResourcesReq, error) {
	var it vo.GetIssueResourcesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetMQTTChannelKeyReq(ctx context.Context, obj interface{}) (vo.GetMQTTChannelKeyReq, error) {
	var it vo.GetMQTTChannelKeyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channelType":
			var err error
			it.ChannelType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHomeIssueInfoReq(ctx context.Context, obj interface{}) (vo.HomeIssueInfoReq, error) {
	var it vo.HomeIssueInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "relatedType":
			var err error
			it.RelatedType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "processStatusId":
			var err error
			it.ProcessStatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error
			it.StartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error
			it.EndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorIds":
			var err error
			it.CreatorIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantIds":
			var err error
			it.ParticipantIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeScope":
			var err error
			it.TimeScope, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchCond":
			var err error
			it.SearchCond, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planType":
			var err error
			it.PlanType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeIds":
			var err error
			it.ProjectObjectTypeIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "combinedType":
			var err error
			it.CombinedType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueTagId":
			var err error
			it.IssueTagID, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastUpdateTime":
			var err error
			it.LastUpdateTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enableParentIssues":
			var err error
			it.EnableParentIssues, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodStartTime":
			var err error
			it.PeriodStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "periodEndTime":
			var err error
			it.PeriodEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImportIssuesReq(ctx context.Context, obj interface{}) (vo.ImportIssuesReq, error) {
	var it vo.ImportIssuesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "urlType":
			var err error
			it.URLType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueAssignRankReq(ctx context.Context, obj interface{}) (vo.IssueAssignRankReq, error) {
	var it vo.IssueAssignRankReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "rankTop":
			var err error
			it.RankTop, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueChildren(ctx context.Context, obj interface{}) (vo.IssueChildren, error) {
	var it vo.IssueChildren
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error
			it.OwnerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeId":
			var err error
			it.TypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planWorkHour":
			var err error
			it.PlanWorkHour, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueDailyPersonalWorkCompletionStatReq(ctx context.Context, obj interface{}) (vo.IssueDailyPersonalWorkCompletionStatReq, error) {
	var it vo.IssueDailyPersonalWorkCompletionStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "startDate":
			var err error
			it.StartDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error
			it.EndDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueObjectTypesReq(ctx context.Context, obj interface{}) (vo.IssueObjectTypesReq, error) {
	var it vo.IssueObjectTypesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueRestInfoReq(ctx context.Context, obj interface{}) (vo.IssueRestInfoReq, error) {
	var it vo.IssueRestInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueIds":
			var err error
			it.IssueIds, err = ec.unmarshalOInt642ᚕᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueSourcesReq(ctx context.Context, obj interface{}) (vo.IssueSourcesReq, error) {
	var it vo.IssueSourcesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueStatusTypeStatReq(ctx context.Context, obj interface{}) (vo.IssueStatusTypeStatReq, error) {
	var it vo.IssueStatusTypeStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationType":
			var err error
			it.RelationType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueTagReqInfo(ctx context.Context, obj interface{}) (vo.IssueTagReqInfo, error) {
	var it vo.IssueTagReqInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueTagsReq(ctx context.Context, obj interface{}) (vo.IssueTagsReq, error) {
	var it vo.IssueTagsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationInfoReq(ctx context.Context, obj interface{}) (vo.IterationInfoReq, error) {
	var it vo.IterationInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationIssueRealtionReq(ctx context.Context, obj interface{}) (vo.IterationIssueRealtionReq, error) {
	var it vo.IterationIssueRealtionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "addIssueIds":
			var err error
			it.AddIssueIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "delIssueIds":
			var err error
			it.DelIssueIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationListReq(ctx context.Context, obj interface{}) (vo.IterationListReq, error) {
	var it vo.IterationListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusType":
			var err error
			it.StatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationStatReq(ctx context.Context, obj interface{}) (vo.IterationStatReq, error) {
	var it vo.IterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error
			it.StartDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error
			it.EndDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIterationStatusTypeStatReq(ctx context.Context, obj interface{}) (vo.IterationStatusTypeStatReq, error) {
	var it vo.IterationStatusTypeStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsApiSignReq(ctx context.Context, obj interface{}) (vo.JsAPISignReq, error) {
	var it vo.JsAPISignReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "corpId":
			var err error
			it.CorpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNoticeListReq(ctx context.Context, obj interface{}) (vo.NoticeListReq, error) {
	var it vo.NoticeListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgProjectMemberReq(ctx context.Context, obj interface{}) (vo.OrgProjectMemberReq, error) {
	var it vo.OrgProjectMemberReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgUserListReq(ctx context.Context, obj interface{}) (vo.OrgUserListReq, error) {
	var it vo.OrgUserListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalOInt2ᚕint(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error
			it.UseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationInfoReq(ctx context.Context, obj interface{}) (vo.OrganizationInfoReq, error) {
	var it vo.OrganizationInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOssApplySignUrlReq(ctx context.Context, obj interface{}) (vo.OssApplySignURLReq, error) {
	var it vo.OssApplySignURLReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "url":
			var err error
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOssPostPolicyReq(ctx context.Context, obj interface{}) (vo.OssPostPolicyReq, error) {
	var it vo.OssPostPolicyReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyType":
			var err error
			it.PolicyType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "folderId":
			var err error
			it.FolderID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPriorityListReq(ctx context.Context, obj interface{}) (vo.PriorityListReq, error) {
	var it vo.PriorityListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectAttachmentReq(ctx context.Context, obj interface{}) (vo.ProjectAttachmentReq, error) {
	var it vo.ProjectAttachmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error
			it.FileType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyWord":
			var err error
			it.KeyWord, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectDayStatReq(ctx context.Context, obj interface{}) (vo.ProjectDayStatReq, error) {
	var it vo.ProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error
			it.StartDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error
			it.EndDate, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectFolderReq(ctx context.Context, obj interface{}) (vo.ProjectFolderReq, error) {
	var it vo.ProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectInfoReq(ctx context.Context, obj interface{}) (vo.ProjectInfoReq, error) {
	var it vo.ProjectInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectIssueRelatedStatusReq(ctx context.Context, obj interface{}) (vo.ProjectIssueRelatedStatusReq, error) {
	var it vo.ProjectIssueRelatedStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectResourceReq(ctx context.Context, obj interface{}) (vo.ProjectResourceReq, error) {
	var it vo.ProjectResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderId":
			var err error
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectSupportObjectTypeListReq(ctx context.Context, obj interface{}) (vo.ProjectSupportObjectTypeListReq, error) {
	var it vo.ProjectSupportObjectTypeListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectUserListReq(ctx context.Context, obj interface{}) (vo.ProjectUserListReq, error) {
	var it vo.ProjectUserListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectsReq(ctx context.Context, obj interface{}) (vo.ProjectsReq, error) {
	var it vo.ProjectsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectTypeId":
			var err error
			it.ProjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFiling":
			var err error
			it.IsFiling, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusType":
			var err error
			it.StatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorIds":
			var err error
			it.CreatorIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerIds":
			var err error
			it.OwnerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "relateType":
			var err error
			it.RelateType, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "participants":
			var err error
			it.Participants, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followers":
			var err error
			it.Followers, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReadNoticeReq(ctx context.Context, obj interface{}) (vo.ReadNoticeReq, error) {
	var it vo.ReadNoticeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterWebSiteContactReq(ctx context.Context, obj interface{}) (vo.RegisterWebSiteContactReq, error) {
	var it vo.RegisterWebSiteContactReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sex":
			var err error
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactInfo":
			var err error
			it.ContactInfo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceUrls":
			var err error
			it.ResourceUrls, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error
			it.Source, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRelatedIssueListReq(ctx context.Context, obj interface{}) (vo.RelatedIssueListReq, error) {
	var it vo.RelatedIssueListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveOrgMemberReq(ctx context.Context, obj interface{}) (vo.RemoveOrgMemberReq, error) {
	var it vo.RemoveOrgMemberReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveProjectMemberReq(ctx context.Context, obj interface{}) (vo.RemoveProjectMemberReq, error) {
	var it vo.RemoveProjectMemberReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswordReq(ctx context.Context, obj interface{}) (vo.ResetPasswordReq, error) {
	var it vo.ResetPasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "currentPassword":
			var err error
			it.CurrentPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error
			it.NewPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRetrievePasswordReq(ctx context.Context, obj interface{}) (vo.RetrievePasswordReq, error) {
	var it vo.RetrievePasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "username":
			var err error
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error
			it.AuthCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error
			it.NewPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendAuthCodeReq(ctx context.Context, obj interface{}) (vo.SendAuthCodeReq, error) {
	var it vo.SendAuthCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "authType":
			var err error
			it.AuthType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressType":
			var err error
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaId":
			var err error
			it.CaptchaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaPassword":
			var err error
			it.CaptchaPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendSmsLoginCodeReq(ctx context.Context, obj interface{}) (vo.SendSmsLoginCodeReq, error) {
	var it vo.SendSmsLoginCodeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaId":
			var err error
			it.CaptchaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "captchaPassword":
			var err error
			it.CaptchaPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetPasswordReq(ctx context.Context, obj interface{}) (vo.SetPasswordReq, error) {
	var it vo.SetPasswordReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSwitchUserOrganizationReq(ctx context.Context, obj interface{}) (vo.SwitchUserOrganizationReq, error) {
	var it vo.SwitchUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagListReq(ctx context.Context, obj interface{}) (vo.TagListReq, error) {
	var it vo.TagListReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "namePinyin":
			var err error
			it.NamePinyin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrendReq(ctx context.Context, obj interface{}) (vo.TrendReq, error) {
	var it vo.TrendReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "lastTrendId":
			var err error
			it.LastTrendID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "objType":
			var err error
			it.ObjType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "objId":
			var err error
			it.ObjID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operId":
			var err error
			it.OperID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error
			it.StartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error
			it.EndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error
			it.Page, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error
			it.Size, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnbindLoginNameReq(ctx context.Context, obj interface{}) (vo.UnbindLoginNameReq, error) {
	var it vo.UnbindLoginNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "addressType":
			var err error
			it.AddressType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error
			it.AuthCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAppInfoReq(ctx context.Context, obj interface{}) (vo.UpdateAppInfoReq, error) {
	var it vo.UpdateAppInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret1":
			var err error
			it.Secret1, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secret2":
			var err error
			it.Secret2, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDepartmentReq(ctx context.Context, obj interface{}) (vo.UpdateDepartmentReq, error) {
	var it vo.UpdateDepartmentReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHide":
			var err error
			it.IsHide, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueAndIssueRelateReq(ctx context.Context, obj interface{}) (vo.UpdateIssueAndIssueRelateReq, error) {
	var it vo.UpdateIssueAndIssueRelateReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "issueId":
			var err error
			it.IssueID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "addRelateIssueIds":
			var err error
			it.AddRelateIssueIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "delRelateIssueIds":
			var err error
			it.DelRelateIssueIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueObjectTypeReq(ctx context.Context, obj interface{}) (vo.UpdateIssueObjectTypeReq, error) {
	var it vo.UpdateIssueObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueProjectObjectTypeReq(ctx context.Context, obj interface{}) (vo.UpdateIssueProjectObjectTypeReq, error) {
	var it vo.UpdateIssueProjectObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueReq(ctx context.Context, obj interface{}) (vo.UpdateIssueReq, error) {
	var it vo.UpdateIssueReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error
			it.OwnerID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planWorkHour":
			var err error
			it.PlanWorkHour, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceId":
			var err error
			it.SourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueObjectTypeId":
			var err error
			it.IssueObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantIds":
			var err error
			it.ParticipantIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueSortReq(ctx context.Context, obj interface{}) (vo.UpdateIssueSortReq, error) {
	var it vo.UpdateIssueSortReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeId":
			var err error
			it.BeforeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "afterId":
			var err error
			it.AfterID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueSourceReq(ctx context.Context, obj interface{}) (vo.UpdateIssueSourceReq, error) {
	var it vo.UpdateIssueSourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectObjectTypeId":
			var err error
			it.ProjectObjectTypeID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueStatusReq(ctx context.Context, obj interface{}) (vo.UpdateIssueStatusReq, error) {
	var it vo.UpdateIssueStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error
			it.NextStatusID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusType":
			var err error
			it.NextStatusType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "needModifyChildStatus":
			var err error
			it.NeedModifyChildStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIssueTagsReq(ctx context.Context, obj interface{}) (vo.UpdateIssueTagsReq, error) {
	var it vo.UpdateIssueTagsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "addTags":
			var err error
			it.AddTags, err = ec.unmarshalOIssueTagReqInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, v)
			if err != nil {
				return it, err
			}
		case "delTags":
			var err error
			it.DelTags, err = ec.unmarshalOIssueTagReqInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationReq(ctx context.Context, obj interface{}) (vo.UpdateIterationReq, error) {
	var it vo.UpdateIterationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationStatReq(ctx context.Context, obj interface{}) (vo.UpdateIterationStatReq, error) {
	var it vo.UpdateIterationStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iterationId":
			var err error
			it.IterationID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error
			it.StatDate, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIterationStatusReq(ctx context.Context, obj interface{}) (vo.UpdateIterationStatusReq, error) {
	var it vo.UpdateIterationStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error
			it.NextStatusID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrgMemberCheckStatusReq(ctx context.Context, obj interface{}) (vo.UpdateOrgMemberCheckStatusReq, error) {
	var it vo.UpdateOrgMemberCheckStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrgMemberStatusReq(ctx context.Context, obj interface{}) (vo.UpdateOrgMemberStatusReq, error) {
	var it vo.UpdateOrgMemberStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrganizationSettingsReq(ctx context.Context, obj interface{}) (vo.UpdateOrganizationSettingsReq, error) {
	var it vo.UpdateOrganizationSettingsReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgName":
			var err error
			it.OrgName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industryId":
			var err error
			it.IndustryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "scale":
			var err error
			it.Scale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryId":
			var err error
			it.CountryID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "provinceId":
			var err error
			it.ProvinceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cityId":
			var err error
			it.CityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logoUrl":
			var err error
			it.LogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePermissionOperationReq(ctx context.Context, obj interface{}) (vo.UpdatePermissionOperationReq, error) {
	var it vo.UpdatePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "operationCodes":
			var err error
			it.OperationCodes, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePermissionReq(ctx context.Context, obj interface{}) (vo.UpdatePermissionReq, error) {
	var it vo.UpdatePermissionReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isShow":
			var err error
			it.IsShow, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePriorityReq(ctx context.Context, obj interface{}) (vo.UpdatePriorityReq, error) {
	var it vo.UpdatePriorityReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fontStyle":
			var err error
			it.FontStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error
			it.IsDefault, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProcessStatusReq(ctx context.Context, obj interface{}) (vo.UpdateProcessStatusReq, error) {
	var it vo.UpdateProcessStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fontStyle":
			var err error
			it.FontStyle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectDayStatReq(ctx context.Context, obj interface{}) (vo.UpdateProjectDayStatReq, error) {
	var it vo.UpdateProjectDayStatReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueCount":
			var err error
			it.IssueCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueWaitCount":
			var err error
			it.IssueWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueRunningCount":
			var err error
			it.IssueRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueEndCount":
			var err error
			it.IssueEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandCount":
			var err error
			it.DemandCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandWaitCount":
			var err error
			it.DemandWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandRunningCount":
			var err error
			it.DemandRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "demandEndCount":
			var err error
			it.DemandEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointCount":
			var err error
			it.StoryPointCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointWaitCount":
			var err error
			it.StoryPointWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointRunningCount":
			var err error
			it.StoryPointRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "storyPointEndCount":
			var err error
			it.StoryPointEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskCount":
			var err error
			it.TaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskWaitCount":
			var err error
			it.TaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskRunningCount":
			var err error
			it.TaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskEndCount":
			var err error
			it.TaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugCount":
			var err error
			it.BugCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugWaitCount":
			var err error
			it.BugWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugRunningCount":
			var err error
			it.BugRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bugEndCount":
			var err error
			it.BugEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskCount":
			var err error
			it.TesttaskCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskWaitCount":
			var err error
			it.TesttaskWaitCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskRunningCount":
			var err error
			it.TesttaskRunningCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "testtaskEndCount":
			var err error
			it.TesttaskEndCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ext":
			var err error
			it.Ext, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "statDate":
			var err error
			it.StatDate, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectDetailReq(ctx context.Context, obj interface{}) (vo.UpdateProjectDetailReq, error) {
	var it vo.UpdateProjectDetailReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice":
			var err error
			it.Notice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableWorkHours":
			var err error
			it.IsEnableWorkHours, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectFolderReq(ctx context.Context, obj interface{}) (vo.UpdateProjectFolderReq, error) {
	var it vo.UpdateProjectFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "folderId":
			var err error
			it.FolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error
			it.ParentID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileType":
			var err error
			it.FileType, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectObjectTypeReq(ctx context.Context, obj interface{}) (vo.UpdateProjectObjectTypeReq, error) {
	var it vo.UpdateProjectObjectTypeReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "afterId":
			var err error
			it.AfterID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeId":
			var err error
			it.BeforeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectReq(ctx context.Context, obj interface{}) (vo.UpdateProjectReq, error) {
	var it vo.UpdateProjectReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "preCode":
			var err error
			it.PreCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error
			it.Owner, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "priorityId":
			var err error
			it.PriorityID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "planStartTime":
			var err error
			it.PlanStartTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "planEndTime":
			var err error
			it.PlanEndTime, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "publicStatus":
			var err error
			it.PublicStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error
			it.ResourceID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePath":
			var err error
			it.ResourcePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceType":
			var err error
			it.ResourceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberIds":
			var err error
			it.MemberIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerIds":
			var err error
			it.FollowerIds, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncOutCalendar":
			var err error
			it.IsSyncOutCalendar, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectResourceFolderReq(ctx context.Context, obj interface{}) (vo.UpdateProjectResourceFolderReq, error) {
	var it vo.UpdateProjectResourceFolderReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "currentFolderId":
			var err error
			it.CurrentFolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetFolderId":
			var err error
			it.TargetFolderID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceIds":
			var err error
			it.ResourceIds, err = ec.unmarshalNInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectResourceNameReq(ctx context.Context, obj interface{}) (vo.UpdateProjectResourceNameReq, error) {
	var it vo.UpdateProjectResourceNameReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceId":
			var err error
			it.ResourceID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileSuffix":
			var err error
			it.FileSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectStatusReq(ctx context.Context, obj interface{}) (vo.UpdateProjectStatusReq, error) {
	var it vo.UpdateProjectStatusReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextStatusId":
			var err error
			it.NextStatusID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateResourceReq(ctx context.Context, obj interface{}) (vo.UpdateResourceReq, error) {
	var it vo.UpdateResourceReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "suffix":
			var err error
			it.Suffix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "md5":
			var err error
			it.Md5, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error
			it.Size, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRolePermissionOperationReq(ctx context.Context, obj interface{}) (vo.UpdateRolePermissionOperationReq, error) {
	var it vo.UpdateRolePermissionOperationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleId":
			var err error
			it.RoleID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatePermissions":
			var err error
			it.UpdatePermissions, err = ec.unmarshalOEveryPermission2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRoleReq(ctx context.Context, obj interface{}) (vo.UpdateRoleReq, error) {
	var it vo.UpdateRoleReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleId":
			var err error
			it.RoleID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTagReq(ctx context.Context, obj interface{}) (vo.UpdateTagReq, error) {
	var it vo.UpdateTagReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bgStyle":
			var err error
			it.BgStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserConfigReq, error) {
	var it vo.UpdateUserConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailyReportMessageStatus":
			var err error
			it.DailyReportMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerRangeStatus":
			var err error
			it.OwnerRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantRangeStatus":
			var err error
			it.ParticipantRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "attentionRangeStatus":
			var err error
			it.AttentionRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createRangeStatus":
			var err error
			it.CreateRangeStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remindMessageStatus":
			var err error
			it.RemindMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "commentAtMessageStatus":
			var err error
			it.CommentAtMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifyMessageStatus":
			var err error
			it.ModifyMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationMessageStatus":
			var err error
			it.RelationMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailyProjectReportMessageStatus":
			var err error
			it.DailyProjectReportMessageStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserDefaultProjectConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserDefaultProjectConfigReq, error) {
	var it vo.UpdateUserDefaultProjectConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "defaultProjectId":
			var err error
			it.DefaultProjectID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultProjectObjectTypeId":
			var err error
			it.DefaultProjectObjectTypeID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInfoReq(ctx context.Context, obj interface{}) (vo.UpdateUserInfoReq, error) {
	var it vo.UpdateUserInfoReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatar":
			var err error
			it.Avatar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error
			it.Birthday, err = ec.unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserOrgRoleReq(ctx context.Context, obj interface{}) (vo.UpdateUserOrgRoleReq, error) {
	var it vo.UpdateUserOrgRoleReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleId":
			var err error
			it.RoleID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error
			it.ProjectID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserOrganizationReq(ctx context.Context, obj interface{}) (vo.UpdateUserOrganizationReq, error) {
	var it vo.UpdateUserOrganizationReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkStatus":
			var err error
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "useStatus":
			var err error
			it.UseStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangerId":
			var err error
			it.StatusChangerID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusChangeTime":
			var err error
			it.StatusChangeTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditorId":
			var err error
			it.AuditorID, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "auditTime":
			var err error
			it.AuditTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "creator":
			var err error
			it.Creator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			it.CreateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updator":
			var err error
			it.Updator, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateTime":
			var err error
			it.UpdateTime, err = ec.unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error
			it.Version, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDelete":
			var err error
			it.IsDelete, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserPcConfigReq(ctx context.Context, obj interface{}) (vo.UpdateUserPcConfigReq, error) {
	var it vo.UpdateUserPcConfigReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "pcNoticeOpenStatus":
			var err error
			it.PcNoticeOpenStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcIssueRemindMessageStatus":
			var err error
			it.PcIssueRemindMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcOrgMessageStatus":
			var err error
			it.PcOrgMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcProjectMessageStatus":
			var err error
			it.PcProjectMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pcCommentAtMessageStatus":
			var err error
			it.PcCommentAtMessageStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateFields":
			var err error
			it.UpdateFields, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginReq(ctx context.Context, obj interface{}) (vo.UserLoginReq, error) {
	var it vo.UserLoginReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "loginType":
			var err error
			it.LoginType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "loginName":
			var err error
			it.LoginName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteCode":
			var err error
			it.InviteCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error
			it.SourcePlatform, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRegisterReq(ctx context.Context, obj interface{}) (vo.UserRegisterReq, error) {
	var it vo.UserRegisterReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userName":
			var err error
			it.UserName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registerType":
			var err error
			it.RegisterType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authCode":
			var err error
			it.AuthCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceChannel":
			var err error
			it.SourceChannel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourcePlatform":
			var err error
			it.SourcePlatform, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputprojectObjectTypesReq(ctx context.Context, obj interface{}) (vo.ProjectObjectTypesReq, error) {
	var it vo.ProjectObjectTypesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "objectType":
			var err error
			it.ObjectType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Ids":
			var err error
			it.Ids, err = ec.unmarshalOInt642ᚕint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputprojectTypesReq(ctx context.Context, obj interface{}) (vo.ProjectTypesReq, error) {
	var it vo.ProjectTypesReq
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error
			it.OrgID, err = ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "langCode":
			var err error
			it.LangCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var appInfoImplementors = []string{"AppInfo"}

func (ec *executionContext) _AppInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.AppInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, appInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInfo")
		case "id":
			out.Values[i] = ec._AppInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AppInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._AppInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secret1":
			out.Values[i] = ec._AppInfo_secret1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secret2":
			out.Values[i] = ec._AppInfo_secret2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._AppInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkStatus":
			out.Values[i] = ec._AppInfo_checkStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._AppInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._AppInfo_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._AppInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._AppInfo_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._AppInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._AppInfo_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._AppInfo_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appInfoListImplementors = []string{"AppInfoList"}

func (ec *executionContext) _AppInfoList(ctx context.Context, sel ast.SelectionSet, obj *vo.AppInfoList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, appInfoListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInfoList")
		case "total":
			out.Values[i] = ec._AppInfoList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._AppInfoList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var areaLinkageListRespImplementors = []string{"AreaLinkageListResp"}

func (ec *executionContext) _AreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AreaLinkageListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, areaLinkageListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaLinkageListResp")
		case "list":
			out.Values[i] = ec._AreaLinkageListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var areaLinkageRespImplementors = []string{"AreaLinkageResp"}

func (ec *executionContext) _AreaLinkageResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AreaLinkageResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, areaLinkageRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaLinkageResp")
		case "id":
			out.Values[i] = ec._AreaLinkageResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AreaLinkageResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cname":
			out.Values[i] = ec._AreaLinkageResp_cname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._AreaLinkageResp_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._AreaLinkageResp_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *vo.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			out.Values[i] = ec._Attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Attachment_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._Attachment_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Attachment_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pathCompressed":
			out.Values[i] = ec._Attachment_pathCompressed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Attachment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Attachment_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._Attachment_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Attachment_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suffix":
			out.Values[i] = ec._Attachment_suffix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "md5":
			out.Values[i] = ec._Attachment_md5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Attachment_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Attachment_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Attachment_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Attachment_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Attachment_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Attachment_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Attachment_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueList":
			out.Values[i] = ec._Attachment_issueList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentListImplementors = []string{"AttachmentList"}

func (ec *executionContext) _AttachmentList(ctx context.Context, sel ast.SelectionSet, obj *vo.AttachmentList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, attachmentListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttachmentList")
		case "total":
			out.Values[i] = ec._AttachmentList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._AttachmentList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authRespImplementors = []string{"AuthResp"}

func (ec *executionContext) _AuthResp(ctx context.Context, sel ast.SelectionSet, obj *vo.AuthResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthResp")
		case "token":
			out.Values[i] = ec._AuthResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._AuthResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._AuthResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._AuthResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._AuthResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AuthResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var basicConfigRespImplementors = []string{"BasicConfigResp"}

func (ec *executionContext) _BasicConfigResp(ctx context.Context, sel ast.SelectionSet, obj *vo.BasicConfigResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, basicConfigRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BasicConfigResp")
		case "runMode":
			out.Values[i] = ec._BasicConfigResp_runMode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buildInfo":
			out.Values[i] = ec._BasicConfigResp_buildInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var buildInfoDefineImplementors = []string{"BuildInfoDefine"}

func (ec *executionContext) _BuildInfoDefine(ctx context.Context, sel ast.SelectionSet, obj *vo.BuildInfoDefine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, buildInfoDefineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildInfoDefine")
		case "gitCommitLog":
			out.Values[i] = ec._BuildInfoDefine_gitCommitLog(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gitStatus":
			out.Values[i] = ec._BuildInfoDefine_gitStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buildTime":
			out.Values[i] = ec._BuildInfoDefine_buildTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "buildGoVersion":
			out.Values[i] = ec._BuildInfoDefine_buildGoVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changeListImplementors = []string{"ChangeList"}

func (ec *executionContext) _ChangeList(ctx context.Context, sel ast.SelectionSet, obj *vo.ChangeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, changeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangeList")
		case "field":
			out.Values[i] = ec._ChangeList_field(ctx, field, obj)
		case "fieldName":
			out.Values[i] = ec._ChangeList_fieldName(ctx, field, obj)
		case "oldValue":
			out.Values[i] = ec._ChangeList_oldValue(ctx, field, obj)
		case "newValue":
			out.Values[i] = ec._ChangeList_newValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var convertCodeRespImplementors = []string{"ConvertCodeResp"}

func (ec *executionContext) _ConvertCodeResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ConvertCodeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, convertCodeRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConvertCodeResp")
		case "code":
			out.Values[i] = ec._ConvertCodeResp_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectAttachmentRespImplementors = []string{"DeleteProjectAttachmentResp"}

func (ec *executionContext) _DeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, deleteProjectAttachmentRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectAttachmentResp")
		case "resourceIds":
			out.Values[i] = ec._DeleteProjectAttachmentResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectFolderRespImplementors = []string{"DeleteProjectFolderResp"}

func (ec *executionContext) _DeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, deleteProjectFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectFolderResp")
		case "folderIds":
			out.Values[i] = ec._DeleteProjectFolderResp_folderIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectResourceRespImplementors = []string{"DeleteProjectResourceResp"}

func (ec *executionContext) _DeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, obj *vo.DeleteProjectResourceResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, deleteProjectResourceRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectResourceResp")
		case "resourceIds":
			out.Values[i] = ec._DeleteProjectResourceResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *vo.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Department_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Department_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Department_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Department_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Department_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isHide":
			out.Values[i] = ec._Department_isHide(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._Department_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Department_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Department_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentListImplementors = []string{"DepartmentList"}

func (ec *executionContext) _DepartmentList(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, departmentListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentList")
		case "total":
			out.Values[i] = ec._DepartmentList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._DepartmentList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMemberInfoImplementors = []string{"DepartmentMemberInfo"}

func (ec *executionContext) _DepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.DepartmentMemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, departmentMemberInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMemberInfo")
		case "userId":
			out.Values[i] = ec._DepartmentMemberInfo_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DepartmentMemberInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._DepartmentMemberInfo_namePy(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._DepartmentMemberInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._DepartmentMemberInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unionId":
			out.Values[i] = ec._DepartmentMemberInfo_unionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentId":
			out.Values[i] = ec._DepartmentMemberInfo_departmentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var exportIssueTemplateRespImplementors = []string{"ExportIssueTemplateResp"}

func (ec *executionContext) _ExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ExportIssueTemplateResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, exportIssueTemplateRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExportIssueTemplateResp")
		case "url":
			out.Values[i] = ec._ExportIssueTemplateResp_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feiShuAuthRespImplementors = []string{"FeiShuAuthResp"}

func (ec *executionContext) _FeiShuAuthResp(ctx context.Context, sel ast.SelectionSet, obj *vo.FeiShuAuthResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, feiShuAuthRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeiShuAuthResp")
		case "token":
			out.Values[i] = ec._FeiShuAuthResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._FeiShuAuthResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._FeiShuAuthResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._FeiShuAuthResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._FeiShuAuthResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._FeiShuAuthResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var folderImplementors = []string{"Folder"}

func (ec *executionContext) _Folder(ctx context.Context, sel ast.SelectionSet, obj *vo.Folder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, folderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Folder")
		case "id":
			out.Values[i] = ec._Folder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Folder_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Folder_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Folder_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Folder_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Folder_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Folder_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Folder_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Folder_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Folder_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Folder_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Folder_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Folder_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Folder_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var folderListImplementors = []string{"FolderList"}

func (ec *executionContext) _FolderList(ctx context.Context, sel ast.SelectionSet, obj *vo.FolderList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, folderListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FolderList")
		case "total":
			out.Values[i] = ec._FolderList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._FolderList_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getInviteCodeRespImplementors = []string{"GetInviteCodeResp"}

func (ec *executionContext) _GetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetInviteCodeResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, getInviteCodeRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetInviteCodeResp")
		case "inviteCode":
			out.Values[i] = ec._GetInviteCodeResp_inviteCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expire":
			out.Values[i] = ec._GetInviteCodeResp_expire(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getInviteInfoRespImplementors = []string{"GetInviteInfoResp"}

func (ec *executionContext) _GetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetInviteInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, getInviteInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetInviteInfoResp")
		case "orgId":
			out.Values[i] = ec._GetInviteInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._GetInviteInfoResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviterId":
			out.Values[i] = ec._GetInviteInfoResp_inviterId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviterName":
			out.Values[i] = ec._GetInviteInfoResp_inviterName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getMQTTChannelKeyRespImplementors = []string{"GetMQTTChannelKeyResp"}

func (ec *executionContext) _GetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, getMQTTChannelKeyRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetMQTTChannelKeyResp")
		case "address":
			out.Values[i] = ec._GetMQTTChannelKeyResp_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._GetMQTTChannelKeyResp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "port":
			out.Values[i] = ec._GetMQTTChannelKeyResp_port(ctx, field, obj)
		case "channel":
			out.Values[i] = ec._GetMQTTChannelKeyResp_channel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":
			out.Values[i] = ec._GetMQTTChannelKeyResp_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getPersonalPermissionInfoRespImplementors = []string{"GetPersonalPermissionInfoResp"}

func (ec *executionContext) _GetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, getPersonalPermissionInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetPersonalPermissionInfoResp")
		case "Data":
			out.Values[i] = ec._GetPersonalPermissionInfoResp_Data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueInfoImplementors = []string{"HomeIssueInfo"}

func (ec *executionContext) _HomeIssueInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueInfo")
		case "issue":
			out.Values[i] = ec._HomeIssueInfo_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._HomeIssueInfo_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._HomeIssueInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._HomeIssueInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			out.Values[i] = ec._HomeIssueInfo_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":
			out.Values[i] = ec._HomeIssueInfo_tags(ctx, field, obj)
		case "childsNum":
			out.Values[i] = ec._HomeIssueInfo_childsNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childsFinishedNum":
			out.Values[i] = ec._HomeIssueInfo_childsFinishedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueInfoRespImplementors = []string{"HomeIssueInfoResp"}

func (ec *executionContext) _HomeIssueInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueInfoResp")
		case "total":
			out.Values[i] = ec._HomeIssueInfoResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actualTotal":
			out.Values[i] = ec._HomeIssueInfoResp_actualTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._HomeIssueInfoResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueOwnerInfoImplementors = []string{"HomeIssueOwnerInfo"}

func (ec *executionContext) _HomeIssueOwnerInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueOwnerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueOwnerInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueOwnerInfo")
		case "id":
			out.Values[i] = ec._HomeIssueOwnerInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueOwnerInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._HomeIssueOwnerInfo_avatar(ctx, field, obj)
		case "isDeleted":
			out.Values[i] = ec._HomeIssueOwnerInfo_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDisabled":
			out.Values[i] = ec._HomeIssueOwnerInfo_isDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssuePriorityInfoImplementors = []string{"HomeIssuePriorityInfo"}

func (ec *executionContext) _HomeIssuePriorityInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssuePriorityInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssuePriorityInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssuePriorityInfo")
		case "id":
			out.Values[i] = ec._HomeIssuePriorityInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssuePriorityInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._HomeIssuePriorityInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssuePriorityInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueProjectInfoImplementors = []string{"HomeIssueProjectInfo"}

func (ec *executionContext) _HomeIssueProjectInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueProjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueProjectInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueProjectInfo")
		case "id":
			out.Values[i] = ec._HomeIssueProjectInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueProjectInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFilling":
			out.Values[i] = ec._HomeIssueProjectInfo_isFilling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueStatusInfoImplementors = []string{"HomeIssueStatusInfo"}

func (ec *executionContext) _HomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueStatusInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueStatusInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueStatusInfo")
		case "id":
			out.Values[i] = ec._HomeIssueStatusInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueStatusInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._HomeIssueStatusInfo_displayName(ctx, field, obj)
		case "bgStyle":
			out.Values[i] = ec._HomeIssueStatusInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssueStatusInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._HomeIssueStatusInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var homeIssueTagInfoImplementors = []string{"HomeIssueTagInfo"}

func (ec *executionContext) _HomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.HomeIssueTagInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, homeIssueTagInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HomeIssueTagInfo")
		case "id":
			out.Values[i] = ec._HomeIssueTagInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HomeIssueTagInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._HomeIssueTagInfo_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._HomeIssueTagInfo_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryListRespImplementors = []string{"IndustryListResp"}

func (ec *executionContext) _IndustryListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IndustryListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, industryListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryListResp")
		case "list":
			out.Values[i] = ec._IndustryListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var industryRespImplementors = []string{"IndustryResp"}

func (ec *executionContext) _IndustryResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IndustryResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, industryRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndustryResp")
		case "id":
			out.Values[i] = ec._IndustryResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IndustryResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cname":
			out.Values[i] = ec._IndustryResp_cname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var internalAuthRespImplementors = []string{"InternalAuthResp"}

func (ec *executionContext) _InternalAuthResp(ctx context.Context, sel ast.SelectionSet, obj *vo.InternalAuthResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, internalAuthRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InternalAuthResp")
		case "hasPermission":
			out.Values[i] = ec._InternalAuthResp_hasPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueImplementors = []string{"Issue"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *vo.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "id":
			out.Values[i] = ec._Issue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Issue_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Issue_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Issue_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._Issue_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Issue_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Issue_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityId":
			out.Values[i] = ec._Issue_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceId":
			out.Values[i] = ec._Issue_sourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueObjectTypeId":
			out.Values[i] = ec._Issue_issueObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Issue_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._Issue_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._Issue_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._Issue_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planWorkHour":
			out.Values[i] = ec._Issue_planWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationId":
			out.Values[i] = ec._Issue_iterationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "versionId":
			out.Values[i] = ec._Issue_versionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moduleId":
			out.Values[i] = ec._Issue_moduleId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Issue_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentTitle":
			out.Values[i] = ec._Issue_parentTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Issue_remark(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Issue_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Issue_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Issue_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Issue_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Issue_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Issue_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueAndProjectCountStatRespImplementors = []string{"IssueAndProjectCountStatResp"}

func (ec *executionContext) _IssueAndProjectCountStatResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueAndProjectCountStatResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueAndProjectCountStatRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueAndProjectCountStatResp")
		case "projectNotCompletedCount":
			out.Values[i] = ec._IssueAndProjectCountStatResp_projectNotCompletedCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueNotCompletedCount":
			out.Values[i] = ec._IssueAndProjectCountStatResp_issueNotCompletedCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participantsProjectCount":
			out.Values[i] = ec._IssueAndProjectCountStatResp_participantsProjectCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filingParticipantsProjectCount":
			out.Values[i] = ec._IssueAndProjectCountStatResp_filingParticipantsProjectCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueAssignRankInfoImplementors = []string{"IssueAssignRankInfo"}

func (ec *executionContext) _IssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueAssignRankInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueAssignRankInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueAssignRankInfo")
		case "name":
			out.Values[i] = ec._IssueAssignRankInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._IssueAssignRankInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._IssueAssignRankInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "incompleteissueCount":
			out.Values[i] = ec._IssueAssignRankInfo_incompleteissueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueDailyPersonalWorkCompletionStatDataImplementors = []string{"IssueDailyPersonalWorkCompletionStatData"}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatData(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueDailyPersonalWorkCompletionStatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueDailyPersonalWorkCompletionStatDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueDailyPersonalWorkCompletionStatData")
		case "statDate":
			out.Values[i] = ec._IssueDailyPersonalWorkCompletionStatData_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedCount":
			out.Values[i] = ec._IssueDailyPersonalWorkCompletionStatData_completedCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueDailyPersonalWorkCompletionStatRespImplementors = []string{"IssueDailyPersonalWorkCompletionStatResp"}

func (ec *executionContext) _IssueDailyPersonalWorkCompletionStatResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueDailyPersonalWorkCompletionStatResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueDailyPersonalWorkCompletionStatRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueDailyPersonalWorkCompletionStatResp")
		case "list":
			out.Values[i] = ec._IssueDailyPersonalWorkCompletionStatResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueInfoImplementors = []string{"IssueInfo"}

func (ec *executionContext) _IssueInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueInfo")
		case "issue":
			out.Values[i] = ec._IssueInfo_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._IssueInfo_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			out.Values[i] = ec._IssueInfo_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._IssueInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._IssueInfo_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participantInfos":
			out.Values[i] = ec._IssueInfo_participantInfos(ctx, field, obj)
		case "followerInfos":
			out.Values[i] = ec._IssueInfo_followerInfos(ctx, field, obj)
		case "nextStatus":
			out.Values[i] = ec._IssueInfo_nextStatus(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._IssueInfo_tags(ctx, field, obj)
		case "sourceInfo":
			out.Values[i] = ec._IssueInfo_sourceInfo(ctx, field, obj)
		case "typeInfo":
			out.Values[i] = ec._IssueInfo_typeInfo(ctx, field, obj)
		case "childsNum":
			out.Values[i] = ec._IssueInfo_childsNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "childsFinishedNum":
			out.Values[i] = ec._IssueInfo_childsFinishedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeName":
			out.Values[i] = ec._IssueInfo_projectObjectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueListImplementors = []string{"IssueList"}

func (ec *executionContext) _IssueList(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueList")
		case "total":
			out.Values[i] = ec._IssueList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueObjectTypeImplementors = []string{"IssueObjectType"}

func (ec *executionContext) _IssueObjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueObjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueObjectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueObjectType")
		case "id":
			out.Values[i] = ec._IssueObjectType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IssueObjectType_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._IssueObjectType_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueObjectType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._IssueObjectType_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueObjectType_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._IssueObjectType_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueObjectType_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IssueObjectType_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IssueObjectType_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._IssueObjectType_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._IssueObjectType_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueObjectTypeInfoImplementors = []string{"IssueObjectTypeInfo"}

func (ec *executionContext) _IssueObjectTypeInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueObjectTypeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueObjectTypeInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueObjectTypeInfo")
		case "id":
			out.Values[i] = ec._IssueObjectTypeInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueObjectTypeInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueObjectTypeListImplementors = []string{"IssueObjectTypeList"}

func (ec *executionContext) _IssueObjectTypeList(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueObjectTypeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueObjectTypeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueObjectTypeList")
		case "total":
			out.Values[i] = ec._IssueObjectTypeList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueObjectTypeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueReportRespImplementors = []string{"IssueReportResp"}

func (ec *executionContext) _IssueReportResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueReportResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueReportRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueReportResp")
		case "total":
			out.Values[i] = ec._IssueReportResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shareId":
			out.Values[i] = ec._IssueReportResp_shareId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reportUserName":
			out.Values[i] = ec._IssueReportResp_reportUserName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":
			out.Values[i] = ec._IssueReportResp_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._IssueReportResp_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueReportResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueRestInfoImplementors = []string{"IssueRestInfo"}

func (ec *executionContext) _IssueRestInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueRestInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueRestInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueRestInfo")
		case "id":
			out.Values[i] = ec._IssueRestInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._IssueRestInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerId":
			out.Values[i] = ec._IssueRestInfo_ownerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerName":
			out.Values[i] = ec._IssueRestInfo_ownerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerAvatar":
			out.Values[i] = ec._IssueRestInfo_ownerAvatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerIsDeleted":
			out.Values[i] = ec._IssueRestInfo_ownerIsDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerIsDisabled":
			out.Values[i] = ec._IssueRestInfo_ownerIsDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finished":
			out.Values[i] = ec._IssueRestInfo_finished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusId":
			out.Values[i] = ec._IssueRestInfo_statusId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusName":
			out.Values[i] = ec._IssueRestInfo_statusName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._IssueRestInfo_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._IssueRestInfo_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":
			out.Values[i] = ec._IssueRestInfo_endTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityInfo":
			out.Values[i] = ec._IssueRestInfo_priorityInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueRestInfoRespImplementors = []string{"IssueRestInfoResp"}

func (ec *executionContext) _IssueRestInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueRestInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueRestInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueRestInfoResp")
		case "total":
			out.Values[i] = ec._IssueRestInfoResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueRestInfoResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueSourceImplementors = []string{"IssueSource"}

func (ec *executionContext) _IssueSource(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueSourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSource")
		case "id":
			out.Values[i] = ec._IssueSource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IssueSource_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._IssueSource_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueSource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._IssueSource_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueSource_projectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._IssueSource_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IssueSource_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IssueSource_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IssueSource_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._IssueSource_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._IssueSource_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueSourceInfoImplementors = []string{"IssueSourceInfo"}

func (ec *executionContext) _IssueSourceInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueSourceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueSourceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSourceInfo")
		case "id":
			out.Values[i] = ec._IssueSourceInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._IssueSourceInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueSourceListImplementors = []string{"IssueSourceList"}

func (ec *executionContext) _IssueSourceList(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueSourceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueSourceListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSourceList")
		case "total":
			out.Values[i] = ec._IssueSourceList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueSourceList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatByObjectTypeImplementors = []string{"IssueStatByObjectType"}

func (ec *executionContext) _IssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatByObjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueStatByObjectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatByObjectType")
		case "projectObjectTypeId":
			out.Values[i] = ec._IssueStatByObjectType_projectObjectTypeId(ctx, field, obj)
		case "projectObjectTypeName":
			out.Values[i] = ec._IssueStatByObjectType_projectObjectTypeName(ctx, field, obj)
		case "total":
			out.Values[i] = ec._IssueStatByObjectType_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatusTypeStatDetailRespImplementors = []string{"IssueStatusTypeStatDetailResp"}

func (ec *executionContext) _IssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueStatusTypeStatDetailRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatusTypeStatDetailResp")
		case "notStart":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_notStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processing":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_processing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completed":
			out.Values[i] = ec._IssueStatusTypeStatDetailResp_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueStatusTypeStatRespImplementors = []string{"IssueStatusTypeStatResp"}

func (ec *executionContext) _IssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IssueStatusTypeStatResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, issueStatusTypeStatRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueStatusTypeStatResp")
		case "notStartTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_notStartTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processingTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_processingTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_completedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedTodayTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_completedTodayTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTomorrowTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTomorrowTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueCompletedTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueCompletedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._IssueStatusTypeStatResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueTodayTotal":
			out.Values[i] = ec._IssueStatusTypeStatResp_overdueTodayTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "beAboutToOverdueSum":
			out.Values[i] = ec._IssueStatusTypeStatResp_beAboutToOverdueSum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "todayCount":
			out.Values[i] = ec._IssueStatusTypeStatResp_todayCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "todayCreateCount":
			out.Values[i] = ec._IssueStatusTypeStatResp_todayCreateCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IssueStatusTypeStatResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationImplementors = []string{"Iteration"}

func (ec *executionContext) _Iteration(ctx context.Context, sel ast.SelectionSet, obj *vo.Iteration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Iteration")
		case "id":
			out.Values[i] = ec._Iteration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Iteration_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Iteration_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Iteration_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Iteration_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "versionId":
			out.Values[i] = ec._Iteration_versionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Iteration_planStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planEndTime":
			out.Values[i] = ec._Iteration_planEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planWorkHour":
			out.Values[i] = ec._Iteration_planWorkHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPoint":
			out.Values[i] = ec._Iteration_storyPoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Iteration_remark(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Iteration_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Iteration_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Iteration_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Iteration_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Iteration_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerInfo":
			out.Values[i] = ec._Iteration_ownerInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusInfo":
			out.Values[i] = ec._Iteration_statusInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationInfoRespImplementors = []string{"IterationInfoResp"}

func (ec *executionContext) _IterationInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationInfoResp")
		case "iteration":
			out.Values[i] = ec._IterationInfoResp_iteration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project":
			out.Values[i] = ec._IterationInfoResp_project(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IterationInfoResp_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._IterationInfoResp_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nextStatus":
			out.Values[i] = ec._IterationInfoResp_nextStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationListImplementors = []string{"IterationList"}

func (ec *executionContext) _IterationList(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationList")
		case "total":
			out.Values[i] = ec._IterationList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IterationList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatImplementors = []string{"IterationStat"}

func (ec *executionContext) _IterationStat(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStat")
		case "id":
			out.Values[i] = ec._IterationStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._IterationStat_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._IterationStat_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iterationId":
			out.Values[i] = ec._IterationStat_iterationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueCount":
			out.Values[i] = ec._IterationStat_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._IterationStat_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._IterationStat_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._IterationStat_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandCount":
			out.Values[i] = ec._IterationStat_demandCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandWaitCount":
			out.Values[i] = ec._IterationStat_demandWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandRunningCount":
			out.Values[i] = ec._IterationStat_demandRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandEndCount":
			out.Values[i] = ec._IterationStat_demandEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._IterationStat_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._IterationStat_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._IterationStat_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._IterationStat_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskCount":
			out.Values[i] = ec._IterationStat_taskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskWaitCount":
			out.Values[i] = ec._IterationStat_taskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskRunningCount":
			out.Values[i] = ec._IterationStat_taskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskEndCount":
			out.Values[i] = ec._IterationStat_taskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugCount":
			out.Values[i] = ec._IterationStat_bugCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugWaitCount":
			out.Values[i] = ec._IterationStat_bugWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugRunningCount":
			out.Values[i] = ec._IterationStat_bugRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugEndCount":
			out.Values[i] = ec._IterationStat_bugEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskCount":
			out.Values[i] = ec._IterationStat_testtaskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskWaitCount":
			out.Values[i] = ec._IterationStat_testtaskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskRunningCount":
			out.Values[i] = ec._IterationStat_testtaskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskEndCount":
			out.Values[i] = ec._IterationStat_testtaskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._IterationStat_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statDate":
			out.Values[i] = ec._IterationStat_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._IterationStat_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._IterationStat_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._IterationStat_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatListImplementors = []string{"IterationStatList"}

func (ec *executionContext) _IterationStatList(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStatList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationStatListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStatList")
		case "total":
			out.Values[i] = ec._IterationStatList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._IterationStatList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iterationStatusTypeStatRespImplementors = []string{"IterationStatusTypeStatResp"}

func (ec *executionContext) _IterationStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, obj *vo.IterationStatusTypeStatResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iterationStatusTypeStatRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IterationStatusTypeStatResp")
		case "notStartTotal":
			out.Values[i] = ec._IterationStatusTypeStatResp_notStartTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processingTotal":
			out.Values[i] = ec._IterationStatusTypeStatResp_processingTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedTotal":
			out.Values[i] = ec._IterationStatusTypeStatResp_completedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._IterationStatusTypeStatResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jsApiSignRespImplementors = []string{"JsApiSignResp"}

func (ec *executionContext) _JsApiSignResp(ctx context.Context, sel ast.SelectionSet, obj *vo.JsAPISignResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, jsApiSignRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JsApiSignResp")
		case "agentId":
			out.Values[i] = ec._JsApiSignResp_agentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeStamp":
			out.Values[i] = ec._JsApiSignResp_timeStamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noceStr":
			out.Values[i] = ec._JsApiSignResp_noceStr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signature":
			out.Values[i] = ec._JsApiSignResp_signature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberInfoImplementors = []string{"MemberInfo"}

func (ec *executionContext) _MemberInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.MemberInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, memberInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberInfo")
		case "id":
			out.Values[i] = ec._MemberInfo_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MemberInfo_name(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._MemberInfo_avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "sendSmsLoginCode":
			out.Values[i] = ec._Mutation_sendSmsLoginCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendAuthCode":
			out.Values[i] = ec._Mutation_sendAuthCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retrievePassword":
			out.Values[i] = ec._Mutation_retrievePassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPassword":
			out.Values[i] = ec._Mutation_resetPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setPassword":
			out.Values[i] = ec._Mutation_setPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unbindLoginName":
			out.Values[i] = ec._Mutation_unbindLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindLoginName":
			out.Values[i] = ec._Mutation_bindLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkLoginName":
			out.Values[i] = ec._Mutation_checkLoginName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userLogin":
			out.Values[i] = ec._Mutation_userLogin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userRegister":
			out.Values[i] = ec._Mutation_userRegister(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userQuit":
			out.Values[i] = ec._Mutation_userQuit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerWebSiteContact":
			out.Values[i] = ec._Mutation_registerWebSiteContact(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quitProject":
			out.Values[i] = ec._Mutation_quitProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "starProject":
			out.Values[i] = ec._Mutation_starProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unstarProject":
			out.Values[i] = ec._Mutation_unstarProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectStatus":
			out.Values[i] = ec._Mutation_updateProjectStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archiveProject":
			out.Values[i] = ec._Mutation_archiveProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelArchivedProject":
			out.Values[i] = ec._Mutation_cancelArchivedProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserConfig":
			out.Values[i] = ec._Mutation_updateUserConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserDefaultProjectConfig":
			out.Values[i] = ec._Mutation_updateUserDefaultProjectConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserPcConfig":
			out.Values[i] = ec._Mutation_updateUserPcConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "convertCode":
			out.Values[i] = ec._Mutation_convertCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIterationIssueRelate":
			out.Values[i] = ec._Mutation_updateIterationIssueRelate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIterationStatus":
			out.Values[i] = ec._Mutation_updateIterationStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrg":
			out.Values[i] = ec._Mutation_createOrg(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssue":
			out.Values[i] = ec._Mutation_createIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueComment":
			out.Values[i] = ec._Mutation_createIssueComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueResource":
			out.Values[i] = ec._Mutation_createIssueResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssueResource":
			out.Values[i] = ec._Mutation_deleteIssueResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueAndIssueRelate":
			out.Values[i] = ec._Mutation_updateIssueAndIssueRelate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssue":
			out.Values[i] = ec._Mutation_updateIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueStatus":
			out.Values[i] = ec._Mutation_updateIssueStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueSort":
			out.Values[i] = ec._Mutation_updateIssueSort(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueProjectObjectType":
			out.Values[i] = ec._Mutation_updateIssueProjectObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueTags":
			out.Values[i] = ec._Mutation_updateIssueTags(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssue":
			out.Values[i] = ec._Mutation_deleteIssue(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProject":
			out.Values[i] = ec._Mutation_createProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProject":
			out.Values[i] = ec._Mutation_updateProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProcessStatus":
			out.Values[i] = ec._Mutation_createProcessStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProcessStatus":
			out.Values[i] = ec._Mutation_updateProcessStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProcessStatus":
			out.Values[i] = ec._Mutation_deleteProcessStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPriority":
			out.Values[i] = ec._Mutation_createPriority(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePriority":
			out.Values[i] = ec._Mutation_updatePriority(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePriority":
			out.Values[i] = ec._Mutation_deletePriority(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIteration":
			out.Values[i] = ec._Mutation_createIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIteration":
			out.Values[i] = ec._Mutation_updateIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIteration":
			out.Values[i] = ec._Mutation_deleteIteration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProjectDetail":
			out.Values[i] = ec._Mutation_createProjectDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectDetail":
			out.Values[i] = ec._Mutation_updateProjectDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectDetail":
			out.Values[i] = ec._Mutation_deleteProjectDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "importIssues":
			out.Values[i] = ec._Mutation_importIssues(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTag":
			out.Values[i] = ec._Mutation_createTag(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTag":
			out.Values[i] = ec._Mutation_deleteTag(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTag":
			out.Values[i] = ec._Mutation_updateTag(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProjectObjectType":
			out.Values[i] = ec._Mutation_createProjectObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectObjectType":
			out.Values[i] = ec._Mutation_updateProjectObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectObjectType":
			out.Values[i] = ec._Mutation_deleteProjectObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueObjectType":
			out.Values[i] = ec._Mutation_createIssueObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueObjectType":
			out.Values[i] = ec._Mutation_updateIssueObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssueObjectType":
			out.Values[i] = ec._Mutation_deleteIssueObjectType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createIssueSource":
			out.Values[i] = ec._Mutation_createIssueSource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIssueSource":
			out.Values[i] = ec._Mutation_updateIssueSource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIssueSource":
			out.Values[i] = ec._Mutation_deleteIssueSource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "switchUserOrganization":
			out.Values[i] = ec._Mutation_switchUserOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationSetting":
			out.Values[i] = ec._Mutation_updateOrganizationSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserOrgRole":
			out.Values[i] = ec._Mutation_updateUserOrgRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgMemberStatus":
			out.Values[i] = ec._Mutation_updateOrgMemberStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgMemberCheckStatus":
			out.Values[i] = ec._Mutation_updateOrgMemberCheckStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRole":
			out.Values[i] = ec._Mutation_createRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRolePermissionOperation":
			out.Values[i] = ec._Mutation_updateRolePermissionOperation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delRole":
			out.Values[i] = ec._Mutation_delRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRole":
			out.Values[i] = ec._Mutation_updateRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeOrgMember":
			out.Values[i] = ec._Mutation_removeOrgMember(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserInfo":
			out.Values[i] = ec._Mutation_updateUserInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeProjectMember":
			out.Values[i] = ec._Mutation_removeProjectMember(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addProjectMember":
			out.Values[i] = ec._Mutation_addProjectMember(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProjectResource":
			out.Values[i] = ec._Mutation_createProjectResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectResourceFolder":
			out.Values[i] = ec._Mutation_updateProjectResourceFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectResourceName":
			out.Values[i] = ec._Mutation_updateProjectResourceName(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectResource":
			out.Values[i] = ec._Mutation_deleteProjectResource(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProjectFolder":
			out.Values[i] = ec._Mutation_createProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectFolder":
			out.Values[i] = ec._Mutation_deleteProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProjectFolder":
			out.Values[i] = ec._Mutation_updateProjectFolder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProjectAttachment":
			out.Values[i] = ec._Mutation_deleteProjectAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var noticeImplementors = []string{"Notice"}

func (ec *executionContext) _Notice(ctx context.Context, sel ast.SelectionSet, obj *vo.Notice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, noticeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notice")
		case "id":
			out.Values[i] = ec._Notice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Notice_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Notice_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationTye":
			out.Values[i] = ec._Notice_relationTye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._Notice_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Notice_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueId":
			out.Values[i] = ec._Notice_issueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trendsId":
			out.Values[i] = ec._Notice_trendsId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Notice_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "noticer":
			out.Values[i] = ec._Notice_noticer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Notice_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Notice_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Notice_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Notice_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectName":
			out.Values[i] = ec._Notice_projectName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueName":
			out.Values[i] = ec._Notice_issueName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var noticeCountRespImplementors = []string{"NoticeCountResp"}

func (ec *executionContext) _NoticeCountResp(ctx context.Context, sel ast.SelectionSet, obj *vo.NoticeCountResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, noticeCountRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NoticeCountResp")
		case "total":
			out.Values[i] = ec._NoticeCountResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var noticeListImplementors = []string{"NoticeList"}

func (ec *executionContext) _NoticeList(ctx context.Context, sel ast.SelectionSet, obj *vo.NoticeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, noticeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NoticeList")
		case "total":
			out.Values[i] = ec._NoticeList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._NoticeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operateProjectRespImplementors = []string{"OperateProjectResp"}

func (ec *executionContext) _OperateProjectResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OperateProjectResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, operateProjectRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperateProjectResp")
		case "isSuccess":
			out.Values[i] = ec._OperateProjectResp_isSuccess(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgProjectMemberInfoRespImplementors = []string{"OrgProjectMemberInfoResp"}

func (ec *executionContext) _OrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, orgProjectMemberInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgProjectMemberInfoResp")
		case "userId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outUserId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_outUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outOrgId":
			out.Values[i] = ec._OrgProjectMemberInfoResp_outOrgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._OrgProjectMemberInfoResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePy":
			out.Values[i] = ec._OrgProjectMemberInfoResp_namePy(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._OrgProjectMemberInfoResp_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOutInfo":
			out.Values[i] = ec._OrgProjectMemberInfoResp_hasOutInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOrgOutInfo":
			out.Values[i] = ec._OrgProjectMemberInfoResp_hasOrgOutInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserIsDelete":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserIsDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserStatus":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgUserCheckStatus":
			out.Values[i] = ec._OrgProjectMemberInfoResp_orgUserCheckStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgProjectMemberRespImplementors = []string{"OrgProjectMemberResp"}

func (ec *executionContext) _OrgProjectMemberResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OrgProjectMemberResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, orgProjectMemberRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgProjectMemberResp")
		case "owner":
			out.Values[i] = ec._OrgProjectMemberResp_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participants":
			out.Values[i] = ec._OrgProjectMemberResp_participants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "follower":
			out.Values[i] = ec._OrgProjectMemberResp_follower(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allMembers":
			out.Values[i] = ec._OrgProjectMemberResp_allMembers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationInfoRespImplementors = []string{"OrganizationInfoResp"}

func (ec *executionContext) _OrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OrganizationInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, organizationInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationInfoResp")
		case "orgId":
			out.Values[i] = ec._OrganizationInfoResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._OrganizationInfoResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._OrganizationInfoResp_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "webSite":
			out.Values[i] = ec._OrganizationInfoResp_webSite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryId":
			out.Values[i] = ec._OrganizationInfoResp_industryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryName":
			out.Values[i] = ec._OrganizationInfoResp_industryName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scale":
			out.Values[i] = ec._OrganizationInfoResp_scale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryId":
			out.Values[i] = ec._OrganizationInfoResp_countryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCname":
			out.Values[i] = ec._OrganizationInfoResp_countryCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceId":
			out.Values[i] = ec._OrganizationInfoResp_provinceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceCname":
			out.Values[i] = ec._OrganizationInfoResp_provinceCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityId":
			out.Values[i] = ec._OrganizationInfoResp_cityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityCname":
			out.Values[i] = ec._OrganizationInfoResp_cityCname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._OrganizationInfoResp_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logoUrl":
			out.Values[i] = ec._OrganizationInfoResp_logoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._OrganizationInfoResp_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationUserImplementors = []string{"OrganizationUser"}

func (ec *executionContext) _OrganizationUser(ctx context.Context, sel ast.SelectionSet, obj *vo.OrganizationUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, organizationUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationUser")
		case "id":
			out.Values[i] = ec._OrganizationUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._OrganizationUser_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._OrganizationUser_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkStatus":
			out.Values[i] = ec._OrganizationUser_checkStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "useStatus":
			out.Values[i] = ec._OrganizationUser_useStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._OrganizationUser_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusChangerId":
			out.Values[i] = ec._OrganizationUser_statusChangerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusChangeTime":
			out.Values[i] = ec._OrganizationUser_statusChangeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorId":
			out.Values[i] = ec._OrganizationUser_auditorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditTime":
			out.Values[i] = ec._OrganizationUser_auditTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._OrganizationUser_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._OrganizationUser_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._OrganizationUser_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._OrganizationUser_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userInfo":
			out.Values[i] = ec._OrganizationUser_userInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auditorInfo":
			out.Values[i] = ec._OrganizationUser_auditorInfo(ctx, field, obj)
		case "userRole":
			out.Values[i] = ec._OrganizationUser_userRole(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ossApplySignUrlRespImplementors = []string{"OssApplySignUrlResp"}

func (ec *executionContext) _OssApplySignUrlResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OssApplySignURLResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ossApplySignUrlRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OssApplySignUrlResp")
		case "signUrl":
			out.Values[i] = ec._OssApplySignUrlResp_signUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ossPostPolicyRespImplementors = []string{"OssPostPolicyResp"}

func (ec *executionContext) _OssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, obj *vo.OssPostPolicyResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ossPostPolicyRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OssPostPolicyResp")
		case "policy":
			out.Values[i] = ec._OssPostPolicyResp_policy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signature":
			out.Values[i] = ec._OssPostPolicyResp_signature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dir":
			out.Values[i] = ec._OssPostPolicyResp_dir(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expire":
			out.Values[i] = ec._OssPostPolicyResp_expire(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessId":
			out.Values[i] = ec._OssPostPolicyResp_accessId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._OssPostPolicyResp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region":
			out.Values[i] = ec._OssPostPolicyResp_region(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bucket":
			out.Values[i] = ec._OssPostPolicyResp_bucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileName":
			out.Values[i] = ec._OssPostPolicyResp_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxFileSize":
			out.Values[i] = ec._OssPostPolicyResp_maxFileSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "callback":
			out.Values[i] = ec._OssPostPolicyResp_callback(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *vo.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":
			out.Values[i] = ec._Permission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Permission_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Permission_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Permission_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Permission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":
			out.Values[i] = ec._Permission_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Permission_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Permission_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._Permission_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Permission_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Permission_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Permission_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Permission_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Permission_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Permission_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionListImplementors = []string{"PermissionList"}

func (ec *executionContext) _PermissionList(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionList")
		case "total":
			out.Values[i] = ec._PermissionList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._PermissionList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionOperationImplementors = []string{"PermissionOperation"}

func (ec *executionContext) _PermissionOperation(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionOperation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionOperationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionOperation")
		case "id":
			out.Values[i] = ec._PermissionOperation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._PermissionOperation_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissionId":
			out.Values[i] = ec._PermissionOperation_permissionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._PermissionOperation_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PermissionOperation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operationCodes":
			out.Values[i] = ec._PermissionOperation_operationCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._PermissionOperation_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._PermissionOperation_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._PermissionOperation_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._PermissionOperation_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._PermissionOperation_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._PermissionOperation_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._PermissionOperation_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionOperationListImplementors = []string{"PermissionOperationList"}

func (ec *executionContext) _PermissionOperationList(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionOperationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionOperationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionOperationList")
		case "total":
			out.Values[i] = ec._PermissionOperationList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._PermissionOperationList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionOperationListRespImplementors = []string{"PermissionOperationListResp"}

func (ec *executionContext) _PermissionOperationListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.PermissionOperationListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionOperationListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionOperationListResp")
		case "permissionInfo":
			out.Values[i] = ec._PermissionOperationListResp_permissionInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operationList":
			out.Values[i] = ec._PermissionOperationListResp_operationList(ctx, field, obj)
		case "permissionHave":
			out.Values[i] = ec._PermissionOperationListResp_permissionHave(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personalInfoImplementors = []string{"PersonalInfo"}

func (ec *executionContext) _PersonalInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.PersonalInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, personalInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonalInfo")
		case "id":
			out.Values[i] = ec._PersonalInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._PersonalInfo_emplId(ctx, field, obj)
		case "orgId":
			out.Values[i] = ec._PersonalInfo_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._PersonalInfo_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._PersonalInfo_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PersonalInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginName":
			out.Values[i] = ec._PersonalInfo_loginName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginNameEditCount":
			out.Values[i] = ec._PersonalInfo_loginNameEditCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._PersonalInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mobile":
			out.Values[i] = ec._PersonalInfo_mobile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "birthday":
			out.Values[i] = ec._PersonalInfo_birthday(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sex":
			out.Values[i] = ec._PersonalInfo_sex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rimanente":
			out.Values[i] = ec._PersonalInfo_rimanente(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":
			out.Values[i] = ec._PersonalInfo_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "levelName":
			out.Values[i] = ec._PersonalInfo_levelName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._PersonalInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._PersonalInfo_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "language":
			out.Values[i] = ec._PersonalInfo_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "motto":
			out.Values[i] = ec._PersonalInfo_motto(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastLoginIp":
			out.Values[i] = ec._PersonalInfo_lastLoginIp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastLoginTime":
			out.Values[i] = ec._PersonalInfo_lastLoginTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginFailCount":
			out.Values[i] = ec._PersonalInfo_loginFailCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._PersonalInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._PersonalInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passwordSet":
			out.Values[i] = ec._PersonalInfo_passwordSet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priorityImplementors = []string{"Priority"}

func (ec *executionContext) _Priority(ctx context.Context, sel ast.SelectionSet, obj *vo.Priority) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, priorityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Priority")
		case "id":
			out.Values[i] = ec._Priority_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Priority_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Priority_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Priority_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Priority_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._Priority_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._Priority_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._Priority_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._Priority_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Priority_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Priority_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Priority_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Priority_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Priority_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Priority_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Priority_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Priority_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priorityListImplementors = []string{"PriorityList"}

func (ec *executionContext) _PriorityList(ctx context.Context, sel ast.SelectionSet, obj *vo.PriorityList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, priorityListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriorityList")
		case "total":
			out.Values[i] = ec._PriorityList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._PriorityList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var processStatusImplementors = []string{"ProcessStatus"}

func (ec *executionContext) _ProcessStatus(ctx context.Context, sel ast.SelectionSet, obj *vo.ProcessStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, processStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcessStatus")
		case "id":
			out.Values[i] = ec._ProcessStatus_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProcessStatus_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._ProcessStatus_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProcessStatus_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._ProcessStatus_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._ProcessStatus_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._ProcessStatus_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._ProcessStatus_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._ProcessStatus_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProcessStatus_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProcessStatus_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProcessStatus_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProcessStatus_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProcessStatus_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProcessStatus_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ProcessStatus_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._ProcessStatus_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var processStatusListImplementors = []string{"ProcessStatusList"}

func (ec *executionContext) _ProcessStatusList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProcessStatusList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, processStatusListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcessStatusList")
		case "total":
			out.Values[i] = ec._ProcessStatusList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProcessStatusList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectImplementors = []string{"Project"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *vo.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Project_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Project_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preCode":
			out.Values[i] = ec._Project_preCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._Project_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._Project_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityId":
			out.Values[i] = ec._Project_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._Project_planStartTime(ctx, field, obj)
		case "planEndTime":
			out.Values[i] = ec._Project_planEndTime(ctx, field, obj)
		case "publicStatus":
			out.Values[i] = ec._Project_publicStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceId":
			out.Values[i] = ec._Project_resourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFiling":
			out.Values[i] = ec._Project_isFiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Project_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Project_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Project_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Project_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Project_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Project_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Project_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Project_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Project_creatorInfo(ctx, field, obj)
		case "ownerInfo":
			out.Values[i] = ec._Project_ownerInfo(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._Project_memberInfo(ctx, field, obj)
		case "followerInfo":
			out.Values[i] = ec._Project_followerInfo(ctx, field, obj)
		case "resourcePath":
			out.Values[i] = ec._Project_resourcePath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceCompressedPath":
			out.Values[i] = ec._Project_resourceCompressedPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allIssues":
			out.Values[i] = ec._Project_allIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "finishIssues":
			out.Values[i] = ec._Project_finishIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overdueIssues":
			out.Values[i] = ec._Project_overdueIssues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._Project_allStatus(ctx, field, obj)
		case "projectTypeName":
			out.Values[i] = ec._Project_projectTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeLangCode":
			out.Values[i] = ec._Project_projectTypeLangCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSyncOutCalendar":
			out.Values[i] = ec._Project_isSyncOutCalendar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDayStatImplementors = []string{"ProjectDayStat"}

func (ec *executionContext) _ProjectDayStat(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDayStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectDayStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDayStat")
		case "id":
			out.Values[i] = ec._ProjectDayStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectDayStat_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._ProjectDayStat_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueCount":
			out.Values[i] = ec._ProjectDayStat_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._ProjectDayStat_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._ProjectDayStat_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueOverdueCount":
			out.Values[i] = ec._ProjectDayStat_issueOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._ProjectDayStat_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandCount":
			out.Values[i] = ec._ProjectDayStat_demandCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandWaitCount":
			out.Values[i] = ec._ProjectDayStat_demandWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandRunningCount":
			out.Values[i] = ec._ProjectDayStat_demandRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandOverdueCount":
			out.Values[i] = ec._ProjectDayStat_demandOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demandEndCount":
			out.Values[i] = ec._ProjectDayStat_demandEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._ProjectDayStat_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._ProjectDayStat_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._ProjectDayStat_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointOverdueCount":
			out.Values[i] = ec._ProjectDayStat_storyPointOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._ProjectDayStat_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskCount":
			out.Values[i] = ec._ProjectDayStat_taskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskWaitCount":
			out.Values[i] = ec._ProjectDayStat_taskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskRunningCount":
			out.Values[i] = ec._ProjectDayStat_taskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskOverdueCount":
			out.Values[i] = ec._ProjectDayStat_taskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskEndCount":
			out.Values[i] = ec._ProjectDayStat_taskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugCount":
			out.Values[i] = ec._ProjectDayStat_bugCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugWaitCount":
			out.Values[i] = ec._ProjectDayStat_bugWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugRunningCount":
			out.Values[i] = ec._ProjectDayStat_bugRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugOverdueCount":
			out.Values[i] = ec._ProjectDayStat_bugOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bugEndCount":
			out.Values[i] = ec._ProjectDayStat_bugEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskCount":
			out.Values[i] = ec._ProjectDayStat_testtaskCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskWaitCount":
			out.Values[i] = ec._ProjectDayStat_testtaskWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskRunningCount":
			out.Values[i] = ec._ProjectDayStat_testtaskRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskOverdueCount":
			out.Values[i] = ec._ProjectDayStat_testtaskOverdueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testtaskEndCount":
			out.Values[i] = ec._ProjectDayStat_testtaskEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ext":
			out.Values[i] = ec._ProjectDayStat_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statDate":
			out.Values[i] = ec._ProjectDayStat_statDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectDayStat_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectDayStat_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectDayStat_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectDayStat_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectDayStat_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ProjectDayStat_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._ProjectDayStat_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDayStatListImplementors = []string{"ProjectDayStatList"}

func (ec *executionContext) _ProjectDayStatList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDayStatList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectDayStatListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDayStatList")
		case "total":
			out.Values[i] = ec._ProjectDayStatList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectDayStatList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDetailImplementors = []string{"ProjectDetail"}

func (ec *executionContext) _ProjectDetail(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDetail")
		case "id":
			out.Values[i] = ec._ProjectDetail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectDetail_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._ProjectDetail_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notice":
			out.Values[i] = ec._ProjectDetail_notice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isEnableWorkHours":
			out.Values[i] = ec._ProjectDetail_isEnableWorkHours(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSyncOutCalendar":
			out.Values[i] = ec._ProjectDetail_isSyncOutCalendar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectDetail_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectDetail_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectDetail_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectDetail_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectDetailListImplementors = []string{"ProjectDetailList"}

func (ec *executionContext) _ProjectDetailList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectDetailList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectDetailListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectDetailList")
		case "total":
			out.Values[i] = ec._ProjectDetailList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectDetailList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectInfoImplementors = []string{"ProjectInfo"}

func (ec *executionContext) _ProjectInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectInfo")
		case "id":
			out.Values[i] = ec._ProjectInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectInfo_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._ProjectInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preCode":
			out.Values[i] = ec._ProjectInfo_preCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._ProjectInfo_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectTypeId":
			out.Values[i] = ec._ProjectInfo_projectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priorityId":
			out.Values[i] = ec._ProjectInfo_priorityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planStartTime":
			out.Values[i] = ec._ProjectInfo_planStartTime(ctx, field, obj)
		case "planEndTime":
			out.Values[i] = ec._ProjectInfo_planEndTime(ctx, field, obj)
		case "publicStatus":
			out.Values[i] = ec._ProjectInfo_publicStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceId":
			out.Values[i] = ec._ProjectInfo_resourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isFiling":
			out.Values[i] = ec._ProjectInfo_isFiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProjectInfo_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectInfo_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectInfo_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectInfo_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._ProjectInfo_creatorInfo(ctx, field, obj)
		case "ownerInfo":
			out.Values[i] = ec._ProjectInfo_ownerInfo(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._ProjectInfo_memberInfo(ctx, field, obj)
		case "followerInfo":
			out.Values[i] = ec._ProjectInfo_followerInfo(ctx, field, obj)
		case "resourcePath":
			out.Values[i] = ec._ProjectInfo_resourcePath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allStatus":
			out.Values[i] = ec._ProjectInfo_allStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectListImplementors = []string{"ProjectList"}

func (ec *executionContext) _ProjectList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectList")
		case "total":
			out.Values[i] = ec._ProjectList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectObjectTypeImplementors = []string{"ProjectObjectType"}

func (ec *executionContext) _ProjectObjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectObjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectObjectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectObjectType")
		case "id":
			out.Values[i] = ec._ProjectObjectType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectObjectType_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._ProjectObjectType_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preCode":
			out.Values[i] = ec._ProjectObjectType_preCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectObjectType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "objectType":
			out.Values[i] = ec._ProjectObjectType_objectType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._ProjectObjectType_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._ProjectObjectType_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._ProjectObjectType_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._ProjectObjectType_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProjectObjectType_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isReadonly":
			out.Values[i] = ec._ProjectObjectType_isReadonly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectObjectType_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectObjectType_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectObjectType_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectObjectType_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectObjectType_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ProjectObjectType_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._ProjectObjectType_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectObjectTypeListImplementors = []string{"ProjectObjectTypeList"}

func (ec *executionContext) _ProjectObjectTypeList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectObjectTypeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectObjectTypeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectObjectTypeList")
		case "total":
			out.Values[i] = ec._ProjectObjectTypeList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectObjectTypeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectObjectTypeRestInfoImplementors = []string{"ProjectObjectTypeRestInfo"}

func (ec *executionContext) _ProjectObjectTypeRestInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectObjectTypeRestInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectObjectTypeRestInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectObjectTypeRestInfo")
		case "id":
			out.Values[i] = ec._ProjectObjectTypeRestInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._ProjectObjectTypeRestInfo_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectObjectTypeRestInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "objectType":
			out.Values[i] = ec._ProjectObjectTypeRestInfo_objectType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectObjectTypeWithProjectListImplementors = []string{"ProjectObjectTypeWithProjectList"}

func (ec *executionContext) _ProjectObjectTypeWithProjectList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectObjectTypeWithProjectList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectObjectTypeWithProjectListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectObjectTypeWithProjectList")
		case "list":
			out.Values[i] = ec._ProjectObjectTypeWithProjectList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectStatisticsRespImplementors = []string{"ProjectStatisticsResp"}

func (ec *executionContext) _ProjectStatisticsResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectStatisticsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectStatisticsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectStatisticsResp")
		case "iterationTotal":
			out.Values[i] = ec._ProjectStatisticsResp_iterationTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskTotal":
			out.Values[i] = ec._ProjectStatisticsResp_taskTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberTotal":
			out.Values[i] = ec._ProjectStatisticsResp_memberTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectSupportObjectTypeListRespImplementors = []string{"ProjectSupportObjectTypeListResp"}

func (ec *executionContext) _ProjectSupportObjectTypeListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectSupportObjectTypeListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectSupportObjectTypeListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectSupportObjectTypeListResp")
		case "projectSupportList":
			out.Values[i] = ec._ProjectSupportObjectTypeListResp_projectSupportList(ctx, field, obj)
		case "iterationSupportList":
			out.Values[i] = ec._ProjectSupportObjectTypeListResp_iterationSupportList(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTypeImplementors = []string{"ProjectType"}

func (ec *executionContext) _ProjectType(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectType")
		case "id":
			out.Values[i] = ec._ProjectType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._ProjectType_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._ProjectType_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProjectType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sort":
			out.Values[i] = ec._ProjectType_sort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProcessId":
			out.Values[i] = ec._ProjectType_defaultProcessId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isReadonly":
			out.Values[i] = ec._ProjectType_isReadonly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ProjectType_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProjectType_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._ProjectType_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProjectType_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._ProjectType_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._ProjectType_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTypeListImplementors = []string{"ProjectTypeList"}

func (ec *executionContext) _ProjectTypeList(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectTypeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectTypeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTypeList")
		case "total":
			out.Values[i] = ec._ProjectTypeList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectTypeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectUserListRespImplementors = []string{"ProjectUserListResp"}

func (ec *executionContext) _ProjectUserListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectUserListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectUserListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectUserListResp")
		case "total":
			out.Values[i] = ec._ProjectUserListResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ProjectUserListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getBaseConfig":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBaseConfig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "personalInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personalInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userConfigInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userConfigInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "homeIssues":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_homeIssues(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueRestInfos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueRestInfos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "relatedIssueList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_relatedIssueList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueReport":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueReport(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueReportDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueReportDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueAndProjectCountStat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueAndProjectCountStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueStatusTypeStat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueStatusTypeStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueStatusTypeStatDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueStatusTypeStatDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueDailyPersonalWorkCompletionStat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueDailyPersonalWorkCompletionStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueAssignRank":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueAssignRank(ctx, field)
				return res
			})
		case "issueResources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueResources(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "trendList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trendList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectStatistics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectStatistics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectIssueRelatedStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectIssueRelatedStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterationStatusTypeStat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterationStatusTypeStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterationInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userIds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOssSignUrl":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOssSignUrl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOssPostPolicy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOssPostPolicy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getInviteCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInviteCode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getInviteInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInviteInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMQTTChannelKey":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMQTTChannelKey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectSupportObjectTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectSupportObjectTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "prioritys":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_prioritys(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "processStatuss":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_processStatuss(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projects":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iterationStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iterationStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectObjectTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectObjectTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectDayStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectDayStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueObjectTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueObjectTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "issueSources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issueSources(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectObjectTypesWithProject":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectObjectTypesWithProject(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "departments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "departmentMembers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departmentMembers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectTypes(ctx, field)
				return res
			})
		case "userOrganizationList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userOrganizationList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "tagList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tagList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "hotTagList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_hotTagList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "tagDefaultStyle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tagDefaultStyle(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "noticeList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_noticeList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "unreadNoticeCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_unreadNoticeCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "areaLinkageList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_areaLinkageList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "industryList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_industryList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "exportIssueTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exportIssueTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orgUserList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgUserList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionOperationList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_permissionOperationList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orgRoleList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgRoleList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "exportData":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exportData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectUserList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectUserList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectRoleList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectRoleList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orgProjectMember":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgProjectMember(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectResource":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectResource(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectFolder":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectFolder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "projectAttachment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectAttachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPersonalPermissionInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPersonalPermissionInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quitResultImplementors = []string{"QuitResult"}

func (ec *executionContext) _QuitResult(ctx context.Context, sel ast.SelectionSet, obj *vo.QuitResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, quitResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuitResult")
		case "isQuitted":
			out.Values[i] = ec._QuitResult_isQuitted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relationIssueImplementors = []string{"RelationIssue"}

func (ec *executionContext) _RelationIssue(ctx context.Context, sel ast.SelectionSet, obj *vo.RelationIssue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, relationIssueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelationIssue")
		case "id":
			out.Values[i] = ec._RelationIssue_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._RelationIssue_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relationTypeImplementors = []string{"RelationType"}

func (ec *executionContext) _RelationType(ctx context.Context, sel ast.SelectionSet, obj *vo.RelationType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, relationTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelationType")
		case "userId":
			out.Values[i] = ec._RelationType_userId(ctx, field, obj)
		case "relationType":
			out.Values[i] = ec._RelationType_relationType(ctx, field, obj)
		case "projectId":
			out.Values[i] = ec._RelationType_projectId(ctx, field, obj)
		case "outOrgUserId":
			out.Values[i] = ec._RelationType_outOrgUserId(ctx, field, obj)
		case "outUserId":
			out.Values[i] = ec._RelationType_outUserId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._RelationType_name(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._RelationType_avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceImplementors = []string{"Resource"}

func (ec *executionContext) _Resource(ctx context.Context, sel ast.SelectionSet, obj *vo.Resource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, resourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Resource")
		case "id":
			out.Values[i] = ec._Resource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Resource_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":
			out.Values[i] = ec._Resource_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Resource_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pathCompressed":
			out.Values[i] = ec._Resource_pathCompressed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Resource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Resource_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._Resource_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorName":
			out.Values[i] = ec._Resource_creatorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suffix":
			out.Values[i] = ec._Resource_suffix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "md5":
			out.Values[i] = ec._Resource_md5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileType":
			out.Values[i] = ec._Resource_fileType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Resource_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Resource_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Resource_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Resource_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._Resource_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._Resource_isDelete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceInfoImplementors = []string{"ResourceInfo"}

func (ec *executionContext) _ResourceInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.ResourceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, resourceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceInfo")
		case "url":
			out.Values[i] = ec._ResourceInfo_url(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ResourceInfo_name(ctx, field, obj)
		case "size":
			out.Values[i] = ec._ResourceInfo_size(ctx, field, obj)
		case "uploadTime":
			out.Values[i] = ec._ResourceInfo_uploadTime(ctx, field, obj)
		case "suffix":
			out.Values[i] = ec._ResourceInfo_suffix(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceListImplementors = []string{"ResourceList"}

func (ec *executionContext) _ResourceList(ctx context.Context, sel ast.SelectionSet, obj *vo.ResourceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, resourceListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceList")
		case "total":
			out.Values[i] = ec._ResourceList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._ResourceList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *vo.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Role_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._Role_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._Role_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isReadonly":
			out.Values[i] = ec._Role_isReadonly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isModifyPermission":
			out.Values[i] = ec._Role_isModifyPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._Role_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleGroupId":
			out.Values[i] = ec._Role_roleGroupId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Role_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Role_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Role_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updator":
			out.Values[i] = ec._Role_updator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._Role_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statCommonImplementors = []string{"StatCommon"}

func (ec *executionContext) _StatCommon(ctx context.Context, sel ast.SelectionSet, obj *vo.StatCommon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statCommonImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatCommon")
		case "name":
			out.Values[i] = ec._StatCommon_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._StatCommon_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statDataImplementors = []string{"StatData"}

func (ec *executionContext) _StatData(ctx context.Context, sel ast.SelectionSet, obj *vo.StatData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatData")
		case "issueCount":
			out.Values[i] = ec._StatData_issueCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueWaitCount":
			out.Values[i] = ec._StatData_issueWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueRunningCount":
			out.Values[i] = ec._StatData_issueRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issueEndCount":
			out.Values[i] = ec._StatData_issueEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointCount":
			out.Values[i] = ec._StatData_storyPointCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointWaitCount":
			out.Values[i] = ec._StatData_storyPointWaitCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointRunningCount":
			out.Values[i] = ec._StatData_storyPointRunningCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storyPointEndCount":
			out.Values[i] = ec._StatData_storyPointEndCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statExtRespImplementors = []string{"StatExtResp"}

func (ec *executionContext) _StatExtResp(ctx context.Context, sel ast.SelectionSet, obj *vo.StatExtResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statExtRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatExtResp")
		case "issue":
			out.Values[i] = ec._StatExtResp_issue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statIssueExtImplementors = []string{"StatIssueExt"}

func (ec *executionContext) _StatIssueExt(ctx context.Context, sel ast.SelectionSet, obj *vo.StatIssueExt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statIssueExtImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatIssueExt")
		case "data":
			out.Values[i] = ec._StatIssueExt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stypeListImplementors = []string{"StypeList"}

func (ec *executionContext) _StypeList(ctx context.Context, sel ast.SelectionSet, obj *vo.StypeList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, stypeListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StypeList")
		case "list":
			out.Values[i] = ec._StypeList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *vo.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Tag_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectId":
			out.Values[i] = ec._Tag_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namePinyin":
			out.Values[i] = ec._Tag_namePinyin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bgStyle":
			out.Values[i] = ec._Tag_bgStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._Tag_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usedNum":
			out.Values[i] = ec._Tag_usedNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Tag_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Tag_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagListImplementors = []string{"TagList"}

func (ec *executionContext) _TagList(ctx context.Context, sel ast.SelectionSet, obj *vo.TagList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, tagListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagList")
		case "total":
			out.Values[i] = ec._TagList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._TagList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendImplementors = []string{"Trend"}

func (ec *executionContext) _Trend(ctx context.Context, sel ast.SelectionSet, obj *vo.Trend) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, trendImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Trend")
		case "id":
			out.Values[i] = ec._Trend_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._Trend_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module1":
			out.Values[i] = ec._Trend_module1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module2Id":
			out.Values[i] = ec._Trend_module2Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module2":
			out.Values[i] = ec._Trend_module2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module3Id":
			out.Values[i] = ec._Trend_module3Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module3":
			out.Values[i] = ec._Trend_module3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operCode":
			out.Values[i] = ec._Trend_operCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjId":
			out.Values[i] = ec._Trend_operObjId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjType":
			out.Values[i] = ec._Trend_operObjType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjProperty":
			out.Values[i] = ec._Trend_operObjProperty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationObjId":
			out.Values[i] = ec._Trend_relationObjId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationObjType":
			out.Values[i] = ec._Trend_relationObjType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationType":
			out.Values[i] = ec._Trend_relationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newValue":
			out.Values[i] = ec._Trend_newValue(ctx, field, obj)
		case "oldValue":
			out.Values[i] = ec._Trend_oldValue(ctx, field, obj)
		case "ext":
			out.Values[i] = ec._Trend_ext(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":
			out.Values[i] = ec._Trend_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._Trend_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operObjName":
			out.Values[i] = ec._Trend_operObjName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorInfo":
			out.Values[i] = ec._Trend_creatorInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._Trend_comment(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._Trend_extension(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendExtensionImplementors = []string{"TrendExtension"}

func (ec *executionContext) _TrendExtension(ctx context.Context, sel ast.SelectionSet, obj *vo.TrendExtension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, trendExtensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendExtension")
		case "issueType":
			out.Values[i] = ec._TrendExtension_issueType(ctx, field, obj)
		case "ObjName":
			out.Values[i] = ec._TrendExtension_ObjName(ctx, field, obj)
		case "changeList":
			out.Values[i] = ec._TrendExtension_changeList(ctx, field, obj)
		case "memberInfo":
			out.Values[i] = ec._TrendExtension_memberInfo(ctx, field, obj)
		case "relationIssue":
			out.Values[i] = ec._TrendExtension_relationIssue(ctx, field, obj)
		case "resourceInfo":
			out.Values[i] = ec._TrendExtension_resourceInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendsListImplementors = []string{"TrendsList"}

func (ec *executionContext) _TrendsList(ctx context.Context, sel ast.SelectionSet, obj *vo.TrendsList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, trendsListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendsList")
		case "total":
			out.Values[i] = ec._TrendsList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "page":
			out.Values[i] = ec._TrendsList_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._TrendsList_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastTrendId":
			out.Values[i] = ec._TrendsList_lastTrendId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._TrendsList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateIssueRespImplementors = []string{"UpdateIssueResp"}

func (ec *executionContext) _UpdateIssueResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateIssueResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, updateIssueRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIssueResp")
		case "id":
			out.Values[i] = ec._UpdateIssueResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectFolderRespImplementors = []string{"UpdateProjectFolderResp"}

func (ec *executionContext) _UpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateProjectFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, updateProjectFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectFolderResp")
		case "folderId":
			out.Values[i] = ec._UpdateProjectFolderResp_folderId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectResourceFolderRespImplementors = []string{"UpdateProjectResourceFolderResp"}

func (ec *executionContext) _UpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, updateProjectResourceFolderRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectResourceFolderResp")
		case "resourceIds":
			out.Values[i] = ec._UpdateProjectResourceFolderResp_resourceIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserConfigRespImplementors = []string{"UpdateUserConfigResp"}

func (ec *executionContext) _UpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UpdateUserConfigResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, updateUserConfigRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserConfigResp")
		case "id":
			out.Values[i] = ec._UpdateUserConfigResp_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userConfigImplementors = []string{"UserConfig"}

func (ec *executionContext) _UserConfig(ctx context.Context, sel ast.SelectionSet, obj *vo.UserConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConfig")
		case "id":
			out.Values[i] = ec._UserConfig_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dailyReportMessageStatus":
			out.Values[i] = ec._UserConfig_dailyReportMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ownerRangeStatus":
			out.Values[i] = ec._UserConfig_ownerRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participantRangeStatus":
			out.Values[i] = ec._UserConfig_participantRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attentionRangeStatus":
			out.Values[i] = ec._UserConfig_attentionRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRangeStatus":
			out.Values[i] = ec._UserConfig_createRangeStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remindMessageStatus":
			out.Values[i] = ec._UserConfig_remindMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentAtMessageStatus":
			out.Values[i] = ec._UserConfig_commentAtMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifyMessageStatus":
			out.Values[i] = ec._UserConfig_modifyMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "relationMessageStatus":
			out.Values[i] = ec._UserConfig_relationMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dailyProjectReportMessageStatus":
			out.Values[i] = ec._UserConfig_dailyProjectReportMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProjectId":
			out.Values[i] = ec._UserConfig_defaultProjectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultProjectObjectTypeId":
			out.Values[i] = ec._UserConfig_defaultProjectObjectTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcNoticeOpenStatus":
			out.Values[i] = ec._UserConfig_pcNoticeOpenStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcIssueRemindMessageStatus":
			out.Values[i] = ec._UserConfig_pcIssueRemindMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcOrgMessageStatus":
			out.Values[i] = ec._UserConfig_pcOrgMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcProjectMessageStatus":
			out.Values[i] = ec._UserConfig_pcProjectMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pcCommentAtMessageStatus":
			out.Values[i] = ec._UserConfig_pcCommentAtMessageStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userIdInfoImplementors = []string{"UserIdInfo"}

func (ec *executionContext) _UserIdInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.UserIDInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userIdInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserIdInfo")
		case "userId":
			out.Values[i] = ec._UserIdInfo_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserIdInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserIdInfo_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emplId":
			out.Values[i] = ec._UserIdInfo_emplId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unionId":
			out.Values[i] = ec._UserIdInfo_unionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeleted":
			out.Values[i] = ec._UserIdInfo_isDeleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDisabled":
			out.Values[i] = ec._UserIdInfo_isDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLoginRespImplementors = []string{"UserLoginResp"}

func (ec *executionContext) _UserLoginResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserLoginResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userLoginRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLoginResp")
		case "token":
			out.Values[i] = ec._UserLoginResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":
			out.Values[i] = ec._UserLoginResp_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgId":
			out.Values[i] = ec._UserLoginResp_orgId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgName":
			out.Values[i] = ec._UserLoginResp_orgName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orgCode":
			out.Values[i] = ec._UserLoginResp_orgCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserLoginResp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserLoginResp_avatar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "needInitOrg":
			out.Values[i] = ec._UserLoginResp_needInitOrg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationImplementors = []string{"UserOrganization"}

func (ec *executionContext) _UserOrganization(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganization")
		case "id":
			out.Values[i] = ec._UserOrganization_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserOrganization_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._UserOrganization_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "webSite":
			out.Values[i] = ec._UserOrganization_webSite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industryId":
			out.Values[i] = ec._UserOrganization_industryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scale":
			out.Values[i] = ec._UserOrganization_scale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourcePlatform":
			out.Values[i] = ec._UserOrganization_sourcePlatform(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceChannel":
			out.Values[i] = ec._UserOrganization_sourceChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryId":
			out.Values[i] = ec._UserOrganization_countryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provinceId":
			out.Values[i] = ec._UserOrganization_provinceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cityId":
			out.Values[i] = ec._UserOrganization_cityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._UserOrganization_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logoUrl":
			out.Values[i] = ec._UserOrganization_logoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resorceId":
			out.Values[i] = ec._UserOrganization_resorceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._UserOrganization_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "IsAuthenticated":
			out.Values[i] = ec._UserOrganization_IsAuthenticated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._UserOrganization_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isShow":
			out.Values[i] = ec._UserOrganization_isShow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDelete":
			out.Values[i] = ec._UserOrganization_isDelete(ctx, field, obj)
		case "OrgIsEnabled":
			out.Values[i] = ec._UserOrganization_OrgIsEnabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationListImplementors = []string{"UserOrganizationList"}

func (ec *executionContext) _UserOrganizationList(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganizationList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userOrganizationListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganizationList")
		case "total":
			out.Values[i] = ec._UserOrganizationList_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._UserOrganizationList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationListRespImplementors = []string{"UserOrganizationListResp"}

func (ec *executionContext) _UserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserOrganizationListResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userOrganizationListRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganizationListResp")
		case "list":
			out.Values[i] = ec._UserOrganizationListResp_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRegisterRespImplementors = []string{"UserRegisterResp"}

func (ec *executionContext) _UserRegisterResp(ctx context.Context, sel ast.SelectionSet, obj *vo.UserRegisterResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userRegisterRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRegisterResp")
		case "token":
			out.Values[i] = ec._UserRegisterResp_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRoleInfoImplementors = []string{"UserRoleInfo"}

func (ec *executionContext) _UserRoleInfo(ctx context.Context, sel ast.SelectionSet, obj *vo.UserRoleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userRoleInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRoleInfo")
		case "id":
			out.Values[i] = ec._UserRoleInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserRoleInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "langCode":
			out.Values[i] = ec._UserRoleInfo_langCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voidImplementors = []string{"Void"}

func (ec *executionContext) _Void(ctx context.Context, sel ast.SelectionSet, obj *vo.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, voidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Void")
		case "id":
			out.Values[i] = ec._Void_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectUserImplementors = []string{"projectUser"}

func (ec *executionContext) _projectUser(ctx context.Context, sel ast.SelectionSet, obj *vo.ProjectUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, projectUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("projectUser")
		case "creator":
			out.Values[i] = ec._projectUser_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._projectUser_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userInfo":
			out.Values[i] = ec._projectUser_userInfo(ctx, field, obj)
		case "creatorInfo":
			out.Values[i] = ec._projectUser_creatorInfo(ctx, field, obj)
		case "userRole":
			out.Values[i] = ec._projectUser_userRole(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return graphql.UnmarshalAny(v)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNAppInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx context.Context, sel ast.SelectionSet, v vo.AppInfo) graphql.Marshaler {
	return ec._AppInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx context.Context, sel ast.SelectionSet, v *vo.AppInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAreaLinkageListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListReq(ctx context.Context, v interface{}) (vo.AreaLinkageListReq, error) {
	return ec.unmarshalInputAreaLinkageListReq(ctx, v)
}

func (ec *executionContext) marshalNAreaLinkageListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, v vo.AreaLinkageListResp) graphql.Marshaler {
	return ec._AreaLinkageListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNAreaLinkageListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageListResp(ctx context.Context, sel ast.SelectionSet, v *vo.AreaLinkageListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AreaLinkageListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNAreaLinkageResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx context.Context, sel ast.SelectionSet, v vo.AreaLinkageResp) graphql.Marshaler {
	return ec._AreaLinkageResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNAreaLinkageResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx context.Context, sel ast.SelectionSet, v *vo.AreaLinkageResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AreaLinkageResp(ctx, sel, v)
}

func (ec *executionContext) marshalNAttachment2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v vo.Attachment) graphql.Marshaler {
	return ec._Attachment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachment2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *vo.Attachment) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) marshalNAttachmentList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx context.Context, sel ast.SelectionSet, v vo.AttachmentList) graphql.Marshaler {
	return ec._AttachmentList(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachmentList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachmentList(ctx context.Context, sel ast.SelectionSet, v *vo.AttachmentList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AttachmentList(ctx, sel, v)
}

func (ec *executionContext) marshalNBasicConfigResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBasicConfigResp(ctx context.Context, sel ast.SelectionSet, v vo.BasicConfigResp) graphql.Marshaler {
	return ec._BasicConfigResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNBasicConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBasicConfigResp(ctx context.Context, sel ast.SelectionSet, v *vo.BasicConfigResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BasicConfigResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBindLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBindLoginNameReq(ctx context.Context, v interface{}) (vo.BindLoginNameReq, error) {
	return ec.unmarshalInputBindLoginNameReq(ctx, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBuildInfoDefine2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBuildInfoDefine(ctx context.Context, sel ast.SelectionSet, v vo.BuildInfoDefine) graphql.Marshaler {
	return ec._BuildInfoDefine(ctx, sel, &v)
}

func (ec *executionContext) marshalNBuildInfoDefine2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐBuildInfoDefine(ctx context.Context, sel ast.SelectionSet, v *vo.BuildInfoDefine) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BuildInfoDefine(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCheckLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCheckLoginNameReq(ctx context.Context, v interface{}) (vo.CheckLoginNameReq, error) {
	return ec.unmarshalInputCheckLoginNameReq(ctx, v)
}

func (ec *executionContext) unmarshalNConvertCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertCodeReq(ctx context.Context, v interface{}) (vo.ConvertCodeReq, error) {
	return ec.unmarshalInputConvertCodeReq(ctx, v)
}

func (ec *executionContext) marshalNConvertCodeResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertCodeResp(ctx context.Context, sel ast.SelectionSet, v vo.ConvertCodeResp) graphql.Marshaler {
	return ec._ConvertCodeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNConvertCodeResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐConvertCodeResp(ctx context.Context, sel ast.SelectionSet, v *vo.ConvertCodeResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConvertCodeResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateIssueCommentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueCommentReq(ctx context.Context, v interface{}) (vo.CreateIssueCommentReq, error) {
	return ec.unmarshalInputCreateIssueCommentReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueObjectTypeReq(ctx context.Context, v interface{}) (vo.CreateIssueObjectTypeReq, error) {
	return ec.unmarshalInputCreateIssueObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueReq(ctx context.Context, v interface{}) (vo.CreateIssueReq, error) {
	return ec.unmarshalInputCreateIssueReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIssueResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueResourceReq(ctx context.Context, v interface{}) (vo.CreateIssueResourceReq, error) {
	return ec.unmarshalInputCreateIssueResourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIssueSourceReq(ctx context.Context, v interface{}) (vo.CreateIssueSourceReq, error) {
	return ec.unmarshalInputCreateIssueSourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateIterationReq(ctx context.Context, v interface{}) (vo.CreateIterationReq, error) {
	return ec.unmarshalInputCreateIterationReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateOrgReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateOrgReq(ctx context.Context, v interface{}) (vo.CreateOrgReq, error) {
	return ec.unmarshalInputCreateOrgReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreatePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreatePriorityReq(ctx context.Context, v interface{}) (vo.CreatePriorityReq, error) {
	return ec.unmarshalInputCreatePriorityReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProcessStatusReq(ctx context.Context, v interface{}) (vo.CreateProcessStatusReq, error) {
	return ec.unmarshalInputCreateProcessStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectDetailReq(ctx context.Context, v interface{}) (vo.CreateProjectDetailReq, error) {
	return ec.unmarshalInputCreateProjectDetailReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectFolderReq(ctx context.Context, v interface{}) (vo.CreateProjectFolderReq, error) {
	return ec.unmarshalInputCreateProjectFolderReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectObjectTypeReq(ctx context.Context, v interface{}) (vo.CreateProjectObjectTypeReq, error) {
	return ec.unmarshalInputCreateProjectObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProjectReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectReq(ctx context.Context, v interface{}) (vo.CreateProjectReq, error) {
	return ec.unmarshalInputCreateProjectReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateProjectResourceReq(ctx context.Context, v interface{}) (vo.CreateProjectResourceReq, error) {
	return ec.unmarshalInputCreateProjectResourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateRoleReq(ctx context.Context, v interface{}) (vo.CreateRoleReq, error) {
	return ec.unmarshalInputCreateRoleReq(ctx, v)
}

func (ec *executionContext) unmarshalNCreateTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐCreateTagReq(ctx context.Context, v interface{}) (vo.CreateTagReq, error) {
	return ec.unmarshalInputCreateTagReq(ctx, v)
}

func (ec *executionContext) unmarshalNDelRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDelRoleReq(ctx context.Context, v interface{}) (vo.DelRoleReq, error) {
	return ec.unmarshalInputDelRoleReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueObjectTypeReq(ctx context.Context, v interface{}) (vo.DeleteIssueObjectTypeReq, error) {
	return ec.unmarshalInputDeleteIssueObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueReq(ctx context.Context, v interface{}) (vo.DeleteIssueReq, error) {
	return ec.unmarshalInputDeleteIssueReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteIssueResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueResourceReq(ctx context.Context, v interface{}) (vo.DeleteIssueResourceReq, error) {
	return ec.unmarshalInputDeleteIssueResourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIssueSourceReq(ctx context.Context, v interface{}) (vo.DeleteIssueSourceReq, error) {
	return ec.unmarshalInputDeleteIssueSourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteIterationReq(ctx context.Context, v interface{}) (vo.DeleteIterationReq, error) {
	return ec.unmarshalInputDeleteIterationReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeletePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeletePriorityReq(ctx context.Context, v interface{}) (vo.DeletePriorityReq, error) {
	return ec.unmarshalInputDeletePriorityReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProcessStatusReq(ctx context.Context, v interface{}) (vo.DeleteProcessStatusReq, error) {
	return ec.unmarshalInputDeleteProcessStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteProjectAttachmentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentReq(ctx context.Context, v interface{}) (vo.DeleteProjectAttachmentReq, error) {
	return ec.unmarshalInputDeleteProjectAttachmentReq(ctx, v)
}

func (ec *executionContext) marshalNDeleteProjectAttachmentResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	return ec._DeleteProjectAttachmentResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectAttachmentResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectAttachmentResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectAttachmentResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectAttachmentResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectDetailReq(ctx context.Context, v interface{}) (vo.DeleteProjectDetailReq, error) {
	return ec.unmarshalInputDeleteProjectDetailReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderReq(ctx context.Context, v interface{}) (vo.DeleteProjectFolderReq, error) {
	return ec.unmarshalInputDeleteProjectFolderReq(ctx, v)
}

func (ec *executionContext) marshalNDeleteProjectFolderResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectFolderResp) graphql.Marshaler {
	return ec._DeleteProjectFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectFolderResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectObjectTypeReq(ctx context.Context, v interface{}) (vo.DeleteProjectObjectTypeReq, error) {
	return ec.unmarshalInputDeleteProjectObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceReq(ctx context.Context, v interface{}) (vo.DeleteProjectResourceReq, error) {
	return ec.unmarshalInputDeleteProjectResourceReq(ctx, v)
}

func (ec *executionContext) marshalNDeleteProjectResourceResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, v vo.DeleteProjectResourceResp) graphql.Marshaler {
	return ec._DeleteProjectResourceResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProjectResourceResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteProjectResourceResp(ctx context.Context, sel ast.SelectionSet, v *vo.DeleteProjectResourceResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProjectResourceResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDeleteTagReq(ctx context.Context, v interface{}) (vo.DeleteTagReq, error) {
	return ec.unmarshalInputDeleteTagReq(ctx, v)
}

func (ec *executionContext) marshalNDepartment2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx context.Context, sel ast.SelectionSet, v vo.Department) graphql.Marshaler {
	return ec._Department(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartment2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *vo.Department) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx context.Context, sel ast.SelectionSet, v vo.DepartmentList) graphql.Marshaler {
	return ec._DepartmentList(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentList(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentList(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentMemberInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, v vo.DepartmentMemberInfo) graphql.Marshaler {
	return ec._DepartmentMemberInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentMemberInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.DepartmentMemberInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentMemberInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDepartmentMemberInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberInfo(ctx context.Context, sel ast.SelectionSet, v *vo.DepartmentMemberInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentMemberInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartmentMemberListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentMemberListReq(ctx context.Context, v interface{}) (vo.DepartmentMemberListReq, error) {
	return ec.unmarshalInputDepartmentMemberListReq(ctx, v)
}

func (ec *executionContext) unmarshalNEveryPermission2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx context.Context, v interface{}) (vo.EveryPermission, error) {
	return ec.unmarshalInputEveryPermission(ctx, v)
}

func (ec *executionContext) unmarshalNEveryPermission2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx context.Context, v interface{}) (*vo.EveryPermission, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNEveryPermission2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNExportIssueTemplateResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, v vo.ExportIssueTemplateResp) graphql.Marshaler {
	return ec._ExportIssueTemplateResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNExportIssueTemplateResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐExportIssueTemplateResp(ctx context.Context, sel ast.SelectionSet, v *vo.ExportIssueTemplateResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExportIssueTemplateResp(ctx, sel, v)
}

func (ec *executionContext) marshalNFolder2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx context.Context, sel ast.SelectionSet, v vo.Folder) graphql.Marshaler {
	return ec._Folder(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolder2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx context.Context, sel ast.SelectionSet, v []*vo.Folder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolder2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFolder2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolder(ctx context.Context, sel ast.SelectionSet, v *vo.Folder) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) marshalNFolderList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx context.Context, sel ast.SelectionSet, v vo.FolderList) graphql.Marshaler {
	return ec._FolderList(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolderList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐFolderList(ctx context.Context, sel ast.SelectionSet, v *vo.FolderList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FolderList(ctx, sel, v)
}

func (ec *executionContext) marshalNGetInviteCodeResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, v vo.GetInviteCodeResp) graphql.Marshaler {
	return ec._GetInviteCodeResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetInviteCodeResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetInviteCodeResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetInviteCodeResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetInviteInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoReq(ctx context.Context, v interface{}) (vo.GetInviteInfoReq, error) {
	return ec.unmarshalInputGetInviteInfoReq(ctx, v)
}

func (ec *executionContext) marshalNGetInviteInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.GetInviteInfoResp) graphql.Marshaler {
	return ec._GetInviteInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetInviteInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetInviteInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetInviteInfoResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetMQTTChannelKeyReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyReq(ctx context.Context, v interface{}) (vo.GetMQTTChannelKeyReq, error) {
	return ec.unmarshalInputGetMQTTChannelKeyReq(ctx, v)
}

func (ec *executionContext) marshalNGetMQTTChannelKeyResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, v vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	return ec._GetMQTTChannelKeyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetMQTTChannelKeyResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetMQTTChannelKeyResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetMQTTChannelKeyResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetMQTTChannelKeyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetPersonalPermissionInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	return ec._GetPersonalPermissionInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetPersonalPermissionInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetPersonalPermissionInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.GetPersonalPermissionInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetPersonalPermissionInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueInfo) graphql.Marshaler {
	return ec._HomeIssueInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueInfoResp) graphql.Marshaler {
	return ec._HomeIssueInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueOwnerInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueOwnerInfo) graphql.Marshaler {
	return ec._HomeIssueOwnerInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueOwnerInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueOwnerInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueOwnerInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueOwnerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssuePriorityInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssuePriorityInfo) graphql.Marshaler {
	return ec._HomeIssuePriorityInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssuePriorityInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssuePriorityInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssuePriorityInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssuePriorityInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueProjectInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueProjectInfo) graphql.Marshaler {
	return ec._HomeIssueProjectInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueProjectInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueProjectInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueProjectInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueStatusInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueStatusInfo) graphql.Marshaler {
	return ec._HomeIssueStatusInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueStatusInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueStatusInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueStatusInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNHomeIssueTagInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, v vo.HomeIssueTagInfo) graphql.Marshaler {
	return ec._HomeIssueTagInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNHomeIssueTagInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, v *vo.HomeIssueTagInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HomeIssueTagInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImportIssuesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐImportIssuesReq(ctx context.Context, v interface{}) (vo.ImportIssuesReq, error) {
	return ec.unmarshalInputImportIssuesReq(ctx, v)
}

func (ec *executionContext) marshalNIndustryListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx context.Context, sel ast.SelectionSet, v vo.IndustryListResp) graphql.Marshaler {
	return ec._IndustryListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndustryListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryListResp(ctx context.Context, sel ast.SelectionSet, v *vo.IndustryListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndustryListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIndustryResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx context.Context, sel ast.SelectionSet, v vo.IndustryResp) graphql.Marshaler {
	return ec._IndustryResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndustryResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx context.Context, sel ast.SelectionSet, v *vo.IndustryResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndustryResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642ᚕint64(ctx context.Context, v interface{}) ([]int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt642ᚕint64(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt642int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNIssue2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v vo.Issue) graphql.Marshaler {
	return ec._Issue(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssue2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v []*vo.Issue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v *vo.Issue) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueAndProjectCountStatResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAndProjectCountStatResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueAndProjectCountStatResp) graphql.Marshaler {
	return ec._IssueAndProjectCountStatResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueAndProjectCountStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAndProjectCountStatResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueAndProjectCountStatResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueAndProjectCountStatResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueAssignRankInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueAssignRankInfo) graphql.Marshaler {
	return ec._IssueAssignRankInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueAssignRankInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueAssignRankInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueAssignRankInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIssueAssignRankReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankReq(ctx context.Context, v interface{}) (vo.IssueAssignRankReq, error) {
	return ec.unmarshalInputIssueAssignRankReq(ctx, v)
}

func (ec *executionContext) marshalNIssueDailyPersonalWorkCompletionStatData2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatData(ctx context.Context, sel ast.SelectionSet, v vo.IssueDailyPersonalWorkCompletionStatData) graphql.Marshaler {
	return ec._IssueDailyPersonalWorkCompletionStatData(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueDailyPersonalWorkCompletionStatData2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatData(ctx context.Context, sel ast.SelectionSet, v *vo.IssueDailyPersonalWorkCompletionStatData) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueDailyPersonalWorkCompletionStatData(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueDailyPersonalWorkCompletionStatResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueDailyPersonalWorkCompletionStatResp) graphql.Marshaler {
	return ec._IssueDailyPersonalWorkCompletionStatResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueDailyPersonalWorkCompletionStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueDailyPersonalWorkCompletionStatResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueDailyPersonalWorkCompletionStatResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueInfo) graphql.Marshaler {
	return ec._IssueInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueObjectType2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectType(ctx context.Context, sel ast.SelectionSet, v vo.IssueObjectType) graphql.Marshaler {
	return ec._IssueObjectType(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectType(ctx context.Context, sel ast.SelectionSet, v *vo.IssueObjectType) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueObjectType(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueObjectTypeList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeList(ctx context.Context, sel ast.SelectionSet, v vo.IssueObjectTypeList) graphql.Marshaler {
	return ec._IssueObjectTypeList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueObjectTypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeList(ctx context.Context, sel ast.SelectionSet, v *vo.IssueObjectTypeList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueObjectTypeList(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueReportResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueReportResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueReportResp) graphql.Marshaler {
	return ec._IssueReportResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueReportResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueReportResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueReportResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueReportResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueRestInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueRestInfo) graphql.Marshaler {
	return ec._IssueRestInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueRestInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueRestInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueRestInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueRestInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueRestInfoResp) graphql.Marshaler {
	return ec._IssueRestInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueRestInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueRestInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueRestInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueSource2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSource(ctx context.Context, sel ast.SelectionSet, v vo.IssueSource) graphql.Marshaler {
	return ec._IssueSource(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueSource2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSource(ctx context.Context, sel ast.SelectionSet, v *vo.IssueSource) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueSource(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueSourceList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceList(ctx context.Context, sel ast.SelectionSet, v vo.IssueSourceList) graphql.Marshaler {
	return ec._IssueSourceList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueSourceList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceList(ctx context.Context, sel ast.SelectionSet, v *vo.IssueSourceList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueSourceList(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueStatByObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueStatByObjectType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIssueStatByObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIssueStatusTypeStatDetailResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	return ec._IssueStatusTypeStatDetailResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatDetailResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatDetailResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatusTypeStatDetailResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueStatusTypeStatDetailResp(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v vo.IssueStatusTypeStatResp) graphql.Marshaler {
	return ec._IssueStatusTypeStatResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssueStatusTypeStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatusTypeStatResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IssueStatusTypeStatResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIssueTagReqInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx context.Context, v interface{}) (vo.IssueTagReqInfo, error) {
	return ec.unmarshalInputIssueTagReqInfo(ctx, v)
}

func (ec *executionContext) unmarshalNIssueTagReqInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx context.Context, v interface{}) (*vo.IssueTagReqInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNIssueTagReqInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNIteration2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx context.Context, sel ast.SelectionSet, v vo.Iteration) graphql.Marshaler {
	return ec._Iteration(ctx, sel, &v)
}

func (ec *executionContext) marshalNIteration2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx context.Context, sel ast.SelectionSet, v *vo.Iteration) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Iteration(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIterationInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoReq(ctx context.Context, v interface{}) (vo.IterationInfoReq, error) {
	return ec.unmarshalInputIterationInfoReq(ctx, v)
}

func (ec *executionContext) marshalNIterationInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.IterationInfoResp) graphql.Marshaler {
	return ec._IterationInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.IterationInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationInfoResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIterationIssueRealtionReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationIssueRealtionReq(ctx context.Context, v interface{}) (vo.IterationIssueRealtionReq, error) {
	return ec.unmarshalInputIterationIssueRealtionReq(ctx, v)
}

func (ec *executionContext) marshalNIterationList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx context.Context, sel ast.SelectionSet, v vo.IterationList) graphql.Marshaler {
	return ec._IterationList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationList(ctx context.Context, sel ast.SelectionSet, v *vo.IterationList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationList(ctx, sel, v)
}

func (ec *executionContext) marshalNIterationStat2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx context.Context, sel ast.SelectionSet, v vo.IterationStat) graphql.Marshaler {
	return ec._IterationStat(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationStat2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStat) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationStat(ctx, sel, v)
}

func (ec *executionContext) marshalNIterationStatList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx context.Context, sel ast.SelectionSet, v vo.IterationStatList) graphql.Marshaler {
	return ec._IterationStatList(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationStatList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatList(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStatList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationStatList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIterationStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatReq(ctx context.Context, v interface{}) (vo.IterationStatReq, error) {
	return ec.unmarshalInputIterationStatReq(ctx, v)
}

func (ec *executionContext) marshalNIterationStatusTypeStatResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v vo.IterationStatusTypeStatResp) graphql.Marshaler {
	return ec._IterationStatusTypeStatResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIterationStatusTypeStatResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatResp(ctx context.Context, sel ast.SelectionSet, v *vo.IterationStatusTypeStatResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IterationStatusTypeStatResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return graphql.UnmarshalMap(v)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNNotice2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNotice(ctx context.Context, sel ast.SelectionSet, v vo.Notice) graphql.Marshaler {
	return ec._Notice(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotice2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNotice(ctx context.Context, sel ast.SelectionSet, v *vo.Notice) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Notice(ctx, sel, v)
}

func (ec *executionContext) marshalNNoticeCountResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeCountResp(ctx context.Context, sel ast.SelectionSet, v vo.NoticeCountResp) graphql.Marshaler {
	return ec._NoticeCountResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNNoticeCountResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeCountResp(ctx context.Context, sel ast.SelectionSet, v *vo.NoticeCountResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NoticeCountResp(ctx, sel, v)
}

func (ec *executionContext) marshalNNoticeList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeList(ctx context.Context, sel ast.SelectionSet, v vo.NoticeList) graphql.Marshaler {
	return ec._NoticeList(ctx, sel, &v)
}

func (ec *executionContext) marshalNNoticeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeList(ctx context.Context, sel ast.SelectionSet, v *vo.NoticeList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NoticeList(ctx, sel, v)
}

func (ec *executionContext) marshalNOperateProjectResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOperateProjectResp(ctx context.Context, sel ast.SelectionSet, v vo.OperateProjectResp) graphql.Marshaler {
	return ec._OperateProjectResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperateProjectResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOperateProjectResp(ctx context.Context, sel ast.SelectionSet, v *vo.OperateProjectResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OperateProjectResp(ctx, sel, v)
}

func (ec *executionContext) marshalNOrgProjectMemberInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	return ec._OrgProjectMemberInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgProjectMemberInfoResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, v []*vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrgProjectMemberInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrgProjectMemberInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrgProjectMemberInfoResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrgProjectMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberReq(ctx context.Context, v interface{}) (vo.OrgProjectMemberReq, error) {
	return ec.unmarshalInputOrgProjectMemberReq(ctx, v)
}

func (ec *executionContext) marshalNOrgProjectMemberResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberResp(ctx context.Context, sel ast.SelectionSet, v vo.OrgProjectMemberResp) graphql.Marshaler {
	return ec._OrgProjectMemberResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgProjectMemberResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberResp(ctx context.Context, sel ast.SelectionSet, v *vo.OrgProjectMemberResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrgProjectMemberResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrgUserListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgUserListReq(ctx context.Context, v interface{}) (vo.OrgUserListReq, error) {
	return ec.unmarshalInputOrgUserListReq(ctx, v)
}

func (ec *executionContext) unmarshalNOrganizationInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoReq(ctx context.Context, v interface{}) (vo.OrganizationInfoReq, error) {
	return ec.unmarshalInputOrganizationInfoReq(ctx, v)
}

func (ec *executionContext) marshalNOrganizationInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.OrganizationInfoResp) graphql.Marshaler {
	return ec._OrganizationInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.OrganizationInfoResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationUser2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx context.Context, sel ast.SelectionSet, v vo.OrganizationUser) graphql.Marshaler {
	return ec._OrganizationUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationUser2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx context.Context, sel ast.SelectionSet, v *vo.OrganizationUser) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOssApplySignUrlReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssApplySignURLReq(ctx context.Context, v interface{}) (vo.OssApplySignURLReq, error) {
	return ec.unmarshalInputOssApplySignUrlReq(ctx, v)
}

func (ec *executionContext) marshalNOssApplySignUrlResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssApplySignURLResp(ctx context.Context, sel ast.SelectionSet, v vo.OssApplySignURLResp) graphql.Marshaler {
	return ec._OssApplySignUrlResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOssApplySignUrlResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssApplySignURLResp(ctx context.Context, sel ast.SelectionSet, v *vo.OssApplySignURLResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OssApplySignUrlResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOssPostPolicyReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyReq(ctx context.Context, v interface{}) (vo.OssPostPolicyReq, error) {
	return ec.unmarshalInputOssPostPolicyReq(ctx, v)
}

func (ec *executionContext) marshalNOssPostPolicyResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, v vo.OssPostPolicyResp) graphql.Marshaler {
	return ec._OssPostPolicyResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNOssPostPolicyResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOssPostPolicyResp(ctx context.Context, sel ast.SelectionSet, v *vo.OssPostPolicyResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OssPostPolicyResp(ctx, sel, v)
}

func (ec *executionContext) marshalNPermission2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx context.Context, sel ast.SelectionSet, v vo.Permission) graphql.Marshaler {
	return ec._Permission(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermission2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx context.Context, sel ast.SelectionSet, v *vo.Permission) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) marshalNPermissionOperation2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx context.Context, sel ast.SelectionSet, v vo.PermissionOperation) graphql.Marshaler {
	return ec._PermissionOperation(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermissionOperation2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx context.Context, sel ast.SelectionSet, v *vo.PermissionOperation) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PermissionOperation(ctx, sel, v)
}

func (ec *executionContext) marshalNPermissionOperationListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationListResp(ctx context.Context, sel ast.SelectionSet, v vo.PermissionOperationListResp) graphql.Marshaler {
	return ec._PermissionOperationListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermissionOperationListResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationListResp(ctx context.Context, sel ast.SelectionSet, v []*vo.PermissionOperationListResp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermissionOperationListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationListResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPermissionOperationListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperationListResp(ctx context.Context, sel ast.SelectionSet, v *vo.PermissionOperationListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PermissionOperationListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonalInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v vo.PersonalInfo) graphql.Marshaler {
	return ec._PersonalInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v *vo.PersonalInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PersonalInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPriority2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx context.Context, sel ast.SelectionSet, v vo.Priority) graphql.Marshaler {
	return ec._Priority(ctx, sel, &v)
}

func (ec *executionContext) marshalNPriority2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx context.Context, sel ast.SelectionSet, v *vo.Priority) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Priority(ctx, sel, v)
}

func (ec *executionContext) marshalNPriorityList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityList(ctx context.Context, sel ast.SelectionSet, v vo.PriorityList) graphql.Marshaler {
	return ec._PriorityList(ctx, sel, &v)
}

func (ec *executionContext) marshalNPriorityList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityList(ctx context.Context, sel ast.SelectionSet, v *vo.PriorityList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PriorityList(ctx, sel, v)
}

func (ec *executionContext) marshalNProcessStatus2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatus(ctx context.Context, sel ast.SelectionSet, v vo.ProcessStatus) graphql.Marshaler {
	return ec._ProcessStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcessStatus2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatus(ctx context.Context, sel ast.SelectionSet, v *vo.ProcessStatus) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProcessStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNProcessStatusList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatusList(ctx context.Context, sel ast.SelectionSet, v vo.ProcessStatusList) graphql.Marshaler {
	return ec._ProcessStatusList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcessStatusList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatusList(ctx context.Context, sel ast.SelectionSet, v *vo.ProcessStatusList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProcessStatusList(ctx, sel, v)
}

func (ec *executionContext) marshalNProject2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx context.Context, sel ast.SelectionSet, v vo.Project) graphql.Marshaler {
	return ec._Project(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx context.Context, sel ast.SelectionSet, v *vo.Project) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectAttachmentReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectAttachmentReq(ctx context.Context, v interface{}) (vo.ProjectAttachmentReq, error) {
	return ec.unmarshalInputProjectAttachmentReq(ctx, v)
}

func (ec *executionContext) marshalNProjectDayStat2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx context.Context, sel ast.SelectionSet, v vo.ProjectDayStat) graphql.Marshaler {
	return ec._ProjectDayStat(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectDayStat2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDayStat) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDayStat(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectDayStatList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectDayStatList) graphql.Marshaler {
	return ec._ProjectDayStatList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectDayStatList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDayStatList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDayStatList(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectDetail2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v vo.ProjectDetail) graphql.Marshaler {
	return ec._ProjectDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectDetail2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectDetail) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectFolderReq(ctx context.Context, v interface{}) (vo.ProjectFolderReq, error) {
	return ec.unmarshalInputProjectFolderReq(ctx, v)
}

func (ec *executionContext) marshalNProjectInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx context.Context, sel ast.SelectionSet, v vo.ProjectInfo) graphql.Marshaler {
	return ec._ProjectInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectInfoReq(ctx context.Context, v interface{}) (vo.ProjectInfoReq, error) {
	return ec.unmarshalInputProjectInfoReq(ctx, v)
}

func (ec *executionContext) unmarshalNProjectIssueRelatedStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectIssueRelatedStatusReq(ctx context.Context, v interface{}) (vo.ProjectIssueRelatedStatusReq, error) {
	return ec.unmarshalInputProjectIssueRelatedStatusReq(ctx, v)
}

func (ec *executionContext) marshalNProjectList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectList) graphql.Marshaler {
	return ec._ProjectList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectList(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectObjectType2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx context.Context, sel ast.SelectionSet, v vo.ProjectObjectType) graphql.Marshaler {
	return ec._ProjectObjectType(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectObjectType) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectObjectType(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectObjectTypeList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectObjectTypeList) graphql.Marshaler {
	return ec._ProjectObjectTypeList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectObjectTypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectObjectTypeList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectObjectTypeList(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectObjectTypeRestInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx context.Context, sel ast.SelectionSet, v vo.ProjectObjectTypeRestInfo) graphql.Marshaler {
	return ec._ProjectObjectTypeRestInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectObjectTypeRestInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectObjectTypeRestInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectObjectTypeRestInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectObjectTypeWithProjectList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeWithProjectList(ctx context.Context, sel ast.SelectionSet, v vo.ProjectObjectTypeWithProjectList) graphql.Marshaler {
	return ec._ProjectObjectTypeWithProjectList(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectObjectTypeWithProjectList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeWithProjectList(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectObjectTypeWithProjectList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectObjectTypeWithProjectList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectResourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectResourceReq(ctx context.Context, v interface{}) (vo.ProjectResourceReq, error) {
	return ec.unmarshalInputProjectResourceReq(ctx, v)
}

func (ec *executionContext) marshalNProjectStatisticsResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectStatisticsResp(ctx context.Context, sel ast.SelectionSet, v vo.ProjectStatisticsResp) graphql.Marshaler {
	return ec._ProjectStatisticsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectStatisticsResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectStatisticsResp(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectStatisticsResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectStatisticsResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectSupportObjectTypeListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectSupportObjectTypeListReq(ctx context.Context, v interface{}) (vo.ProjectSupportObjectTypeListReq, error) {
	return ec.unmarshalInputProjectSupportObjectTypeListReq(ctx, v)
}

func (ec *executionContext) marshalNProjectSupportObjectTypeListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectSupportObjectTypeListResp(ctx context.Context, sel ast.SelectionSet, v vo.ProjectSupportObjectTypeListResp) graphql.Marshaler {
	return ec._ProjectSupportObjectTypeListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectSupportObjectTypeListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectSupportObjectTypeListResp(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectSupportObjectTypeListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectSupportObjectTypeListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectType2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx context.Context, sel ast.SelectionSet, v vo.ProjectType) graphql.Marshaler {
	return ec._ProjectType(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectType) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectUserListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUserListReq(ctx context.Context, v interface{}) (vo.ProjectUserListReq, error) {
	return ec.unmarshalInputProjectUserListReq(ctx, v)
}

func (ec *executionContext) marshalNProjectUserListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUserListResp(ctx context.Context, sel ast.SelectionSet, v vo.ProjectUserListResp) graphql.Marshaler {
	return ec._ProjectUserListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectUserListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUserListResp(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectUserListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectUserListResp(ctx, sel, v)
}

func (ec *executionContext) marshalNQuitResult2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐQuitResult(ctx context.Context, sel ast.SelectionSet, v vo.QuitResult) graphql.Marshaler {
	return ec._QuitResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuitResult2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐQuitResult(ctx context.Context, sel ast.SelectionSet, v *vo.QuitResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QuitResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterWebSiteContactReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRegisterWebSiteContactReq(ctx context.Context, v interface{}) (vo.RegisterWebSiteContactReq, error) {
	return ec.unmarshalInputRegisterWebSiteContactReq(ctx, v)
}

func (ec *executionContext) unmarshalNRelatedIssueListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelatedIssueListReq(ctx context.Context, v interface{}) (vo.RelatedIssueListReq, error) {
	return ec.unmarshalInputRelatedIssueListReq(ctx, v)
}

func (ec *executionContext) unmarshalNRemoveOrgMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRemoveOrgMemberReq(ctx context.Context, v interface{}) (vo.RemoveOrgMemberReq, error) {
	return ec.unmarshalInputRemoveOrgMemberReq(ctx, v)
}

func (ec *executionContext) unmarshalNRemoveProjectMemberReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRemoveProjectMemberReq(ctx context.Context, v interface{}) (vo.RemoveProjectMemberReq, error) {
	return ec.unmarshalInputRemoveProjectMemberReq(ctx, v)
}

func (ec *executionContext) unmarshalNResetPasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResetPasswordReq(ctx context.Context, v interface{}) (vo.ResetPasswordReq, error) {
	return ec.unmarshalInputResetPasswordReq(ctx, v)
}

func (ec *executionContext) marshalNResource2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx context.Context, sel ast.SelectionSet, v vo.Resource) graphql.Marshaler {
	return ec._Resource(ctx, sel, &v)
}

func (ec *executionContext) marshalNResource2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx context.Context, sel ast.SelectionSet, v *vo.Resource) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Resource(ctx, sel, v)
}

func (ec *executionContext) marshalNResourceList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx context.Context, sel ast.SelectionSet, v vo.ResourceList) graphql.Marshaler {
	return ec._ResourceList(ctx, sel, &v)
}

func (ec *executionContext) marshalNResourceList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceList(ctx context.Context, sel ast.SelectionSet, v *vo.ResourceList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResourceList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRetrievePasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRetrievePasswordReq(ctx context.Context, v interface{}) (vo.RetrievePasswordReq, error) {
	return ec.unmarshalInputRetrievePasswordReq(ctx, v)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx context.Context, sel ast.SelectionSet, v vo.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx context.Context, sel ast.SelectionSet, v []*vo.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRole2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRole(ctx context.Context, sel ast.SelectionSet, v *vo.Role) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSendAuthCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendAuthCodeReq(ctx context.Context, v interface{}) (vo.SendAuthCodeReq, error) {
	return ec.unmarshalInputSendAuthCodeReq(ctx, v)
}

func (ec *executionContext) unmarshalNSendSmsLoginCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSendSmsLoginCodeReq(ctx context.Context, v interface{}) (vo.SendSmsLoginCodeReq, error) {
	return ec.unmarshalInputSendSmsLoginCodeReq(ctx, v)
}

func (ec *executionContext) unmarshalNSetPasswordReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSetPasswordReq(ctx context.Context, v interface{}) (vo.SetPasswordReq, error) {
	return ec.unmarshalInputSetPasswordReq(ctx, v)
}

func (ec *executionContext) marshalNStatCommon2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx context.Context, sel ast.SelectionSet, v vo.StatCommon) graphql.Marshaler {
	return ec._StatCommon(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatCommon2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx context.Context, sel ast.SelectionSet, v *vo.StatCommon) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatCommon(ctx, sel, v)
}

func (ec *executionContext) marshalNStatIssueExt2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatIssueExt(ctx context.Context, sel ast.SelectionSet, v vo.StatIssueExt) graphql.Marshaler {
	return ec._StatIssueExt(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatIssueExt2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatIssueExt(ctx context.Context, sel ast.SelectionSet, v *vo.StatIssueExt) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatIssueExt(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNStypeList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStypeList(ctx context.Context, sel ast.SelectionSet, v vo.StypeList) graphql.Marshaler {
	return ec._StypeList(ctx, sel, &v)
}

func (ec *executionContext) marshalNStypeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStypeList(ctx context.Context, sel ast.SelectionSet, v *vo.StypeList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StypeList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSwitchUserOrganizationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐSwitchUserOrganizationReq(ctx context.Context, v interface{}) (vo.SwitchUserOrganizationReq, error) {
	return ec.unmarshalInputSwitchUserOrganizationReq(ctx, v)
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx context.Context, sel ast.SelectionSet, v vo.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx context.Context, sel ast.SelectionSet, v *vo.Tag) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) marshalNTagList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagList(ctx context.Context, sel ast.SelectionSet, v vo.TagList) graphql.Marshaler {
	return ec._TagList(ctx, sel, &v)
}

func (ec *executionContext) marshalNTagList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagList(ctx context.Context, sel ast.SelectionSet, v *vo.TagList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TagList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTagListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTagListReq(ctx context.Context, v interface{}) (vo.TagListReq, error) {
	return ec.unmarshalInputTagListReq(ctx, v)
}

func (ec *executionContext) unmarshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, v interface{}) (types.Time, error) {
	var res types.Time
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, sel ast.SelectionSet, v types.Time) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTrendsList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx context.Context, sel ast.SelectionSet, v vo.TrendsList) graphql.Marshaler {
	return ec._TrendsList(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrendsList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendsList(ctx context.Context, sel ast.SelectionSet, v *vo.TrendsList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TrendsList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUnbindLoginNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUnbindLoginNameReq(ctx context.Context, v interface{}) (vo.UnbindLoginNameReq, error) {
	return ec.unmarshalInputUnbindLoginNameReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueAndIssueRelateReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueAndIssueRelateReq(ctx context.Context, v interface{}) (vo.UpdateIssueAndIssueRelateReq, error) {
	return ec.unmarshalInputUpdateIssueAndIssueRelateReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueObjectTypeReq(ctx context.Context, v interface{}) (vo.UpdateIssueObjectTypeReq, error) {
	return ec.unmarshalInputUpdateIssueObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueProjectObjectTypeReq(ctx context.Context, v interface{}) (vo.UpdateIssueProjectObjectTypeReq, error) {
	return ec.unmarshalInputUpdateIssueProjectObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueReq(ctx context.Context, v interface{}) (vo.UpdateIssueReq, error) {
	return ec.unmarshalInputUpdateIssueReq(ctx, v)
}

func (ec *executionContext) marshalNUpdateIssueResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateIssueResp) graphql.Marshaler {
	return ec._UpdateIssueResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateIssueResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateIssueResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateIssueResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateIssueSortReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueSortReq(ctx context.Context, v interface{}) (vo.UpdateIssueSortReq, error) {
	return ec.unmarshalInputUpdateIssueSortReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueSourceReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueSourceReq(ctx context.Context, v interface{}) (vo.UpdateIssueSourceReq, error) {
	return ec.unmarshalInputUpdateIssueSourceReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueStatusReq(ctx context.Context, v interface{}) (vo.UpdateIssueStatusReq, error) {
	return ec.unmarshalInputUpdateIssueStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIssueTagsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIssueTagsReq(ctx context.Context, v interface{}) (vo.UpdateIssueTagsReq, error) {
	return ec.unmarshalInputUpdateIssueTagsReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIterationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationReq(ctx context.Context, v interface{}) (vo.UpdateIterationReq, error) {
	return ec.unmarshalInputUpdateIterationReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIterationStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateIterationStatusReq(ctx context.Context, v interface{}) (vo.UpdateIterationStatusReq, error) {
	return ec.unmarshalInputUpdateIterationStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateOrgMemberCheckStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberCheckStatusReq(ctx context.Context, v interface{}) (vo.UpdateOrgMemberCheckStatusReq, error) {
	return ec.unmarshalInputUpdateOrgMemberCheckStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateOrgMemberStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrgMemberStatusReq(ctx context.Context, v interface{}) (vo.UpdateOrgMemberStatusReq, error) {
	return ec.unmarshalInputUpdateOrgMemberStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateOrganizationSettingsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateOrganizationSettingsReq(ctx context.Context, v interface{}) (vo.UpdateOrganizationSettingsReq, error) {
	return ec.unmarshalInputUpdateOrganizationSettingsReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePriorityReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdatePriorityReq(ctx context.Context, v interface{}) (vo.UpdatePriorityReq, error) {
	return ec.unmarshalInputUpdatePriorityReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProcessStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProcessStatusReq(ctx context.Context, v interface{}) (vo.UpdateProcessStatusReq, error) {
	return ec.unmarshalInputUpdateProcessStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProjectDetailReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectDetailReq(ctx context.Context, v interface{}) (vo.UpdateProjectDetailReq, error) {
	return ec.unmarshalInputUpdateProjectDetailReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProjectFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderReq(ctx context.Context, v interface{}) (vo.UpdateProjectFolderReq, error) {
	return ec.unmarshalInputUpdateProjectFolderReq(ctx, v)
}

func (ec *executionContext) marshalNUpdateProjectFolderResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateProjectFolderResp) graphql.Marshaler {
	return ec._UpdateProjectFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProjectFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateProjectFolderResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProjectFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProjectObjectTypeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectObjectTypeReq(ctx context.Context, v interface{}) (vo.UpdateProjectObjectTypeReq, error) {
	return ec.unmarshalInputUpdateProjectObjectTypeReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProjectReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectReq(ctx context.Context, v interface{}) (vo.UpdateProjectReq, error) {
	return ec.unmarshalInputUpdateProjectReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProjectResourceFolderReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderReq(ctx context.Context, v interface{}) (vo.UpdateProjectResourceFolderReq, error) {
	return ec.unmarshalInputUpdateProjectResourceFolderReq(ctx, v)
}

func (ec *executionContext) marshalNUpdateProjectResourceFolderResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	return ec._UpdateProjectResourceFolderResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProjectResourceFolderResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceFolderResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateProjectResourceFolderResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProjectResourceFolderResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProjectResourceNameReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectResourceNameReq(ctx context.Context, v interface{}) (vo.UpdateProjectResourceNameReq, error) {
	return ec.unmarshalInputUpdateProjectResourceNameReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProjectStatusReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateProjectStatusReq(ctx context.Context, v interface{}) (vo.UpdateProjectStatusReq, error) {
	return ec.unmarshalInputUpdateProjectStatusReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateRolePermissionOperationReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateRolePermissionOperationReq(ctx context.Context, v interface{}) (vo.UpdateRolePermissionOperationReq, error) {
	return ec.unmarshalInputUpdateRolePermissionOperationReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateRoleReq(ctx context.Context, v interface{}) (vo.UpdateRoleReq, error) {
	return ec.unmarshalInputUpdateRoleReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateTagReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateTagReq(ctx context.Context, v interface{}) (vo.UpdateTagReq, error) {
	return ec.unmarshalInputUpdateTagReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigReq(ctx context.Context, v interface{}) (vo.UpdateUserConfigReq, error) {
	return ec.unmarshalInputUpdateUserConfigReq(ctx, v)
}

func (ec *executionContext) marshalNUpdateUserConfigResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, v vo.UpdateUserConfigResp) graphql.Marshaler {
	return ec._UpdateUserConfigResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateUserConfigResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserConfigResp(ctx context.Context, sel ast.SelectionSet, v *vo.UpdateUserConfigResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateUserConfigResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateUserDefaultProjectConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserDefaultProjectConfigReq(ctx context.Context, v interface{}) (vo.UpdateUserDefaultProjectConfigReq, error) {
	return ec.unmarshalInputUpdateUserDefaultProjectConfigReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserInfoReq(ctx context.Context, v interface{}) (vo.UpdateUserInfoReq, error) {
	return ec.unmarshalInputUpdateUserInfoReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserOrgRoleReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserOrgRoleReq(ctx context.Context, v interface{}) (vo.UpdateUserOrgRoleReq, error) {
	return ec.unmarshalInputUpdateUserOrgRoleReq(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserPcConfigReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUpdateUserPcConfigReq(ctx context.Context, v interface{}) (vo.UpdateUserPcConfigReq, error) {
	return ec.unmarshalInputUpdateUserPcConfigReq(ctx, v)
}

func (ec *executionContext) marshalNUserConfig2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx context.Context, sel ast.SelectionSet, v vo.UserConfig) graphql.Marshaler {
	return ec._UserConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserConfig2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserConfig(ctx context.Context, sel ast.SelectionSet, v *vo.UserConfig) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserConfig(ctx, sel, v)
}

func (ec *executionContext) marshalNUserIdInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v vo.UserIDInfo) graphql.Marshaler {
	return ec._UserIdInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.UserIDInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserIdInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginReq(ctx context.Context, v interface{}) (vo.UserLoginReq, error) {
	return ec.unmarshalInputUserLoginReq(ctx, v)
}

func (ec *executionContext) marshalNUserLoginResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx context.Context, sel ast.SelectionSet, v vo.UserLoginResp) graphql.Marshaler {
	return ec._UserLoginResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserLoginResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserLoginResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserLoginResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserLoginResp(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganization2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx context.Context, sel ast.SelectionSet, v vo.UserOrganization) graphql.Marshaler {
	return ec._UserOrganization(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserOrganization2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganization) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganization(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganizationList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx context.Context, sel ast.SelectionSet, v vo.UserOrganizationList) graphql.Marshaler {
	return ec._UserOrganizationList(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserOrganizationList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationList(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganizationList) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganizationList(ctx, sel, v)
}

func (ec *executionContext) marshalNUserOrganizationListResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, v vo.UserOrganizationListResp) graphql.Marshaler {
	return ec._UserOrganizationListResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserOrganizationListResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganizationListResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserOrganizationListResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserOrganizationListResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRegisterReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterReq(ctx context.Context, v interface{}) (vo.UserRegisterReq, error) {
	return ec.unmarshalInputUserRegisterReq(ctx, v)
}

func (ec *executionContext) marshalNUserRegisterResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx context.Context, sel ast.SelectionSet, v vo.UserRegisterResp) graphql.Marshaler {
	return ec._UserRegisterResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserRegisterResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRegisterResp(ctx context.Context, sel ast.SelectionSet, v *vo.UserRegisterResp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserRegisterResp(ctx, sel, v)
}

func (ec *executionContext) marshalNVoid2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx context.Context, sel ast.SelectionSet, v vo.Void) graphql.Marshaler {
	return ec._Void(ctx, sel, &v)
}

func (ec *executionContext) marshalNVoid2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐVoid(ctx context.Context, sel ast.SelectionSet, v *vo.Void) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Void(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNprojectUser2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUser(ctx context.Context, sel ast.SelectionSet, v vo.ProjectUser) graphql.Marshaler {
	return ec._projectUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNprojectUser2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUser(ctx context.Context, sel ast.SelectionSet, v *vo.ProjectUser) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._projectUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	return graphql.UnmarshalAny(v)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalAny(v)
}

func (ec *executionContext) unmarshalOAny2ᚖinterface(ctx context.Context, v interface{}) (*interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAny2interface(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAny2ᚖinterface(ctx context.Context, sel ast.SelectionSet, v *interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOAny2interface(ctx, sel, *v)
}

func (ec *executionContext) marshalOAppInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.AppInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAppInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAreaLinkageResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx context.Context, sel ast.SelectionSet, v []*vo.AreaLinkageResp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAreaLinkageResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAreaLinkageResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAttachment2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v []*vo.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttachment2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOChangeList2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx context.Context, sel ast.SelectionSet, v vo.ChangeList) graphql.Marshaler {
	return ec._ChangeList(ctx, sel, &v)
}

func (ec *executionContext) marshalOChangeList2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx context.Context, sel ast.SelectionSet, v []*vo.ChangeList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChangeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOChangeList2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐChangeList(ctx context.Context, sel ast.SelectionSet, v *vo.ChangeList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChangeList(ctx, sel, v)
}

func (ec *executionContext) marshalODepartment2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx context.Context, sel ast.SelectionSet, v []*vo.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODepartmentListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx context.Context, v interface{}) (vo.DepartmentListReq, error) {
	return ec.unmarshalInputDepartmentListReq(ctx, v)
}

func (ec *executionContext) unmarshalODepartmentListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx context.Context, v interface{}) (*vo.DepartmentListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalODepartmentListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐDepartmentListReq(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOEveryPermission2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx context.Context, v interface{}) ([]*vo.EveryPermission, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.EveryPermission, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNEveryPermission2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐEveryPermission(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOGetInviteCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx context.Context, v interface{}) (vo.GetInviteCodeReq, error) {
	return ec.unmarshalInputGetInviteCodeReq(ctx, v)
}

func (ec *executionContext) unmarshalOGetInviteCodeReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx context.Context, v interface{}) (*vo.GetInviteCodeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGetInviteCodeReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetInviteCodeReq(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOGetIssueResourcesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueResourcesReq(ctx context.Context, v interface{}) (vo.GetIssueResourcesReq, error) {
	return ec.unmarshalInputGetIssueResourcesReq(ctx, v)
}

func (ec *executionContext) unmarshalOGetIssueResourcesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueResourcesReq(ctx context.Context, v interface{}) (*vo.GetIssueResourcesReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGetIssueResourcesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐGetIssueResourcesReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOHomeIssueInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOHomeIssueInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoReq(ctx context.Context, v interface{}) (vo.HomeIssueInfoReq, error) {
	return ec.unmarshalInputHomeIssueInfoReq(ctx, v)
}

func (ec *executionContext) unmarshalOHomeIssueInfoReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoReq(ctx context.Context, v interface{}) (*vo.HomeIssueInfoReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOHomeIssueInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueInfoReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOHomeIssueStatusInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueStatusInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueStatusInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueStatusInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHomeIssueTagInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.HomeIssueTagInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHomeIssueTagInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐHomeIssueTagInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIndustryResp2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx context.Context, sel ast.SelectionSet, v []*vo.IndustryResp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIndustryResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIndustryResp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚕint(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt642int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalOInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	return graphql.MarshalInt64(v)
}

func (ec *executionContext) unmarshalOInt642ᚕint64(ctx context.Context, v interface{}) ([]int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕint64(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt642int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚕᚖint64(ctx context.Context, v interface{}) ([]*int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOInt642ᚖint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕᚖint64(ctx context.Context, sel ast.SelectionSet, v []*int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt642ᚖint64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt642int64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt642int64(ctx, sel, *v)
}

func (ec *executionContext) marshalOIssue2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx context.Context, sel ast.SelectionSet, v []*vo.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIssueAssignRankInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueAssignRankInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueAssignRankInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueAssignRankInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIssueChildren2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx context.Context, v interface{}) (vo.IssueChildren, error) {
	return ec.unmarshalInputIssueChildren(ctx, v)
}

func (ec *executionContext) unmarshalOIssueChildren2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx context.Context, v interface{}) ([]*vo.IssueChildren, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.IssueChildren, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOIssueChildren2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIssueChildren2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx context.Context, v interface{}) (*vo.IssueChildren, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueChildren2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueChildren(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIssueDailyPersonalWorkCompletionStatData2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatData(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueDailyPersonalWorkCompletionStatData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueDailyPersonalWorkCompletionStatData2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIssueDailyPersonalWorkCompletionStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatReq(ctx context.Context, v interface{}) (vo.IssueDailyPersonalWorkCompletionStatReq, error) {
	return ec.unmarshalInputIssueDailyPersonalWorkCompletionStatReq(ctx, v)
}

func (ec *executionContext) unmarshalOIssueDailyPersonalWorkCompletionStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatReq(ctx context.Context, v interface{}) (*vo.IssueDailyPersonalWorkCompletionStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueDailyPersonalWorkCompletionStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueDailyPersonalWorkCompletionStatReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIssueObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectType(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueObjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIssueObjectTypeInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueObjectTypeInfo) graphql.Marshaler {
	return ec._IssueObjectTypeInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOIssueObjectTypeInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypeInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueObjectTypeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueObjectTypeInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIssueObjectTypesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypesReq(ctx context.Context, v interface{}) (vo.IssueObjectTypesReq, error) {
	return ec.unmarshalInputIssueObjectTypesReq(ctx, v)
}

func (ec *executionContext) unmarshalOIssueObjectTypesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypesReq(ctx context.Context, v interface{}) (*vo.IssueObjectTypesReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueObjectTypesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueObjectTypesReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIssueRestInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueRestInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueRestInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIssueRestInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoReq(ctx context.Context, v interface{}) (vo.IssueRestInfoReq, error) {
	return ec.unmarshalInputIssueRestInfoReq(ctx, v)
}

func (ec *executionContext) unmarshalOIssueRestInfoReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoReq(ctx context.Context, v interface{}) (*vo.IssueRestInfoReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueRestInfoReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueRestInfoReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIssueSource2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSource(ctx context.Context, sel ast.SelectionSet, v []*vo.IssueSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueSource2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIssueSourceInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx context.Context, sel ast.SelectionSet, v vo.IssueSourceInfo) graphql.Marshaler {
	return ec._IssueSourceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOIssueSourceInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourceInfo(ctx context.Context, sel ast.SelectionSet, v *vo.IssueSourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueSourceInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIssueSourcesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourcesReq(ctx context.Context, v interface{}) (vo.IssueSourcesReq, error) {
	return ec.unmarshalInputIssueSourcesReq(ctx, v)
}

func (ec *executionContext) unmarshalOIssueSourcesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourcesReq(ctx context.Context, v interface{}) (*vo.IssueSourcesReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueSourcesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueSourcesReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIssueStatByObjectType2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, v vo.IssueStatByObjectType) graphql.Marshaler {
	return ec._IssueStatByObjectType(ctx, sel, &v)
}

func (ec *executionContext) marshalOIssueStatByObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatByObjectType(ctx context.Context, sel ast.SelectionSet, v *vo.IssueStatByObjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueStatByObjectType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIssueStatusTypeStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx context.Context, v interface{}) (vo.IssueStatusTypeStatReq, error) {
	return ec.unmarshalInputIssueStatusTypeStatReq(ctx, v)
}

func (ec *executionContext) unmarshalOIssueStatusTypeStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx context.Context, v interface{}) (*vo.IssueStatusTypeStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIssueStatusTypeStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueStatusTypeStatReq(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOIssueTagReqInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx context.Context, v interface{}) ([]*vo.IssueTagReqInfo, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*vo.IssueTagReqInfo, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNIssueTagReqInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIssueTagReqInfo(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOIteration2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx context.Context, sel ast.SelectionSet, v []*vo.Iteration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIteration2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIteration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIterationListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx context.Context, v interface{}) (vo.IterationListReq, error) {
	return ec.unmarshalInputIterationListReq(ctx, v)
}

func (ec *executionContext) unmarshalOIterationListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx context.Context, v interface{}) (*vo.IterationListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIterationListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationListReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIterationStat2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx context.Context, sel ast.SelectionSet, v []*vo.IterationStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIterationStat2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIterationStatusTypeStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatReq(ctx context.Context, v interface{}) (vo.IterationStatusTypeStatReq, error) {
	return ec.unmarshalInputIterationStatusTypeStatReq(ctx, v)
}

func (ec *executionContext) unmarshalOIterationStatusTypeStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatReq(ctx context.Context, v interface{}) (*vo.IterationStatusTypeStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIterationStatusTypeStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐIterationStatusTypeStatReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOMemberInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v vo.MemberInfo) graphql.Marshaler {
	return ec._MemberInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOMemberInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.MemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMemberInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMemberInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐMemberInfo(ctx context.Context, sel ast.SelectionSet, v *vo.MemberInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MemberInfo(ctx, sel, v)
}

func (ec *executionContext) marshalONotice2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNotice(ctx context.Context, sel ast.SelectionSet, v []*vo.Notice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotice2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNotice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalONoticeListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeListReq(ctx context.Context, v interface{}) (vo.NoticeListReq, error) {
	return ec.unmarshalInputNoticeListReq(ctx, v)
}

func (ec *executionContext) unmarshalONoticeListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeListReq(ctx context.Context, v interface{}) (*vo.NoticeListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalONoticeListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐNoticeListReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOOrgProjectMemberInfoResp2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, v vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	return ec._OrgProjectMemberInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalOOrgProjectMemberInfoResp2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrgProjectMemberInfoResp(ctx context.Context, sel ast.SelectionSet, v *vo.OrgProjectMemberInfoResp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgProjectMemberInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationUser2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx context.Context, sel ast.SelectionSet, v []*vo.OrganizationUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationUser2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐOrganizationUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermission2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx context.Context, sel ast.SelectionSet, v []*vo.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermissionOperation2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx context.Context, sel ast.SelectionSet, v []*vo.PermissionOperation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermissionOperation2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPermissionOperation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPersonalInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v vo.PersonalInfo) graphql.Marshaler {
	return ec._PersonalInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOPersonalInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPersonalInfo(ctx context.Context, sel ast.SelectionSet, v *vo.PersonalInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonalInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOPriority2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx context.Context, sel ast.SelectionSet, v []*vo.Priority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPriority2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriority(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOPriorityListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityListReq(ctx context.Context, v interface{}) (vo.PriorityListReq, error) {
	return ec.unmarshalInputPriorityListReq(ctx, v)
}

func (ec *executionContext) unmarshalOPriorityListReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityListReq(ctx context.Context, v interface{}) (*vo.PriorityListReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPriorityListReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐPriorityListReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOProcessStatus2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatus(ctx context.Context, sel ast.SelectionSet, v []*vo.ProcessStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProcessStatus2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProcessStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProject2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx context.Context, sel ast.SelectionSet, v []*vo.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProject2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectDayStat2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectDayStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectDayStat2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOProjectDayStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx context.Context, v interface{}) (vo.ProjectDayStatReq, error) {
	return ec.unmarshalInputProjectDayStatReq(ctx, v)
}

func (ec *executionContext) unmarshalOProjectDayStatReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx context.Context, v interface{}) (*vo.ProjectDayStatReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOProjectDayStatReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDayStatReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOProjectDetail2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectDetail2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectObjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectObjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectObjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectObjectTypeRestInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectObjectTypeRestInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectObjectTypeRestInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypeRestInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProjectType2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectType2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOProjectsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx context.Context, v interface{}) (vo.ProjectsReq, error) {
	return ec.unmarshalInputProjectsReq(ctx, v)
}

func (ec *executionContext) unmarshalOProjectsReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx context.Context, v interface{}) (*vo.ProjectsReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOProjectsReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectsReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORelationIssue2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelationIssue(ctx context.Context, sel ast.SelectionSet, v vo.RelationIssue) graphql.Marshaler {
	return ec._RelationIssue(ctx, sel, &v)
}

func (ec *executionContext) marshalORelationIssue2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐRelationIssue(ctx context.Context, sel ast.SelectionSet, v *vo.RelationIssue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RelationIssue(ctx, sel, v)
}

func (ec *executionContext) marshalOResource2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx context.Context, sel ast.SelectionSet, v []*vo.Resource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResource2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOResourceInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx context.Context, sel ast.SelectionSet, v vo.ResourceInfo) graphql.Marshaler {
	return ec._ResourceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOResourceInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.ResourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOResourceInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOResourceInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐResourceInfo(ctx context.Context, sel ast.SelectionSet, v *vo.ResourceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOStatCommon2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx context.Context, sel ast.SelectionSet, v []*vo.StatCommon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatCommon2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐStatCommon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOTag2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx context.Context, sel ast.SelectionSet, v []*vo.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, v interface{}) (types.Time, error) {
	var res types.Time
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, sel ast.SelectionSet, v types.Time) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, v interface{}) (*types.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTime2githubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTime2ᚖgithubᚗcomᚋgalaxyᚑbookᚋcommonᚋcoreᚋtypesᚐTime(ctx context.Context, sel ast.SelectionSet, v *types.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOTrend2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx context.Context, sel ast.SelectionSet, v vo.Trend) graphql.Marshaler {
	return ec._Trend(ctx, sel, &v)
}

func (ec *executionContext) marshalOTrend2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx context.Context, sel ast.SelectionSet, v []*vo.Trend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTrend2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTrend2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrend(ctx context.Context, sel ast.SelectionSet, v *vo.Trend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Trend(ctx, sel, v)
}

func (ec *executionContext) marshalOTrendExtension2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendExtension(ctx context.Context, sel ast.SelectionSet, v vo.TrendExtension) graphql.Marshaler {
	return ec._TrendExtension(ctx, sel, &v)
}

func (ec *executionContext) marshalOTrendExtension2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendExtension(ctx context.Context, sel ast.SelectionSet, v *vo.TrendExtension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrendExtension(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTrendReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx context.Context, v interface{}) (vo.TrendReq, error) {
	return ec.unmarshalInputTrendReq(ctx, v)
}

func (ec *executionContext) unmarshalOTrendReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx context.Context, v interface{}) (*vo.TrendReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTrendReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐTrendReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUserIdInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v vo.UserIDInfo) graphql.Marshaler {
	return ec._UserIdInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserIdInfo2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v []*vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserIdInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserIDInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserIDInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserIdInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOUserOrganization2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx context.Context, sel ast.SelectionSet, v []*vo.UserOrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserOrganization2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserRoleInfo2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx context.Context, sel ast.SelectionSet, v vo.UserRoleInfo) graphql.Marshaler {
	return ec._UserRoleInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserRoleInfo2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐUserRoleInfo(ctx context.Context, sel ast.SelectionSet, v *vo.UserRoleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRoleInfo(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOprojectObjectTypesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypesReq(ctx context.Context, v interface{}) (vo.ProjectObjectTypesReq, error) {
	return ec.unmarshalInputprojectObjectTypesReq(ctx, v)
}

func (ec *executionContext) unmarshalOprojectObjectTypesReq2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypesReq(ctx context.Context, v interface{}) (*vo.ProjectObjectTypesReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOprojectObjectTypesReq2githubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectObjectTypesReq(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOprojectUser2ᚕᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUser(ctx context.Context, sel ast.SelectionSet, v []*vo.ProjectUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNprojectUser2ᚖgithubᚗcomᚋgalaxyᚑbookᚋpolarisᚑbackendᚋcommonᚋmodelᚋvoᚐProjectUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

// endregion ***************************** type.gotpl *****************************
